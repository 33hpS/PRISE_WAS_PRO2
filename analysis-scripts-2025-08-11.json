{
  "files": {
    "менный бланк/Прайс лист рабочая тема/src/components/ui/alert-dialog.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const AlertDialog = AlertDialogPrimitive.Root",
          "const AlertDialogTrigger = AlertDialogPrimitive.Trigger",
          "const AlertDialogPortal = AlertDialogPrimitive.Portal",
          "const AlertDialogOverlay = React.forwardRef<",
          "const AlertDialogContent = React.forwardRef<",
          "const AlertDialogHeader = ({",
          "const AlertDialogFooter = ({",
          "const AlertDialogTitle = React.forwardRef<",
          "const AlertDialogDescription = React.forwardRef<",
          "const AlertDialogAction = React.forwardRef<",
          "const AlertDialogCancel = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 11,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"",
          "import { cn } from \"@/lib/utils\"",
          "import { buttonVariants } from \"@/components/ui/button\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export {"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
      "lines": 142,
      "size": 4433,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2123760+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/i18n.ts": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "function detectInitialLang(): 'ru' | 'ky' | 'en' {",
          "const saved = localStorage.getItem('app_lang') as 'ru' | 'ky' | 'en' | null",
          "const nav = (navigator?.language || 'ru').toLowerCase()",
          "const resources = {"
        ],
        "interfaces": [],
        "hasJSX": false,
        "stats": {
          "componentsCount": 4,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [
          "import i18n from 'i18next'",
          "import { initReactI18next } from 'react-i18next'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function detectInitialLang(): 'ru' | 'ky' | 'en' {"
        ],
        "exports": [
          "export default i18n"
        ],
        "hooks": []
      },
      "content": "/**\n * i18n — инициализация локализации (RU / KY / EN)\n * Ресурсы: ключи для главной страницы и базовая терминология.\n */\n\nimport i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\n\n/**\n * Выбор начального языка:\n * - приоритет localStorage (app_lang)\n * - иначе язык браузера (ru/ky/en -> ru по умолчанию)\n */\nfunction detectInitialLang(): 'ru' | 'ky' | 'en' {\n  try {\n    const saved = localStorage.getItem('app_lang') as 'ru' | 'ky' | 'en' | null\n    if (saved === 'ru' || saved === 'ky' || saved === 'en') return saved\n  } catch {}\n  const nav = (navigator?.language || 'ru').toLowerCase()\n  if (nav.startsWith('ky')) return 'ky'\n  if (nav.startsWith('en')) return 'en'\n  return 'ru'\n}\n\n/** Ресурсы переводов */\nconst resources = {\n  ru: {\n    translation: {\n      home: {\n        badge: 'Готово к работе',\n        title: 'WASSER PRO — управление витриной и прайсом',\n        subtitle: 'Материалы, изделия, коллекции и прайс-лист в одном месте. Импорт из Excel, расчёт себестоимости и экспорт PDF/Excel.',\n        cta: {\n          collections: 'Перейти к коллекциям',\n          materials: 'Материалы',\n        },\n        cards: {\n          collections: {\n            title: 'Коллекции и витрина',\n            desc: 'Группируйте и упорядочивайте изделия по сезонам.',\n          },\n          products: {\n            title: 'Изделия и ТД',\n            desc: 'Карточки изделий и технологические карты с расчётами.',\n          },\n          materials: {\n            title: 'Материалы и импорт',\n            desc: 'Каталог материалов с импортом/экспортом CSV/XLSX.',\n          },\n        },\n      },\n    },\n  },\n  ky: {\n    translation: {\n      home: {\n        badge: 'Иштөөгө даяр',\n        title: 'WASSER PRO — витрина жана прайс башкаруу',\n        subtitle: 'Материалдар, буюмдар, коллекциялар жана прайс-лист бир жерде. Excel импорт, өздүк бааны эсептөө жана PDF/Excel экспорт.',\n        cta: {\n          collections: 'Коллекцияларга өтүү',\n          materials: 'Материалдар',\n        },\n        cards: {\n          collections: {\n            title: 'Коллекциялар жана витрина',\n            desc: 'Буюмдарды сезон боюнча топтоп, тартипке салыңыз.',\n          },\n          products: {\n            title: 'Буюмдар жана ТК',\n            desc: 'Буюм карталары жана технологиялык карталар эсептөөлөрү менен.',\n          },\n          materials: {\n            title: 'Материалдар жана импорт',\n            desc: 'Материалдар каталогу, CSV/XLSX импорт/экспорт.',\n          },\n        },\n      },\n    },\n  },\n  en: {\n    translation: {\n      home: {\n        badge: 'Ready to work',\n        title: 'WASSER PRO — showcase and price management',\n        subtitle: 'Materials, products, collections and price list in one place. Excel import, cost calculation and PDF/Excel export.',\n        cta: {\n          collections: 'Open collections',\n          materials: 'Materials',\n        },\n        cards: {\n          collections: {\n            title: 'Collections & showcase',\n            desc: 'Group and arrange products by seasons.',\n          },\n          products: {\n            title: 'Products & Tech Cards',\n            desc: 'Product cards and tech cards with calculations.',\n          },\n          materials: {\n            title: 'Materials & import',\n            desc: 'Materials catalog with CSV/XLSX import/export.',\n          },\n        },\n      },\n    },\n  },\n}\n\ni18n\n  .use(initReactI18next)\n  .init({\n    resources,\n    lng: detectInitialLang(),\n    fallbackLng: 'ru',\n    interpolation: { escapeValue: false },\n  })\n\nexport default i18n\n",
      "lines": 120,
      "size": 4357,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.1983643+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/alert.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const alertVariants = cva(",
          "const Alert = React.forwardRef<",
          "const AlertTitle = React.forwardRef<",
          "const AlertDescription = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 4,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import { cva, type VariantProps } from \"class-variance-authority\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Alert, AlertTitle, AlertDescription }"
        ],
        "hooks": []
      },
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
      "lines": 60,
      "size": 1598,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2138875+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/home/RecentActivity.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "function readLS<T>(key: string, fallback: T): T {",
          "const raw = localStorage.getItem(key)",
          "function shortDateTime(ts: number): string {",
          "function getIcon(ev: AuditEvent): React.ReactNode {",
          "const RecentActivity = memo(function RecentActivity({ limit = 6 }: RecentActivityProps): React.ReactElement {",
          "const items = useMemo(() => {",
          "const list = readLS<AuditEvent[]>('wasser_change_log', [])"
        ],
        "interfaces": [
          "export interface AuditEvent {",
          "export interface RecentActivityProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 7,
          "typesCount": 0,
          "hooksCount": 2,
          "interfacesCount": 2,
          "exportsCount": 3,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 3
        },
        "imports": [
          "import React, { memo, useMemo } from 'react'",
          "import { Archive, ArchiveRestore, Edit2, Plus, Layers, Package, Grid2X2, GripVertical, Trash2, Clock, BookOpenCheck } from 'lucide-react'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function readLS<T>(key: string, fallback: T): T {",
          "function shortDateTime(ts: number): string {",
          "function getIcon(ev: AuditEvent): React.ReactNode {"
        ],
        "exports": [
          "export interface AuditEvent {",
          "export interface RecentActivityProps {",
          "export default RecentActivity"
        ],
        "hooks": [
          "import React, { memo, useMemo } from 'react'",
          "const items = useMemo(() => {"
        ]
      },
      "content": "/**\n * RecentActivity — последние изменения из журнала\n * Берёт данные из localStorage (ключ: wasser_change_log) и показывает список событий.\n */\n\nimport React, { memo, useMemo } from 'react'\nimport { Archive, ArchiveRestore, Edit2, Plus, Layers, Package, Grid2X2, GripVertical, Trash2, Clock, BookOpenCheck } from 'lucide-react'\n\n/**\n * AuditEvent — тип записи журнала\n */\nexport interface AuditEvent {\n  id: string\n  at: number\n  action: string\n  entity: 'collection' | 'product' | 'system' | string\n  entityId?: string\n  details?: any\n  version?: string\n}\n\n/**\n * Пропсы RecentActivity\n */\nexport interface RecentActivityProps {\n  /** Сколько записей показать */\n  limit?: number\n}\n\n/**\n * Безопасное чтение из localStorage\n */\nfunction readLS<T>(key: string, fallback: T): T {\n  try {\n    const raw = localStorage.getItem(key)\n    return raw ? (JSON.parse(raw) as T) : fallback\n  } catch {\n    return fallback\n  }\n}\n\n/**\n * Форматирование даты-времени\n */\nfunction shortDateTime(ts: number): string {\n  try {\n    return new Date(ts).toLocaleString('ru-RU', { dateStyle: 'medium', timeStyle: 'short' })\n  } catch {\n    return ''\n  }\n}\n\n/**\n * Получить иконку по типу события\n */\nfunction getIcon(ev: AuditEvent): React.ReactNode {\n  if (ev.entity === 'product') {\n    if (ev.action === 'create') return <Plus size={14} />\n    if (ev.action === 'delete') return <Trash2 size={14} />\n    if (ev.action === 'update') return <Edit2 size={14} />\n    return <Package size={14} />\n  }\n  if (ev.entity === 'collection') {\n    if (ev.action === 'archive') return <Archive size={14} />\n    if (ev.action === 'unarchive') return <ArchiveRestore size={14} />\n    if (ev.action === 'reorder') return <GripVertical size={14} />\n    if (ev.action === 'create') return <Plus size={14} />\n    if (ev.action === 'update') return <Edit2 size={14} />\n    if (ev.action === 'add_product') return <Plus size={14} />\n    if (ev.action === 'delete') return <Trash2 size={14} />\n    return <Grid2X2 size={14} />\n  }\n  return <BookOpenCheck size={14} />\n}\n\n/**\n * RecentActivity — список последних событий\n */\nconst RecentActivity = memo(function RecentActivity({ limit = 6 }: RecentActivityProps): React.ReactElement {\n  const items = useMemo(() => {\n    const list = readLS<AuditEvent[]>('wasser_change_log', [])\n    return list.slice(0, limit)\n  }, [limit])\n\n  return (\n    <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"text-sm font-semibold text-gray-900\">Последние изменения</div>\n        <div className=\"inline-flex items-center gap-1 text-xs text-gray-500\">\n          <Clock size={12} />\n          <span>Обновлено: {shortDateTime(Date.now())}</span>\n        </div>\n      </div>\n\n      {items.length === 0 ? (\n        <div className=\"text-sm text-gray-500 py-8 text-center\">\n          Пока нет записей. Действия на страницах «Коллекции» и «Изделия» появятся здесь.\n        </div>\n      ) : (\n        <ul className=\"divide-y divide-gray-200\">\n          {items.map((ev) => (\n            <li key={ev.id} className=\"py-2 flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-gray-50 border border-gray-200 flex items-center justify-center text-gray-700\">\n                {getIcon(ev)}\n              </div>\n              <div className=\"min-w-0 flex-1\">\n                <div className=\"text-sm text-gray-800 truncate\">\n                  <span className=\"font-medium\">{ev.entity}</span> — {ev.action}\n                </div>\n                <div className=\"text-xs text-gray-500 truncate\">\n                  {ev.details?.name ? ev.details.name : ev.entityId || '—'} • {shortDateTime(ev.at)}\n                </div>\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  )\n})\n\nexport default RecentActivity\n",
      "lines": 123,
      "size": 4155,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3227921+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/hover-card.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const HoverCard = HoverCardPrimitive.Root",
          "const HoverCardTrigger = HoverCardPrimitive.Trigger",
          "const HoverCardContent = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 3,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { HoverCard, HoverCardTrigger, HoverCardContent }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
      "lines": 30,
      "size": 1251,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2485258+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/pages/Journal.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "function readLog(): AuditEvent[] {",
          "const raw = localStorage.getItem('wasser_change_log')",
          "const data = raw ? JSON.parse(raw) : []",
          "export default function JournalPage(): React.ReactElement {",
          "const events = useMemo(() => readLog(), [])"
        ],
        "interfaces": [
          "interface AuditEvent {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 5,
          "typesCount": 0,
          "hooksCount": 2,
          "interfacesCount": 1,
          "exportsCount": 1,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [
          "import React, { useMemo } from 'react'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function readLog(): AuditEvent[] {"
        ],
        "exports": [
          "export default function JournalPage(): React.ReactElement {"
        ],
        "hooks": [
          "import React, { useMemo } from 'react'",
          "const events = useMemo(() => readLog(), [])"
        ]
      },
      "content": "/**\n * Страница \"Журнал изменений\"\n * Чтение событий из localStorage (wasser_change_log). Если нет событий — показываем подсказку.\n */\nimport React, { useMemo } from 'react'\n\n/**\n * Тип события журнала\n */\ninterface AuditEvent {\n  id: string\n  at: number\n  action: string\n  entity: 'material' | 'product' | 'collection' | 'system' | string\n  entityId?: string\n  details?: any\n  version?: string\n}\n\n/**\n * Безопасное чтение журнала из localStorage\n */\nfunction readLog(): AuditEvent[] {\n  try {\n    const raw = localStorage.getItem('wasser_change_log')\n    const data = raw ? JSON.parse(raw) : []\n    return Array.isArray(data) ? data : []\n  } catch {\n    return []\n  }\n}\n\n/**\n * JournalPage — страница журнала изменений\n */\nexport default function JournalPage(): React.ReactElement {\n  const events = useMemo(() => readLog(), [])\n  return (\n    <div className=\"max-w-6xl mx-auto px-6 py-8\">\n      <h1 className=\"text-2xl font-bold text-gray-900\">Журнал изменений</h1>\n      {events.length === 0 ? (\n        <div className=\"mt-4 bg-white border border-gray-200 rounded-xl p-5 text-gray-600\">\n          Журнал пуст. Операции (создание/редактирование/архив/перетаскивание) будут фиксироваться здесь.\n        </div>\n      ) : (\n        <div className=\"mt-4 bg-white border border-gray-200 rounded-xl p-0 overflow-hidden\">\n          <table className=\"min-w-full\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-4 py-3 text-left text-xs font-semibold text-gray-500 uppercase\">Время</th>\n                <th className=\"px-4 py-3 text-left text-xs font-semibold text-gray-500 uppercase\">Сущность</th>\n                <th className=\"px-4 py-3 text-left text-xs font-semibold text-gray-500 uppercase\">Действие</th>\n                <th className=\"px-4 py-3 text-left text-xs font-semibold text-gray-500 uppercase\">Детали</th>\n              </tr>\n            </thead>\n            <tbody>\n              {events.map((e) => (\n                <tr key={e.id} className=\"border-t border-gray-100 hover:bg-gray-50\">\n                  <td className=\"px-4 py-3 text-sm text-gray-900\">\n                    {new Date(e.at).toLocaleString('ru-RU')}\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-gray-700\">{e.entity}</td>\n                  <td className=\"px-4 py-3 text-sm text-gray-700\">{e.action}</td>\n                  <td className=\"px-4 py-3 text-sm text-gray-500\">\n                    <pre className=\"whitespace-pre-wrap break-words text-xs\">\n                      {JSON.stringify(e.details ?? {}, null, 2)}\n                    </pre>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  )\n}\n",
      "lines": 78,
      "size": 3009,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.4105128+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/input.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>("
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Input }"
        ],
        "hooks": []
      },
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "lines": 23,
      "size": 768,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2530422+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/services/analytics.ts": {
      "analysis": {
        "types": [],
        "classes": [
          "export class AnalyticsService {"
        ],
        "components": [
          "const now = Date.now()",
          "const dayAgo = now - 24 * 60 * 60 * 1000",
          "const active = collections.filter((c) => !c.is_archived)",
          "const pinned = collections.filter((c) => c.pinned && !c.is_archived)",
          "const todayOps = audit.filter((a) => a.at > dayAgo)",
          "const health = this.assessHealth(collections, products, audit)",
          "const hasData = collections.length > 0 && products.length > 0",
          "const hasRecent = audit.some((a) => a.at > Date.now() - 7 * 24 * 60 * 60 * 1000)"
        ],
        "interfaces": [
          "export interface SystemMetrics {"
        ],
        "hasJSX": false,
        "stats": {
          "componentsCount": 8,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 1,
          "classesCount": 1,
          "functionsCount": 0
        },
        "imports": [
          "import type { AuditEvent, SimpleCollection, SimpleProduct } from './storage'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface SystemMetrics {",
          "export class AnalyticsService {"
        ],
        "hooks": []
      },
      "content": "/**\n * AnalyticsService — вычисление метрик системы и отбор активностей.\n */\n\nimport type { AuditEvent, SimpleCollection, SimpleProduct } from './storage'\n\n/**\n * SystemMetrics — набор показателей состояния\n */\nexport interface SystemMetrics {\n  /** Всего коллекций */\n  totalCollections: number\n  /** Всего изделий */\n  totalProducts: number\n  /** Активных (неархивных) коллекций */\n  activeCollections: number\n  /** Закреплённых коллекций */\n  pinnedCollections: number\n  /** Всего операций в журнале */\n  totalOperations: number\n  /** Операций за последние 24 часа */\n  todayOperations: number\n  /** Состояние системы */\n  systemHealth: 'excellent' | 'good' | 'warning' | 'critical'\n  /** Примерный аптайм, % */\n  uptime: number\n}\n\n/**\n * AnalyticsService — методы аналитики\n */\nexport class AnalyticsService {\n  /** Посчитать метрики */\n  static calculate(\n    collections: SimpleCollection[],\n    products: SimpleProduct[],\n    audit: AuditEvent[],\n  ): SystemMetrics {\n    const now = Date.now()\n    const dayAgo = now - 24 * 60 * 60 * 1000\n\n    const active = collections.filter((c) => !c.is_archived)\n    const pinned = collections.filter((c) => c.pinned && !c.is_archived)\n    const todayOps = audit.filter((a) => a.at > dayAgo)\n\n    const health = this.assessHealth(collections, products, audit)\n\n    return {\n      totalCollections: collections.length,\n      totalProducts: products.length,\n      activeCollections: active.length,\n      pinnedCollections: pinned.length,\n      totalOperations: audit.length,\n      todayOperations: todayOps.length,\n      systemHealth: health,\n      uptime: this.estimateUptime(),\n    }\n  }\n\n  /** Определить здоровье системы по простым эвристикам */\n  private static assessHealth(\n    collections: SimpleCollection[],\n    products: SimpleProduct[],\n    audit: AuditEvent[],\n  ): SystemMetrics['systemHealth'] {\n    const hasData = collections.length > 0 && products.length > 0\n    const hasRecent = audit.some((a) => a.at > Date.now() - 7 * 24 * 60 * 60 * 1000)\n    if (hasData && hasRecent) return 'excellent'\n    if (hasData) return 'good'\n    if (collections.length > 0 || products.length > 0) return 'warning'\n    return 'critical'\n  }\n\n  /** Черновая оценка аптайма для демо */\n  private static estimateUptime(): number {\n    return 95 + Math.floor(Math.random() * 5)\n  }\n\n  /** Последние N событий */\n  static recent(audit: AuditEvent[], limit = 5): AuditEvent[] {\n    return audit.slice(0, limit)\n  }\n}\n",
      "lines": 84,
      "size": 2793,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.4240463+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/pages/Settings.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const LS_KEYS = {",
          "function readLS<T>(key: string, fallback: T): T {",
          "const raw = localStorage.getItem(key)",
          "function writeLS<T>(key: string, value: T): void {",
          "function seedPrice(): PriceSettings {",
          "function rid(): string {",
          "function sanitizeNumber(n: any, min: number, max?: number): number {",
          "const val = Number(n)",
          "function PriceTypeRow({",
          "function FinishTypeRow({",
          "export default function SettingsPage(): React.ReactElement {",
          "const addPriceType = useCallback(() => {",
          "const addFinishType = useCallback(() => {",
          "const patchPriceType = useCallback((id: string, patch: Partial<PriceType>) => {",
          "const patchFinishType = useCallback((id: string, patch: Partial<FinishType>) => {",
          "const removePriceType = useCallback((id: string) => {",
          "const removeFinishType = useCallback((id: string) => {",
          "const saveAll = useCallback(() => {",
          "const resetDefaults = useCallback(() => {",
          "const def = seedPrice()",
          "const isEmptyPT = useMemo(() => settings.productTypes.length === 0, [settings.productTypes])",
          "const isEmptyFT = useMemo(() => settings.finishTypes.length === 0, [settings.finishTypes])"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 22,
          "typesCount": 0,
          "hooksCount": 13,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 7
        },
        "imports": [
          "import React, { useCallback, useMemo, useState } from 'react'",
          "import { Check, Plus, Save, Trash2, RotateCcw } from 'lucide-react'",
          "import type { FinishType, PriceSettings, PriceType } from '../types/models'",
          "import NumericField from '../components/common/NumericField'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function readLS<T>(key: string, fallback: T): T {",
          "function writeLS<T>(key: string, value: T): void {",
          "function seedPrice(): PriceSettings {",
          "function rid(): string {",
          "function sanitizeNumber(n: any, min: number, max?: number): number {",
          "function PriceTypeRow({",
          "function FinishTypeRow({"
        ],
        "exports": [
          "export default function SettingsPage(): React.ReactElement {"
        ],
        "hooks": [
          "import React, { useCallback, useMemo, useState } from 'react'",
          "const [settings, setSettings] = useState<PriceSettings>(() => readLS<PriceSettings>(LS_KEYS.price, seedPrice()))",
          "const [savedFlag, setSavedFlag] = useState(false)",
          "const addPriceType = useCallback(() => {",
          "const addFinishType = useCallback(() => {",
          "const patchPriceType = useCallback((id: string, patch: Partial<PriceType>) => {",
          "const patchFinishType = useCallback((id: string, patch: Partial<FinishType>) => {",
          "const removePriceType = useCallback((id: string) => {",
          "const removeFinishType = useCallback((id: string) => {",
          "const saveAll = useCallback(() => {",
          "const resetDefaults = useCallback(() => {",
          "const isEmptyPT = useMemo(() => settings.productTypes.length === 0, [settings.productTypes])",
          "const isEmptyFT = useMemo(() => settings.finishTypes.length === 0, [settings.finishTypes])"
        ]
      },
      "content": "/**\n * Страница \"Настройки\" — Ценообразование\n * Управление типами изделий и типами отделки: наценки (%) и стоимость работ.\n * Хранение в localStorage по ключу \"wasser_price_settings_data\" (совместимо со страницей \"Изделия\").\n */\n\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Check, Plus, Save, Trash2, RotateCcw } from 'lucide-react'\nimport type { FinishType, PriceSettings, PriceType } from '../types/models'\nimport NumericField from '../components/common/NumericField'\n\n/**\n * Ключи localStorage\n */\nconst LS_KEYS = {\n  price: 'wasser_price_settings_data',\n} as const\n\n/**\n * Безопасное чтение JSON из localStorage\n */\nfunction readLS<T>(key: string, fallback: T): T {\n  try {\n    const raw = localStorage.getItem(key)\n    return raw ? (JSON.parse(raw) as T) : fallback\n  } catch {\n    return fallback\n  }\n}\n\n/**\n * Безопасная запись JSON в localStorage\n */\nfunction writeLS<T>(key: string, value: T): void {\n  try {\n    localStorage.setItem(key, JSON.stringify(value))\n  } catch {\n    /* noop */\n  }\n}\n\n/**\n * Значения по умолчанию для ценообразования\n */\nfunction seedPrice(): PriceSettings {\n  return {\n    productTypes: [\n      { id: 'pt1', name: 'Тумба с дверями', markup: 10, workCost: 1000 },\n      { id: 'pt2', name: 'Тумба с ящиками', markup: 15, workCost: 1500 },\n      { id: 'pt3', name: 'Пенал', markup: 20, workCost: 2000 },\n    ],\n    finishTypes: [\n      { id: 'ft1', name: 'Крашеный', markup: 50 },\n      { id: 'ft2', name: 'Пленочный', markup: 30 },\n    ],\n  }\n}\n\n/**\n * Утилита: короткий ID\n */\nfunction rid(): string {\n  return Date.now().toString(36) + Math.random().toString(36).slice(2, 8)\n}\n\n/**\n * Валидация полей типов\n */\nfunction sanitizeNumber(n: any, min: number, max?: number): number {\n  const val = Number(n)\n  if (Number.isNaN(val)) return min\n  if (max != null) return Math.min(Math.max(val, min), max)\n  return Math.max(val, min)\n}\n\n/**\n * Компонент: строка типа изделия\n */\nfunction PriceTypeRow({\n  item,\n  onChange,\n  onDelete,\n}: {\n  item: PriceType\n  onChange: (patch: Partial<PriceType>) => void\n  onDelete: () => void\n}): React.ReactElement {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-[1fr_120px_140px_48px] gap-3 items-center\">\n      <input\n        type=\"text\"\n        value={item.name}\n        onChange={(e) => onChange({ name: e.target.value })}\n        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n        placeholder=\"Название типа изделия\"\n        aria-label=\"Название типа изделия\"\n      />\n      <NumericField\n        value={item.markup}\n        min={0}\n        max={500}\n        onValueChange={(n) => onChange({ markup: sanitizeNumber(n ?? 0, 0, 500) })}\n        inputClassName=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n        ariaLabel=\"Наценка, %\"\n      />\n      <NumericField\n        value={item.workCost}\n        min={0}\n        onValueChange={(n) => onChange({ workCost: sanitizeNumber(n ?? 0, 0) })}\n        inputClassName=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n        ariaLabel=\"Стоимость работ\"\n      />\n      <button\n        type=\"button\"\n        onClick={onDelete}\n        className=\"inline-flex items-center justify-center h-10 rounded-lg border border-gray-300 text-red-600 hover:bg-red-50\"\n        title=\"Удалить тип изделия\"\n        aria-label=\"Удалить тип изделия\"\n      >\n        <Trash2 size={16} />\n      </button>\n    </div>\n  )\n}\n\n/**\n * Компонент: строка типа отделки\n */\nfunction FinishTypeRow({\n  item,\n  onChange,\n  onDelete,\n}: {\n  item: FinishType\n  onChange: (patch: Partial<FinishType>) => void\n  onDelete: () => void\n}): React.ReactElement {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-[1fr_120px_48px] gap-3 items-center\">\n      <input\n        type=\"text\"\n        value={item.name}\n        onChange={(e) => onChange({ name: e.target.value })}\n        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n        placeholder=\"Название типа отделки\"\n        aria-label=\"Название типа отделки\"\n      />\n      <NumericField\n        value={item.markup}\n        min={0}\n        max={500}\n        onValueChange={(n) => onChange({ markup: sanitizeNumber(n ?? 0, 0, 500) })}\n        inputClassName=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n        ariaLabel=\"Наценка, %\"\n      />\n      <button\n        type=\"button\"\n        onClick={onDelete}\n        className=\"inline-flex items-center justify-center h-10 rounded-lg border border-gray-300 text-red-600 hover:bg-red-50\"\n        title=\"Удалить тип отделки\"\n        aria-label=\"Удалить тип отделки\"\n      >\n        <Trash2 size={16} />\n      </button>\n    </div>\n  )\n}\n\n/**\n * Страница \"Настройки\" — Ценообразование\n */\nexport default function SettingsPage(): React.ReactElement {\n  // Текущее состояние настроек (из LS или дефолты)\n  const [settings, setSettings] = useState<PriceSettings>(() => readLS<PriceSettings>(LS_KEYS.price, seedPrice()))\n  const [savedFlag, setSavedFlag] = useState(false)\n\n  /** Добавить тип изделия */\n  const addPriceType = useCallback(() => {\n    const p: PriceType = { id: rid(), name: 'Новый тип', markup: 0, workCost: 0 }\n    setSettings((prev) => ({ ...prev, productTypes: [...prev.productTypes, p] }))\n  }, [])\n\n  /** Добавить тип отделки */\n  const addFinishType = useCallback(() => {\n    const f: FinishType = { id: rid(), name: 'Новая отделка', markup: 0 }\n    setSettings((prev) => ({ ...prev, finishTypes: [...prev.finishTypes, f] }))\n  }, [])\n\n  /** Обновить один тип изделия */\n  const patchPriceType = useCallback((id: string, patch: Partial<PriceType>) => {\n    setSettings((prev) => ({\n      ...prev,\n      productTypes: prev.productTypes.map((t) => (t.id === id ? { ...t, ...patch } : t)),\n    }))\n  }, [])\n\n  /** Обновить один тип отделки */\n  const patchFinishType = useCallback((id: string, patch: Partial<FinishType>) => {\n    setSettings((prev) => ({\n      ...prev,\n      finishTypes: prev.finishTypes.map((t) => (t.id === id ? { ...t, ...patch } : t)),\n    }))\n  }, [])\n\n  /** Удалить тип изделия */\n  const removePriceType = useCallback((id: string) => {\n    setSettings((prev) => ({\n      ...prev,\n      productTypes: prev.productTypes.filter((t) => t.id !== id),\n    }))\n  }, [])\n\n  /** Удалить тип отделки */\n  const removeFinishType = useCallback((id: string) => {\n    setSettings((prev) => ({\n      ...prev,\n      finishTypes: prev.finishTypes.filter((t) => t.id !== id),\n    }))\n  }, [])\n\n  /** Сохранить в localStorage */\n  const saveAll = useCallback(() => {\n    writeLS(LS_KEYS.price, settings)\n    setSavedFlag(true)\n    // Скрыть индикатор \"сохранено\" через 2 сек\n    window.setTimeout(() => setSavedFlag(false), 2000)\n  }, [settings])\n\n  /** Сбросить к дефолтам */\n  const resetDefaults = useCallback(() => {\n    if (!window.confirm('Сбросить настройки ценообразования к значениям по умолчанию?')) return\n    const def = seedPrice()\n    setSettings(def)\n    writeLS(LS_KEYS.price, def)\n    setSavedFlag(true)\n    window.setTimeout(() => setSavedFlag(false), 2000)\n  }, [])\n\n  /** Признак пустых списков */\n  const isEmptyPT = useMemo(() => settings.productTypes.length === 0, [settings.productTypes])\n  const isEmptyFT = useMemo(() => settings.finishTypes.length === 0, [settings.finishTypes])\n\n  return (\n    <div className=\"max-w-5xl mx-auto px-6 py-8 space-y-6\">\n      <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Ценообразование</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Управляйте типами изделий и отделки: наценки и стоимость работ используются в расчётах на страницах\n            “Изделия” и “Прайс‑лист”.\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <button\n            type=\"button\"\n            onClick={resetDefaults}\n            className=\"inline-flex items-center gap-2 px-4 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50\"\n            title=\"Сбросить к значениям по умолчанию\"\n          >\n            <RotateCcw size={16} />\n            Сбросить\n          </button>\n          <button\n            type=\"button\"\n            onClick={saveAll}\n            className=\"inline-flex items-center gap-2 px-4 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 text-white\"\n            title=\"Сохранить настройки\"\n          >\n            <Save size={16} />\n            Сохранить\n          </button>\n        </div>\n      </div>\n\n      {savedFlag && (\n        <div className=\"p-3 rounded-lg border border-green-200 bg-green-50 text-green-800 inline-flex items-center gap-2\">\n          <Check size={16} />\n          Настройки сохранены\n        </div>\n      )}\n\n      {/* Типы изделий */}\n      <div className=\"bg-white border border-gray-200 rounded-xl p-5 space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-900\">Типы изделий</h2>\n            <p className=\"text-sm text-gray-600\">\n              Наценка в процентах применяется к сумме (материалы + работы) перед учётом отделки.\n            </p>\n          </div>\n          <button\n            type=\"button\"\n            onClick={addPriceType}\n            className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50\"\n            title=\"Добавить тип изделия\"\n          >\n            <Plus size={16} />\n            Добавить тип\n          </button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {isEmptyPT ? (\n            <div className=\"text-sm text-gray-600\">Пока нет типов. Добавьте первый тип изделия.</div>\n          ) : (\n            settings.productTypes.map((t) => (\n              <PriceTypeRow\n                key={t.id}\n                item={t}\n                onChange={(patch) => patchPriceType(t.id, patch)}\n                onDelete={() => removePriceType(t.id)}\n              />\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* Типы отделки */}\n      <div className=\"bg-white border border-gray-200 rounded-xl p-5 space-y-4\">\n        <div className=\"flex items-center justify_between\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-900\">Типы отделки</h2>\n            <p className=\"text-sm text-gray-600\">\n              Наценка в процентах применяется после наценки типа изделия.\n            </p>\n          </div>\n          <button\n            type=\"button\"\n            onClick={addFinishType}\n            className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50\"\n            title=\"Добавить тип отделки\"\n          >\n            <Plus size={16} />\n            Добавить отделку\n          </button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {isEmptyFT ? (\n            <div className=\"text-sm text-gray-600\">Пока нет типов отделки. Добавьте первый тип отделки.</div>\n          ) : (\n            settings.finishTypes.map((t) => (\n              <FinishTypeRow\n                key={t.id}\n                item={t}\n                onChange={(patch) => patchFinishType(t.id, patch)}\n                onDelete={() => removeFinishType(t.id)}\n              />\n            ))\n          )}\n        </div>\n      </div>\n\n      <div className=\"flex justify-end\">\n        <button\n          type=\"button\"\n          onClick={saveAll}\n          className=\"inline-flex items-center gap-2 px-4 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 text-white\"\n          title=\"Сохранить настройки\"\n        >\n          <Save size={16} />\n          Сохранить изменения\n        </button>\n      </div>\n    </div>\n  )\n}\n",
      "lines": 368,
      "size": 13198,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.4085141+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/home/QuickActions.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const QuickActions = memo(function QuickActions({ items }: QuickActionsProps): React.ReactElement {"
        ],
        "interfaces": [
          "export interface QuickActionItem {",
          "export interface QuickActionsProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 2,
          "exportsCount": 3,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React, { memo } from 'react'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface QuickActionItem {",
          "export interface QuickActionsProps {",
          "export default QuickActions"
        ],
        "hooks": []
      },
      "content": "/**\n * QuickActions — быстрые действия на главной странице\n * Мобильные улучшения: min-height ≥44px, focus-ring, увеличенный gap.\n */\n\nimport React, { memo } from 'react'\n\n/**\n * QuickActionItem — описание одного быстрого действия\n */\nexport interface QuickActionItem {\n  /** Заголовок действия */\n  label: string\n  /** Иконка (lucide-react) */\n  icon: React.ReactNode\n  /** Обработчик клика */\n  onClick: () => void\n  /** Цветовой акцент (tailwind класс), опционально */\n  accentClass?: string\n  /** Подсказка в title */\n  title?: string\n}\n\n/**\n * Пропсы компонента QuickActions\n */\nexport interface QuickActionsProps {\n  /** Набор быстрых действий */\n  items: QuickActionItem[]\n}\n\n/**\n * QuickActions — сетка быстрых действий\n */\nconst QuickActions = memo(function QuickActions({ items }: QuickActionsProps): React.ReactElement {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n      {items.map((it, idx) => (\n        <button\n          key={idx}\n          type=\"button\"\n          onClick={it.onClick}\n          title={it.title || it.label}\n          className={`group flex items-center gap-3 p-3 rounded-xl bg-white border border-gray-200 hover:border-blue-300 hover:shadow-sm transition-all text-left min-h-[44px] focus:outline-none focus:ring-2 focus:ring-blue-500`}\n          aria-label={it.title || it.label}\n        >\n          <span\n            className={`inline-flex items-center justify-center w-10 h-10 rounded-lg border ${it.accentClass || 'bg-blue-50 border-blue-100 text-blue-700'}`}\n          >\n            {it.icon}\n          </span>\n          <span className=\"text-sm font-medium text-gray-800 group-hover:text-blue-700\">{it.label}</span>\n        </button>\n      ))}\n    </div>\n  )\n})\n\nexport default QuickActions\n",
      "lines": 60,
      "size": 2003,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3338224+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/types/models.ts": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [],
        "interfaces": [
          "export interface Material {",
          "export interface TechCardItem {",
          "export interface Product {",
          "export interface PriceType {",
          "export interface FinishType {",
          "export interface PriceSettings {"
        ],
        "hasJSX": false,
        "stats": {
          "componentsCount": 0,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 6,
          "exportsCount": 6,
          "importsCount": 0,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface Material {",
          "export interface TechCardItem {",
          "export interface Product {",
          "export interface PriceType {",
          "export interface FinishType {",
          "export interface PriceSettings {"
        ],
        "hooks": []
      },
      "content": "/**\n * Модели домена WASSER PRO\n * Общие интерфейсы для материалов, изделий, техкарт и настроек цен\n */\n\nexport interface Material {\n  /** Уникальный идентификатор */\n  id: string\n  /** Название материала */\n  name: string\n  /** Артикул */\n  article: string\n  /** Единица измерения */\n  unit: string\n  /** Цена за единицу */\n  price: number\n  /** Дата создания */\n  created_at: string\n  /** Дата обновления */\n  updated_at: string\n}\n\nexport interface TechCardItem {\n  /** ID материала */\n  materialId: string\n  /** Количество материала */\n  quantity: number\n  /** Локальный ID строки техкарты (для UI) */\n  _techCardId?: string\n}\n\nexport interface Product {\n  /** Уникальный идентификатор */\n  id: string\n  /** Название изделия */\n  name: string\n  /** Артикул */\n  article: string\n  /** Технологическая карта (состав материалов) */\n  tech_card: TechCardItem[]\n  /** Коллекция (опционально) */\n  collection_id?: string | null\n  /** Тип изделия (ID) */\n  product_type_id?: string | null\n  /** Тип отделки (ID) */\n  finish_type_id?: string | null\n  /** URL изображения */\n  image_url?: string | null\n  /** Дата создания */\n  created_at: string\n  /** Дата обновления */\n  updated_at: string\n}\n\nexport interface PriceType {\n  /** ID типа изделия */\n  id: string\n  /** Имя типа изделия */\n  name: string\n  /** Наценка, % */\n  markup: number\n  /** Стоимость работ */\n  workCost: number\n}\n\nexport interface FinishType {\n  /** ID типа отделки */\n  id: string\n  /** Имя типа отделки */\n  name: string\n  /** Наценка, % */\n  markup: number\n  /** Стоимость работ (необязательно) */\n  workCost?: number\n}\n\nexport interface PriceSettings {\n  /** Типы изделий */\n  productTypes: PriceType[]\n  /** Типы отделки */\n  finishTypes: FinishType[]\n}\n",
      "lines": 83,
      "size": 2234,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.4401525+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/toast.tsx": {
      "analysis": {
        "types": [
          "type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>",
          "type ToastActionElement = React.ReactElement<typeof ToastAction>",
          "type ToastProps,",
          "type ToastActionElement,"
        ],
        "classes": [],
        "components": [
          "const ToastProvider = ToastPrimitives.Provider",
          "const ToastViewport = React.forwardRef<",
          "const toastVariants = cva(",
          "const Toast = React.forwardRef<",
          "const ToastAction = React.forwardRef<",
          "const ToastClose = React.forwardRef<",
          "const ToastTitle = React.forwardRef<",
          "const ToastDescription = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 8,
          "typesCount": 4,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 5,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as ToastPrimitives from \"@radix-ui/react-toast\"",
          "import { cva, type VariantProps } from \"class-variance-authority\"",
          "import { X } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export {"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold [&+div]:text-xs\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
      "lines": 130,
      "size": 4832,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2957607+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/layouts/AppShell.tsx": {
      "analysis": {
        "types": [
          "type SupaStatus = 'idle' | 'checking' | 'ok' | 'error'"
        ],
        "classes": [],
        "components": [
          "function getTitleKeyByPath(pathname: string, items: NavItem[]): string {",
          "const item = items.find((n) => n.to === pathname)",
          "function labelFallback(i18nKey: string, lang: string): string {",
          "const L = (r: string, e: string, k: string) => (lang.startsWith('en') ? e : lang.startsWith('ky') ? k : r)",
          "function SidebarLink({",
          "const label = t(i18nKey, { defaultValue: labelFallback(i18nKey, i18n.language || 'ru') })",
          "function localeForLang(lang: string): string {",
          "const AppShell = memo(function AppShell(): React.ReactElement {",
          "const closeSidebar = () => setSidebarOpen(false)",
          "const openSidebar = () => setSidebarOpen(true)",
          "const tmr = setTimeout(() => setBooting(false), 450)",
          "const recomputeDevVisible = useCallback(() => {",
          "const lsFlag = localStorage.getItem('wasser_devtools') === '1'",
          "const supaOn = isSupabaseEnabled()",
          "const checkSupa = useCallback(async () => {",
          "const enabled = isSupabaseEnabled()",
          "const ok = await testSupabaseConnection('materials')",
          "const onStorage = (e: StorageEvent) => {",
          "const items = [...BASE_NAV_ITEMS]",
          "const activePath = pathname",
          "const titleKey = useMemo(() => getTitleKeyByPath(activePath, navItems), [activePath, navItems])",
          "const nowString = useMemo(() => {",
          "const loc = localeForLang(i18n.language || 'ru')",
          "const supaStatusLabel = (enabled: boolean, status: SupaStatus, lang: string): string => {",
          "const L = (r: string, e: string, k: string) => (lang.startsWith('en') ? e : lang.startsWith('ky') ? k : r)",
          "const renderSupaPill = () => {",
          "const colorDot =",
          "const label = supaStatusLabel(supa.enabled, supa.status, i18n.language || 'ru')",
          "const title = `Supabase: ${label}`"
        ],
        "interfaces": [
          "interface NavItem {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 29,
          "typesCount": 1,
          "hooksCount": 18,
          "interfacesCount": 1,
          "exportsCount": 1,
          "importsCount": 12,
          "classesCount": 0,
          "functionsCount": 10
        },
        "imports": [
          "import React, { memo, useMemo, useState, useEffect, useCallback } from 'react'",
          "import { Link, Outlet, useLocation } from 'react-router'",
          "import {",
          "import ToasterProvider from '../components/common/ToasterProvider'",
          "import LoadingOverlay from '../components/common/LoadingOverlay'",
          "import ErrorBoundary from '../components/common/ErrorBoundary'",
          "import ThemeToggle, { applyStoredTheme } from '../components/common/ThemeToggle'",
          "import LanguageSwitcher from '../components/common/LanguageSwitcher'",
          "import AccentThemeSwitcher from '../components/common/AccentThemeSwitcher'",
          "import { useTranslation } from 'react-i18next'",
          "import { isSupabaseEnabled, testSupabaseConnection } from '../services/supabase'",
          "import { readAccent, applyAccent } from '../themeAccent'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function getTitleKeyByPath(pathname: string, items: NavItem[]): string {",
          "function labelFallback(i18nKey: string, lang: string): string {",
          "const L = (r: string, e: string, k: string) => (lang.startsWith('en') ? e : lang.startsWith('ky') ? k : r)",
          "function SidebarLink({",
          "function localeForLang(lang: string): string {",
          "const closeSidebar = () => setSidebarOpen(false)",
          "const openSidebar = () => setSidebarOpen(true)",
          "const onStorage = (e: StorageEvent) => {",
          "const L = (r: string, e: string, k: string) => (lang.startsWith('en') ? e : lang.startsWith('ky') ? k : r)",
          "const renderSupaPill = () => {"
        ],
        "exports": [
          "export default AppShell"
        ],
        "hooks": [
          "import React, { memo, useMemo, useState, useEffect, useCallback } from 'react'",
          "import { Link, Outlet, useLocation } from 'react-router'",
          "import { useTranslation } from 'react-i18next'",
          "const { t, i18n } = useTranslation()",
          "const { pathname } = useLocation()",
          "const { i18n, t } = useTranslation()",
          "useEffect(() => {",
          "const [sidebarOpen, setSidebarOpen] = useState<boolean>(false)",
          "const [booting, setBooting] = useState<boolean>(true)",
          "useEffect(() => {",
          "const [devVisible, setDevVisible] = useState<boolean>(false)",
          "const recomputeDevVisible = useCallback(() => {",
          "const [supa, setSupa] = useState<{ enabled: boolean; status: SupaStatus }>({ enabled: false, status: 'idle' })",
          "const checkSupa = useCallback(async () => {",
          "useEffect(() => {",
          "const navItems: NavItem[] = useMemo(() => {",
          "const titleKey = useMemo(() => getTitleKeyByPath(activePath, navItems), [activePath, navItems])",
          "const nowString = useMemo(() => {"
        ]
      },
      "content": "/**\n * AppShell — общий каркас интерфейса WASSER PRO\n * Добавлено:\n * - Поддержка акцентных тем (accent-blue/night/emerald/violet) через CSS-переменные\n * - Переключатель AccentThemeSwitcher в шапке\n * - Применение акцентных переменных в фоне приложения, активных пунктах меню и логотип‑бейдже\n */\n\nimport React, { memo, useMemo, useState, useEffect, useCallback } from 'react'\nimport { Link, Outlet, useLocation } from 'react-router'\nimport {\n  Droplets,\n  Home as HomeIcon,\n  Grid2X2,\n  Package,\n  Layers,\n  FileSpreadsheet,\n  Settings,\n  BookOpenCheck,\n  Menu,\n  X,\n  SatelliteDish,\n} from 'lucide-react'\nimport ToasterProvider from '../components/common/ToasterProvider'\nimport LoadingOverlay from '../components/common/LoadingOverlay'\nimport ErrorBoundary from '../components/common/ErrorBoundary'\nimport ThemeToggle, { applyStoredTheme } from '../components/common/ThemeToggle'\nimport LanguageSwitcher from '../components/common/LanguageSwitcher'\nimport AccentThemeSwitcher from '../components/common/AccentThemeSwitcher'\nimport { useTranslation } from 'react-i18next'\nimport { isSupabaseEnabled, testSupabaseConnection } from '../services/supabase'\nimport { readAccent, applyAccent } from '../themeAccent'\n\n/**\n * NavItem — пункт боковой навигации (с i18n-ключом)\n */\ninterface NavItem {\n  /** Путь маршрута */\n  to: string\n  /** Ключ перевода для подписи */\n  i18nKey: string\n  /** Иконка */\n  icon: React.ComponentType<{ size?: number; className?: string }>\n}\n\n/**\n * Базовый список пунктов навигации (без Dev)\n */\nconst BASE_NAV_ITEMS: NavItem[] = [\n  { to: '/', i18nKey: 'nav.home', icon: HomeIcon },\n  { to: '/collections', i18nKey: 'nav.collections', icon: Grid2X2 },\n  { to: '/products', i18nKey: 'nav.products', icon: Package },\n  { to: '/materials', i18nKey: 'nav.materials', icon: Layers },\n  { to: '/pricelist', i18nKey: 'nav.pricelist', icon: FileSpreadsheet },\n  { to: '/settings', i18nKey: 'nav.settings', icon: Settings },\n  { to: '/journal', i18nKey: 'nav.journal', icon: BookOpenCheck },\n]\n\n/**\n * Получить i18n-ключ заголовка страницы по пути\n */\nfunction getTitleKeyByPath(pathname: string, items: NavItem[]): string {\n  const item = items.find((n) => n.to === pathname)\n  return item?.i18nKey || 'nav.home'\n}\n\n/**\n * Локальный fallback для подписи i18n-ключей.\n * Расширено: все nav.* с поддержкой RU/EN/KY, чтобы исключить показ \"nav.xxx\".\n */\nfunction labelFallback(i18nKey: string, lang: string): string {\n  const L = (r: string, e: string, k: string) => (lang.startsWith('en') ? e : lang.startsWith('ky') ? k : r)\n\n  switch (i18nKey) {\n    case 'nav.home':\n      return L('Главная', 'Home', 'Башкы бет')\n    case 'nav.collections':\n      return L('Коллекции', 'Collections', 'Жыйнактар')\n    case 'nav.products':\n      return L('Изделия', 'Products', 'Буюмдар')\n    case 'nav.materials':\n      return L('Материалы', 'Materials', 'Материалдар')\n    case 'nav.pricelist':\n      return L('Прайс‑лист', 'Price list', 'Баалар тизмеси')\n    case 'nav.settings':\n      return L('Настройки', 'Settings', 'Баптоолор')\n    case 'nav.journal':\n      return L('Журнал', 'Journal', 'Журнал')\n    case 'nav.dev':\n      return L('Отладка (Supabase)', 'Dev (Supabase)', 'Иштетки (Supabase)')\n    default:\n      return i18nKey\n  }\n}\n\n/**\n * SidebarLink — пункт меню сайдбара\n */\nfunction SidebarLink({\n  to,\n  i18nKey,\n  icon: Icon,\n  active,\n  onClick,\n}: NavItem & { active: boolean; onClick?: () => void }) {\n  const { t, i18n } = useTranslation()\n  /** Подпись с дефолтным значением на случай отсутствия ключа в ресурсах */\n  const label = t(i18nKey, { defaultValue: labelFallback(i18nKey, i18n.language || 'ru') })\n  return (\n    <Link\n      to={to}\n      onClick={onClick}\n      className={`group flex items-center gap-3 px-4 py-2.5 rounded-lg transition-all ${\n        active ? 'font-medium shadow-sm' : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n      }`}\n      aria-current={active ? 'page' : undefined}\n      title={label}\n      style={\n        active\n          ? {\n              backgroundColor: 'var(--accent-50)',\n              color: 'var(--accent-700)',\n            }\n          : undefined\n      }\n    >\n      <Icon\n        size={18}\n        className={active ? '' : 'text-gray-400 group-hover:text-gray-600'}\n        style={active ? { color: 'var(--accent-600)' } : undefined}\n      />\n      <span className=\"truncate\">{label}</span>\n    </Link>\n  )\n}\n\n/**\n * Соответствие языку — локали форматирования даты\n */\nfunction localeForLang(lang: string): string {\n  if (lang.startsWith('ky')) return 'ky-KG'\n  if (lang.startsWith('en')) return 'en-US'\n  return 'ru-RU'\n}\n\n/** Состояние статуса Supabase */\ntype SupaStatus = 'idle' | 'checking' | 'ok' | 'error'\n\n/**\n * AppShell — каркас с сайдбаром и шапкой (поддержка темы и i18n)\n */\nconst AppShell = memo(function AppShell(): React.ReactElement {\n  const { pathname } = useLocation()\n  const { i18n, t } = useTranslation()\n\n  /** Применяем сохранённую тему и акцент сразу при монтировании */\n  useEffect(() => {\n    applyStoredTheme()\n    try {\n      applyAccent(readAccent())\n    } catch {}\n  }, [])\n\n  /** Управление мобильным сайдбаром */\n  const [sidebarOpen, setSidebarOpen] = useState<boolean>(false)\n  const closeSidebar = () => setSidebarOpen(false)\n  const openSidebar = () => setSidebarOpen(true)\n\n  /** Стартовый лоадер (кратковременно) */\n  const [booting, setBooting] = useState<boolean>(true)\n  useEffect(() => {\n    const tmr = setTimeout(() => setBooting(false), 450)\n    return () => clearTimeout(tmr)\n  }, [])\n\n  /** Видимость Dev-пункта: по флагу LS или если Supabase включён */\n  const [devVisible, setDevVisible] = useState<boolean>(false)\n\n  /**\n   * Пересчёт видимости Dev-пункта\n   * - Читает флаг wasser_devtools\n   * - Учитывает факт включённой конфигурации Supabase\n   */\n  const recomputeDevVisible = useCallback(() => {\n    try {\n      const lsFlag = localStorage.getItem('wasser_devtools') === '1'\n      const supaOn = isSupabaseEnabled()\n      setDevVisible(Boolean(lsFlag || supaOn))\n    } catch {\n      setDevVisible(false)\n    }\n  }, [])\n\n  /** Состояние статуса Supabase для индикатора в шапке */\n  const [supa, setSupa] = useState<{ enabled: boolean; status: SupaStatus }>({ enabled: false, status: 'idle' })\n\n  /**\n   * Проверка статуса Supabase\n   * - Если конфигурация отключена, ставим status=idle\n   * - Если включена, выполняем быстрый head-select и показываем ok/error\n   */\n  const checkSupa = useCallback(async () => {\n    const enabled = isSupabaseEnabled()\n    if (!enabled) {\n      setSupa({ enabled: false, status: 'idle' })\n      return\n    }\n    setSupa({ enabled: true, status: 'checking' })\n    try {\n      const ok = await testSupabaseConnection('materials')\n      setSupa({ enabled: true, status: ok ? 'ok' : 'error' })\n    } catch {\n      setSupa({ enabled: true, status: 'error' })\n    }\n  }, [])\n\n  useEffect(() => {\n    // Первый расчёт и первая проверка статуса\n    recomputeDevVisible()\n    checkSupa()\n\n    // Реакция на смену вкладки/окна (если флаг/конфигурация меняется в другой вкладке)\n    const onStorage = (e: StorageEvent) => {\n      if (e.key === 'wasser_devtools' || e.key === 'wasser_supabase_cfg') {\n        recomputeDevVisible()\n        checkSupa()\n      }\n    }\n    window.addEventListener('storage', onStorage)\n    return () => window.removeEventListener('storage', onStorage)\n  }, [recomputeDevVisible, checkSupa])\n\n  /** Итоговый список пунктов навигации с учётом Dev */\n  const navItems: NavItem[] = useMemo(() => {\n    const items = [...BASE_NAV_ITEMS]\n    if (devVisible) {\n      items.push({ to: '/dev', i18nKey: 'nav.dev', icon: SatelliteDish })\n    }\n    return items\n  }, [devVisible])\n\n  /** Активный путь для подсветки */\n  const activePath = pathname\n\n  /** Ключ заголовка страницы */\n  const titleKey = useMemo(() => getTitleKeyByPath(activePath, navItems), [activePath, navItems])\n\n  /** Форматирование текущей даты/времени с учётом языка */\n  const nowString = useMemo(() => {\n    try {\n      const loc = localeForLang(i18n.language || 'ru')\n      return new Date().toLocaleString(loc, { dateStyle: 'medium', timeStyle: 'short' })\n    } catch {\n      return new Date().toLocaleString()\n    }\n  }, [i18n.language])\n\n  /**\n   * Локализованная подпись статуса Supabase для бейджа\n   */\n  const supaStatusLabel = (enabled: boolean, status: SupaStatus, lang: string): string => {\n    const L = (r: string, e: string, k: string) => (lang.startsWith('en') ? e : lang.startsWith('ky') ? k : r)\n    if (!enabled) return L('Выключено', 'Disabled', 'Өчүрүлгөн')\n    if (status === 'checking') return L('Проверка', 'Checking', 'Текшерүү')\n    if (status === 'ok') return L('Онлайн', 'Online', 'Онлайн')\n    return L('Офлайн', 'Offline', 'Оффлайн')\n  }\n\n  /**\n   * Вспомогательный рендер: маленький бейдж статуса Supabase в шапке (с локализацией)\n   */\n  const renderSupaPill = () => {\n    const colorDot =\n      supa.enabled\n        ? supa.status === 'ok'\n          ? 'bg-emerald-500'\n          : supa.status === 'checking'\n            ? 'bg-blue-500 animate-pulse'\n            : 'bg-rose-500'\n        : 'bg-gray-400'\n\n    const label = supaStatusLabel(supa.enabled, supa.status, i18n.language || 'ru')\n    const title = `Supabase: ${label}`\n\n    return (\n      <Link\n        to=\"/dev\"\n        className=\"inline-flex items-center gap-2 px-2.5 py-1 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-700\"\n        title={title}\n        aria-label={title}\n      >\n        <span className={`w-2 h-2 rounded-full ${colorDot}`} />\n        <SatelliteDish size={16} className=\"text-gray-600\" />\n        <span className=\"text-xs font-medium\">Supabase</span>\n      </Link>\n    )\n  }\n\n  return (\n    <div\n      className=\"min-h-screen\"\n      style={{\n        // Фон берём из CSS-переменных темы с фолбэком на прежний\n        backgroundImage: 'linear-gradient(135deg, var(--bg-from, #f9fafb), var(--bg-to, #eff6ff))',\n      }}\n    >\n      {/* Глобальный Toaster для уведомлений */}\n      <ToasterProvider />\n\n      {/* Стартовый оверлей загрузки */}\n      <LoadingOverlay show={booting} />\n\n      {/* Верхняя шапка */}\n      <header className=\"sticky top-0 z-30 backdrop-blur-md bg-white/80 border-b border-gray-200/70\">\n        <div className=\"px-4 sm:px-6 py-3 flex items-center justify-between gap-3\">\n          <div className=\"flex items-center gap-3\">\n            {/* Кнопка гамбургера для мобильного */}\n            <button\n              className=\"md:hidden inline-flex items-center justify-center w-10 h-10 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-700\"\n              onClick={openSidebar}\n              aria-label=\"Открыть меню\"\n              title=\"Меню\"\n            >\n              <Menu size={18} />\n            </button>\n            <h1 className=\"text-lg sm:text-xl font-bold text-gray-900\">\n              {t(titleKey, { defaultValue: labelFallback(titleKey, i18n.language || 'ru') })}\n            </h1>\n          </div>\n\n          {/* Правый блок: статус Supabase + дата + язык + тема + акцент */}\n          <div className=\"flex items-center gap-2\">\n            {/* Индикатор Supabase */}\n            {renderSupaPill()}\n            {/* Текущая дата/время */}\n            <div className=\"hidden sm:block text-xs sm:text-sm text-gray-500\">{nowString}</div>\n            <LanguageSwitcher />\n            <ThemeToggle />\n            {/* Новый переключатель акцентной темы */}\n            <AccentThemeSwitcher />\n          </div>\n        </div>\n      </header>\n\n      {/* Контейнер со столбцами: сайдбар + контент */}\n      <div className=\"relative mx-auto\">\n        {/* Сайдбар: desktop */}\n        <aside className=\"hidden md:flex fixed md:static top-0 left-0 h-full md:h-auto md:w-72 w-72 flex-col bg-white/90 backdrop-blur-lg border-r border-gray-200/70\">\n          <div className=\"px-5 py-5 border-b border-gray-200/70\">\n            <div className=\"flex items-center gap-3\">\n              <div\n                className=\"w-10 h-10 rounded-xl text-white flex items-center justify-center shadow-md\"\n                style={{ backgroundColor: 'var(--accent-600)' }}\n                title=\"WASSER PRO\"\n              >\n                <Droplets size={20} />\n              </div>\n              <div>\n                <div className=\"text-base font-extrabold text-gray-900 tracking-tight\">WASSER PRO</div>\n                <div className=\"text-xs text-gray-500\">Управление витриной и прайсом</div>\n              </div>\n            </div>\n          </div>\n          <nav className=\"flex-1 px-3 py-4 space-y-1 overflow-y-auto\">\n            {navItems.map((item) => (\n              <SidebarLink\n                key={item.to}\n                to={item.to}\n                i18nKey={item.i18nKey}\n                icon={item.icon}\n                active={activePath === item.to}\n              />\n            ))}\n          </nav>\n          <div className=\"px-5 py-4 border-t border-gray-200/70 text-center text-xs text-gray-500\">© {new Date().getFullYear()} WASSER PRO</div>\n        </aside>\n\n        {/* Сайдбар: mobile drawer */}\n        {sidebarOpen && (\n          <>\n            <div className=\"fixed inset-0 bg-black/40 backdrop-blur-[2px] z-40 md:hidden\" onClick={closeSidebar} aria-hidden=\"true\" />\n            <div className=\"fixed z-50 inset-y-0 left-0 w-72 bg-white/95 backdrop-blur-md border-r border-gray-200 shadow-xl md:hidden flex flex-col\">\n              <div className=\"px-4 py-4 border-b border-gray-200 flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div\n                    className=\"w-9 h-9 rounded-lg text-white flex items-center justify-center\"\n                    style={{ backgroundColor: 'var(--accent-600)' }}\n                  >\n                    <Droplets size={18} />\n                  </div>\n                  <div className=\"text-sm font-bold text-gray-900\">WASSER PRO</div>\n                </div>\n                <button\n                  className=\"inline-flex items-center justify-center w-9 h-9 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-700\"\n                  onClick={closeSidebar}\n                  aria-label=\"Закрыть меню\"\n                >\n                  <X size={16} />\n                </button>\n              </div>\n              <nav className=\"flex-1 px-3 py-4 space-y-1 overflow-y-auto\">\n                {navItems.map((item) => (\n                  <SidebarLink\n                    key={item.to}\n                    to={item.to}\n                    i18nKey={item.i18nKey}\n                    icon={item.icon}\n                    active={activePath === item.to}\n                    onClick={closeSidebar}\n                  />\n                ))}\n              </nav>\n              <div className=\"px-5 py-4 border-t border-gray-200 text-center text-xs text-gray-500\">© {new Date().getFullYear()}</div>\n            </div>\n          </>\n        )}\n\n        {/* Контент (с отступом слева под сайдбар) */}\n        <main className=\"md:ml-72\">\n          <div className=\"p-4 sm:p-6\">\n            <div className=\"max-w-6xl mx-auto\">\n              {/* Контентная область страниц */}\n              <ErrorBoundary title=\"Ошибка на странице\" message=\"Попробуйте обновить или вернуться позже.\">\n                <Outlet />\n              </ErrorBoundary>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  )\n})\n\nexport default AppShell\n",
      "lines": 435,
      "size": 17213,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.4451498+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/separator.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Separator = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as SeparatorPrimitive from \"@radix-ui/react-separator\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Separator }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
      "lines": 32,
      "size": 770,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2745972+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/accordion.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Accordion = AccordionPrimitive.Root",
          "const AccordionItem = React.forwardRef<",
          "const AccordionTrigger = React.forwardRef<",
          "const AccordionContent = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 4,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as AccordionPrimitive from \"@radix-ui/react-accordion\"",
          "import { ChevronDown } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "lines": 58,
      "size": 2015,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2103685+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/toaster.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export function Toaster() {"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 2,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import { useToast } from \"@/hooks/use-toast\"",
          "import {"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export function Toaster() {"
        ],
        "hooks": [
          "import { useToast } from \"@/hooks/use-toast\"",
          "const { toasts } = useToast()"
        ]
      },
      "content": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
      "lines": 36,
      "size": 786,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2977752+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/avatar.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Avatar = React.forwardRef<",
          "const AvatarImage = React.forwardRef<",
          "const AvatarFallback = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 3,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as AvatarPrimitive from \"@radix-ui/react-avatar\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Avatar, AvatarImage, AvatarFallback }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "lines": 51,
      "size": 1419,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2178989+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/pagination.tsx": {
      "analysis": {
        "types": [
          "type PaginationLinkProps = {"
        ],
        "classes": [],
        "components": [
          "const Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (",
          "const PaginationContent = React.forwardRef<",
          "const PaginationItem = React.forwardRef<",
          "const PaginationLink = ({",
          "const PaginationPrevious = ({",
          "const PaginationNext = ({",
          "const PaginationEllipsis = ({"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 7,
          "typesCount": 1,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [
          "import * as React from \"react\"",
          "import { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\"",
          "import { ButtonProps, buttonVariants } from \"@/components/ui/button\""
        ],
        "hasTypeScript": true,
        "functions": [
          "const Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => ("
        ],
        "exports": [
          "export {"
        ],
        "hooks": []
      },
      "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n",
      "lines": 118,
      "size": 2751,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2605614+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/pages/Products.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const LS_KEYS = {",
          "function readLS<T>(key: string, fallback: T): T {",
          "const raw = localStorage.getItem(key)",
          "const data = raw ? (JSON.parse(raw) as T) : fallback",
          "function writeLS<T>(key: string, value: T) {",
          "function rid(): string {",
          "function seedMaterials(): Material[] {",
          "const now = new Date().toISOString()",
          "function seedPrice(): PriceSettings {",
          "function calcPrice(product: Product, materials: Material[], settings: PriceSettings) {",
          "const matMap = new Map(materials.map((m) => [m.id, m]))",
          "const materialCost = (product.tech_card || []).reduce((sum, it) => {",
          "const m = matMap.get(it.materialId)",
          "const pt = settings.productTypes.find((t) => t.id === product.product_type_id)",
          "const workCost = pt?.workCost || 0",
          "const base = materialCost + workCost",
          "const afterType = base * (1 + (pt?.markup || 0) / 100)",
          "const ft = settings.finishTypes.find((t) => t.id === product.finish_type_id)",
          "const final = afterType * (1 + (ft?.markup || 0) / 100)",
          "export default function ProductsPage(): React.ReactElement {",
          "const view = useMemo(() => {",
          "const t = search.trim().toLowerCase()",
          "const createProduct = useCallback(() => {",
          "const now = new Date().toISOString()",
          "const saveProduct = useCallback(",
          "const deleteProduct = useCallback(",
          "const p = products.find((x) => x.id === id)",
          "const updateTechCard = useCallback(",
          "const applyInfo = useCallback(",
          "const form = new FormData(e.currentTarget)",
          "const name = String(form.get('name') || '').trim()",
          "const article = String(form.get('article') || '').trim()",
          "const pt = String(form.get('product_type_id') || '')",
          "const ft = String(form.get('finish_type_id') || '')",
          "const pr = calcPrice(p, materials, price)"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 35,
          "typesCount": 0,
          "hooksCount": 16,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 8,
          "classesCount": 0,
          "functionsCount": 7
        },
        "imports": [
          "import React, { useCallback, useEffect, useMemo, useState } from 'react'",
          "import Card from '../components/common/Card'",
          "import Button from '../components/common/Button'",
          "import Modal from '../components/common/Modal'",
          "import TechCardManager from '../components/techcard/TechCardManager'",
          "import PriceMulti from '../components/common/PriceMulti'",
          "import { toast } from 'sonner'",
          "import type { Material, PriceSettings, Product, TechCardItem } from '../types/models'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function readLS<T>(key: string, fallback: T): T {",
          "function writeLS<T>(key: string, value: T) {",
          "function rid(): string {",
          "function seedMaterials(): Material[] {",
          "function seedPrice(): PriceSettings {",
          "function calcPrice(product: Product, materials: Material[], settings: PriceSettings) {",
          "const materialCost = (product.tech_card || []).reduce((sum, it) => {"
        ],
        "exports": [
          "export default function ProductsPage(): React.ReactElement {"
        ],
        "hooks": [
          "import React, { useCallback, useEffect, useMemo, useState } from 'react'",
          "const [materials, setMaterials] = useState<Material[]>(() => readLS(LS_KEYS.materials, seedMaterials()))",
          "const [products, setProducts] = useState<Product[]>(() => readLS(LS_KEYS.products, [] as Product[]))",
          "const [price, setPrice] = useState<PriceSettings>(() => readLS(LS_KEYS.price, seedPrice()))",
          "useEffect(() => writeLS(LS_KEYS.materials, materials), [materials])",
          "useEffect(() => writeLS(LS_KEYS.products, products), [products])",
          "useEffect(() => writeLS(LS_KEYS.price, price), [price])",
          "const [search, setSearch] = useState('')",
          "const [editing, setEditing] = useState<Product | null>(null)",
          "const [tab, setTab] = useState<'info' | 'tc'>('info')",
          "const view = useMemo(() => {",
          "const createProduct = useCallback(() => {",
          "const saveProduct = useCallback(",
          "const deleteProduct = useCallback(",
          "const updateTechCard = useCallback(",
          "const applyInfo = useCallback("
        ]
      },
      "content": "/**\n * Страница \"Изделия\"\n * Функционал: список изделий, создание/редактирование, вкладка \"Технологическая карта\" (ТД) с импортом Excel\n * Обновлено:\n * - Валюта: базовая KGS (сом)\n * - Мультивалютный вывод через PriceMulti\n * - Тосты для сохранений и действий с ТД\n */\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport Card from '../components/common/Card'\nimport Button from '../components/common/Button'\nimport Modal from '../components/common/Modal'\nimport TechCardManager from '../components/techcard/TechCardManager'\nimport PriceMulti from '../components/common/PriceMulti'\nimport { toast } from 'sonner'\nimport type { Material, PriceSettings, Product, TechCardItem } from '../types/models'\n\n/**\n * Ключи localStorage для демо-режима\n */\nconst LS_KEYS = {\n  products: 'wasser_products_data',\n  materials: 'wasser_materials_data',\n  price: 'wasser_price_settings_data',\n}\n\n/**\n * Утилита: безопасно читать JSON из LS\n */\nfunction readLS<T>(key: string, fallback: T): T {\n  try {\n    const raw = localStorage.getItem(key)\n    const data = raw ? (JSON.parse(raw) as T) : fallback\n    return data\n  } catch {\n    return fallback\n  }\n}\n\n/**\n * Утилита: запись в LS\n */\nfunction writeLS<T>(key: string, value: T) {\n  try {\n    localStorage.setItem(key, JSON.stringify(value))\n  } catch {\n    /* noop */\n  }\n}\n\n/**\n * Генерация ID\n */\nfunction rid(): string {\n  return Date.now().toString(36) + Math.random().toString(36).slice(2, 8)\n}\n\n/**\n * Значения по умолчанию (материалы)\n */\nfunction seedMaterials(): Material[] {\n  const now = new Date().toISOString()\n  return [\n    { id: rid(), name: 'ЛДСП 18мм Белый', article: 'LDSP-18-W', unit: 'м2', price: 850, created_at: now, updated_at: now },\n    { id: rid(), name: 'Кромка ПВХ 2мм', article: 'EDGE-2-PVC', unit: 'пог.м', price: 35, created_at: now, updated_at: now },\n    { id: rid(), name: 'Петля clip-on', article: 'HINGE-CLIP', unit: 'шт', price: 120, created_at: now, updated_at: now },\n  ]\n}\n\n/**\n * Значения по умолчанию (настройки цен)\n */\nfunction seedPrice(): PriceSettings {\n  return {\n    productTypes: [\n      { id: 'pt1', name: 'Тумба с дверями', markup: 10, workCost: 1000 },\n      { id: 'pt2', name: 'Тумба с ящиками', markup: 15, workCost: 1500 },\n      { id: 'pt3', name: 'Пенал', markup: 20, workCost: 2000 },\n    ],\n    finishTypes: [\n      { id: 'ft1', name: 'Крашеный', markup: 50 },\n      { id: 'ft2', name: 'Пленочный', markup: 30 },\n    ],\n  }\n}\n\n/**\n * Расчет цены изделия по техкарте и настройкам\n */\nfunction calcPrice(product: Product, materials: Material[], settings: PriceSettings) {\n  const matMap = new Map(materials.map((m) => [m.id, m]))\n  const materialCost = (product.tech_card || []).reduce((sum, it) => {\n    const m = matMap.get(it.materialId)\n    return sum + (Number(it.quantity) || 0) * (m?.price || 0)\n  }, 0)\n  const pt = settings.productTypes.find((t) => t.id === product.product_type_id)\n  const workCost = pt?.workCost || 0\n  const base = materialCost + workCost\n  const afterType = base * (1 + (pt?.markup || 0) / 100)\n  const ft = settings.finishTypes.find((t) => t.id === product.finish_type_id)\n  const final = afterType * (1 + (ft?.markup || 0) / 100)\n  return { materialCost, workCost, basePrice: base, finalPrice: final }\n}\n\n/**\n * Компонент страницы \"Изделия\"\n */\nexport default function ProductsPage(): React.ReactElement {\n  // Данные\n  const [materials, setMaterials] = useState<Material[]>(() => readLS(LS_KEYS.materials, seedMaterials()))\n  const [products, setProducts] = useState<Product[]>(() => readLS(LS_KEYS.products, [] as Product[]))\n  const [price, setPrice] = useState<PriceSettings>(() => readLS(LS_KEYS.price, seedPrice()))\n\n  useEffect(() => writeLS(LS_KEYS.materials, materials), [materials])\n  useEffect(() => writeLS(LS_KEYS.products, products), [products])\n  useEffect(() => writeLS(LS_KEYS.price, price), [price])\n\n  // Состояния UI\n  const [search, setSearch] = useState('')\n  const [editing, setEditing] = useState<Product | null>(null)\n  const [tab, setTab] = useState<'info' | 'tc'>('info')\n\n  // Фильтрация\n  const view = useMemo(() => {\n    const t = search.trim().toLowerCase()\n    if (!t) return products\n    return products.filter((p) => p.name.toLowerCase().includes(t) || p.article.toLowerCase().includes(t))\n  }, [products, search])\n\n  /**\n   * Создать изделие\n   */\n  const createProduct = useCallback(() => {\n    const now = new Date().toISOString()\n    const p: Product = {\n      id: rid(),\n      name: 'Новое изделие',\n      article: `PROD-${Math.random().toString(36).slice(2, 7).toUpperCase()}`,\n      tech_card: [],\n      product_type_id: '',\n      finish_type_id: '',\n      image_url: '',\n      created_at: now,\n      updated_at: now,\n    }\n    setProducts((prev) => [p, ...prev])\n    setEditing(p)\n    setTab('info')\n    // Тост при создании черновика\n    toast.info('Создано новое изделие')\n  }, [])\n\n  /**\n   * Сохранить изделие\n   */\n  const saveProduct = useCallback(\n    (patch: Partial<Product>) => {\n      if (!editing) return\n      const next: Product = { ...editing, ...patch, updated_at: new Date().toISOString() }\n      setProducts((prev) => prev.map((x) => (x.id === next.id ? next : x)))\n      setEditing(next)\n      toast.success('Изделие сохранено')\n    },\n    [editing],\n  )\n\n  /**\n   * Удалить изделие\n   */\n  const deleteProduct = useCallback(\n    (id: string) => {\n      const p = products.find((x) => x.id === id)\n      if (!p) return\n      if (!confirm(`Удалить изделие \"${p.name}\"?`)) return\n      setProducts((prev) => prev.filter((x) => x.id !== id))\n      if (editing?.id === id) setEditing(null)\n      toast.success('Изделие удалено')\n    },\n    [products, editing],\n  )\n\n  /**\n   * Обновить техкарту у редактируемого изделия\n   */\n  const updateTechCard = useCallback(\n    (tc: TechCardItem[]) => {\n      if (!editing) return\n      setEditing({ ...editing, tech_card: tc })\n    },\n    [editing],\n  )\n\n  /**\n   * Применить изменения из формы \"Инфо\"\n   */\n  const applyInfo = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault()\n      if (!editing) return\n      const form = new FormData(e.currentTarget)\n      const name = String(form.get('name') || '').trim()\n      const article = String(form.get('article') || '').trim()\n      const pt = String(form.get('product_type_id') || '')\n      const ft = String(form.get('finish_type_id') || '')\n      if (!name) {\n        toast.error('Укажите наименование')\n        return\n      }\n      if (!article) {\n        toast.error('Укажите артикул')\n        return\n      }\n      saveProduct({ name, article, product_type_id: pt || null, finish_type_id: ft || null })\n    },\n    [editing, saveProduct],\n  )\n\n  return (\n    <div className=\"max-w-6xl mx-auto px-6 py-8 space-y-6\">\n      <div className=\"flex flex-col md:flex-row md:items-center gap-4 justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Изделия</h1>\n          <p className=\"text-gray-600 mt-1\">Редактируйте карточку изделия и его ТД (техкарту). Импортируйте состав из Excel.</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"bg-transparent\" onClick={createProduct}>\n            Добавить изделие\n          </Button>\n        </div>\n      </div>\n\n      <Card>\n        <div className=\"flex flex-col sm:flex-row gap-3 sm:items-center justify-between\">\n          <div className=\"relative flex-1\">\n            <input\n              type=\"text\"\n              placeholder=\"Поиск по названию или артикулу…\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              className=\"w-full pl-3 pr-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n        </div>\n      </Card>\n\n      {view.length === 0 ? (\n        <Card>\n          <div className=\"text-gray-600\">Изделия не найдены. Создайте первое изделие.</div>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\n          {view.map((p) => {\n            const pr = calcPrice(p, materials, price)\n            return (\n              <Card key={p.id} className=\"space-y-3\">\n                <div>\n                  <div className=\"text-sm text-gray-500 font-mono\">{p.article}</div>\n                  <div className=\"text-base font-semibold text-gray-900\">{p.name}</div>\n                </div>\n                <div className=\"text-sm text-gray-600\">\n                  Материалов в ТД: <span className=\"font-medium text-gray-900\">{p.tech_card?.length || 0}</span>\n                </div>\n\n                {/* Вывод стоимости в базовой валюте (KGS) + дубли в выбранных валютах */}\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-sm\">Себестоимость:</div>\n                    <PriceMulti amountBase={pr.basePrice} />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-sm\">Цена:</div>\n                    <PriceMulti amountBase={pr.finalPrice} />\n                  </div>\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" className=\"bg-transparent\" onClick={() => { setEditing(p); setTab('info') }}>\n                    Редактировать\n                  </Button>\n                  <Button variant=\"danger\" onClick={() => deleteProduct(p.id)}>\n                    Удалить\n                  </Button>\n                </div>\n              </Card>\n            )\n          })}\n        </div>\n      )}\n\n      {/* Модалка редактирования изделия */}\n      <Modal open={!!editing} onClose={() => setEditing(null)} title={editing ? `Редактирование: ${editing.name}` : 'Изделие'}>\n        {!editing ? null : (\n          <div className=\"space-y-6\">\n            {/* Табы */}\n            <div className=\"flex border-b border-gray-200\">\n              <button\n                className={`px-4 py-2 -mb-px border-b-2 ${tab === 'info' ? 'border-blue-600 text-blue-600 font-medium' : 'border-transparent text-gray-600'}`}\n                onClick={() => setTab('info')}\n              >\n                Основная информация\n              </button>\n              <button\n                className={`px-4 py-2 -mb-px border-b-2 ${tab === 'tc' ? 'border-blue-600 text-blue-600 font-medium' : 'border-transparent text-gray-600'}`}\n                onClick={() => setTab('tc')}\n              >\n                Технологическая карта\n              </button>\n            </div>\n\n            {tab === 'info' ? (\n              <form className=\"space-y-4\" onSubmit={applyInfo}>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Артикул</label>\n                    <input\n                      name=\"article\"\n                      type=\"text\"\n                      defaultValue={editing.article}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"PROD-001\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Тип изделия</label>\n                    <select\n                      name=\"product_type_id\"\n                      defaultValue={editing.product_type_id || ''}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"\">— Не выбран —</option>\n                      {price.productTypes.map((t) => (\n                        <option key={t.id} value={t.id}>\n                          {t.name} (+{t.markup}% / {t.workCost} KGS)\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Наименование</label>\n                  <input\n                    name=\"name\"\n                    type=\"text\"\n                    defaultValue={editing.name}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"Тумба 600 Белая\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Тип отделки</label>\n                    <select\n                      name=\"finish_type_id\"\n                      defaultValue={editing.finish_type_id || ''}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"\">— Не выбран —</option>\n                      {price.finishTypes.map((t) => (\n                        <option key={t.id} value={t.id}>\n                          {t.name} (+{t.markup}%)\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">URL изображения (опционально)</label>\n                    <input\n                      name=\"image_url\"\n                      type=\"url\"\n                      defaultValue={editing.image_url || ''}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"https://example.com/photo.jpg\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end gap-2 pt-2\">\n                  <Button variant=\"outline\" className=\"bg-transparent\" onClick={() => setEditing(null)}>\n                    Отмена\n                  </Button>\n                  <Button type=\"submit\">Сохранить</Button>\n                </div>\n              </form>\n            ) : (\n              <div className=\"space-y-4\">\n                <TechCardManager\n                  materials={materials}\n                  value={editing.tech_card || []}\n                  onChange={(tc) => updateTechCard(tc)}\n                />\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"bg-transparent\"\n                    onClick={() => {\n                      if (!editing) return\n                      saveProduct({ tech_card: editing.tech_card })\n                      toast.success('Техкарта сохранена')\n                    }}\n                  >\n                    Сохранить ТД\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </Modal>\n    </div>\n  )\n}\n",
      "lines": 415,
      "size": 16282,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.4065184+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/pages/SupabaseDebug.tsx": {
      "analysis": {
        "types": [
          "type SupabaseConfig,"
        ],
        "classes": [],
        "components": [
          "function Badge({ ok, label }: { ok: boolean; label: string }): React.ReactElement {",
          "function maskKey(k: string): string {",
          "const keep = 4",
          "const hidden = '•'.repeat(k.length - keep)",
          "async function resilientCopy(text: string): Promise<boolean> {",
          "const ta = document.createElement('textarea')",
          "const ok = document.execCommand('copy')",
          "async function fetchArtifactText(): Promise<string> {",
          "const candidates = [",
          "const resp = await fetch(url, { method: 'GET', mode: 'same-origin', credentials: 'same-origin' })",
          "export default function SupabaseDebugPage(): React.ReactElement {",
          "const unsubRef = useRef<() => void>(() => {})",
          "const supaEnabled = useMemo(() => isSupabaseEnabled(), [form])",
          "const cfg = getSupabaseConfig()",
          "const updateField = useCallback(<K extends keyof SupabaseConfig>(k: K, v: SupabaseConfig[K]) => {",
          "const saveConfig = useCallback(() => {",
          "const checkConnection = useCallback(async () => {",
          "const ok = await testSupabaseConnection('materials')",
          "const checkView = useCallback(async () => {",
          "const c = getSupabase()",
          "const ok = !error",
          "const pullMaterials = useCallback(async () => {",
          "const n = await pullMaterialsToLocal()",
          "const pushMaterials = useCallback(async () => {",
          "const list = readLocalMaterials()",
          "const subscribeRealtime = useCallback(() => {",
          "const unsub = subscribeMaterialsChanges(async () => {",
          "const unsubscribeRealtime = useCallback(() => {",
          "const copyArtifact = useCallback(async () => {",
          "const text = await fetchArtifactText()",
          "const copied = await resilientCopy(text)",
          "const blob = new Blob([text], { type: 'text/plain;charset=utf-8' })",
          "const url = URL.createObjectURL(blob)",
          "const a = document.createElement('a')",
          "const toggleDevMenu = useCallback(() => {",
          "const next = !devMenuVisible",
          "const oldValue = localStorage.getItem('wasser_devtools')",
          "const evt = new StorageEvent('storage', {",
          "const copyDevLink = useCallback(async () => {",
          "const url = `${location.origin}${location.pathname}#/dev`",
          "const ok = await resilientCopy(url)",
          "const statusConn = connOk === null ? '—' : connOk ? 'OK' : 'Ошибка'",
          "const statusView = viewOk === null ? '—' : viewOk ? 'OK' : 'Ошибка'"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 43,
          "typesCount": 1,
          "hooksCount": 21,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 5,
          "classesCount": 0,
          "functionsCount": 2
        },
        "imports": [
          "import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'",
          "import {",
          "import { toast } from 'sonner'",
          "import {",
          "import {"
        ],
        "hasTypeScript": true,
        "functions": [
          "function Badge({ ok, label }: { ok: boolean; label: string }): React.ReactElement {",
          "function maskKey(k: string): string {"
        ],
        "exports": [
          "export default function SupabaseDebugPage(): React.ReactElement {"
        ],
        "hooks": [
          "import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'",
          "const [form, setForm] = useState<SupabaseConfig>({ url: '', anonKey: '', enabled: false })",
          "const [connOk, setConnOk] = useState<boolean | null>(null)",
          "const [viewOk, setViewOk] = useState<boolean | null>(null)",
          "const [subActive, setSubActive] = useState(false)",
          "const unsubRef = useRef<() => void>(() => {})",
          "const [localCount, setLocalCount] = useState<number>(0)",
          "const supaEnabled = useMemo(() => isSupabaseEnabled(), [form])",
          "const [devMenuVisible, setDevMenuVisible] = useState<boolean>(false)",
          "useEffect(() => {",
          "const updateField = useCallback(<K extends keyof SupabaseConfig>(k: K, v: SupabaseConfig[K]) => {",
          "const saveConfig = useCallback(() => {",
          "const checkConnection = useCallback(async () => {",
          "const checkView = useCallback(async () => {",
          "const pullMaterials = useCallback(async () => {",
          "const pushMaterials = useCallback(async () => {",
          "const subscribeRealtime = useCallback(() => {",
          "const unsubscribeRealtime = useCallback(() => {",
          "const copyArtifact = useCallback(async () => {",
          "const toggleDevMenu = useCallback(() => {",
          "const copyDevLink = useCallback(async () => {"
        ]
      },
      "content": "/**\n * Панель отладки Supabase\n * Предназначение:\n * - Настройка URL/anonKey и включение синхронизации\n * - Проверка соединения и доступности view\n * - Операции с материалами: Pull (из БД) / Push (в БД) / Realtime-подписка\n * - Копирование единого SQL-артефакта в буфер обмена (устойчивые фолбэки)\n * - Управление видимостью пункта Dev в боковом меню\n */\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport {\n  Cloud, Link as LinkIcon, ShieldCheck, Database, Download, Upload,\n  Bell, Unplug, Clipboard, Check, AlertTriangle, SatelliteDish, PlugZap, Eye, EyeOff, ExternalLink\n} from 'lucide-react'\nimport { toast } from 'sonner'\nimport {\n  getSupabaseConfig,\n  setSupabaseConfig,\n  isSupabaseEnabled,\n  getSupabase,\n  testSupabaseConnection,\n  type SupabaseConfig,\n} from '../services/supabase'\nimport {\n  pullMaterialsToLocal,\n  readLocalMaterials,\n  upsertMaterialsBatch,\n  subscribeMaterialsChanges,\n} from '../services/materialsSync'\n\n/**\n * Badge — компактный индикатор состояния\n */\nfunction Badge({ ok, label }: { ok: boolean; label: string }): React.ReactElement {\n  return (\n    <span\n      className={`inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-xs ${\n        ok ? 'bg-emerald-50 text-emerald-700 border border-emerald-200' : 'bg-rose-50 text-rose-700 border border-rose-200'\n      }`}\n    >\n      {ok ? <Check size={12} /> : <AlertTriangle size={12} />}\n      {label}\n    </span>\n  )\n}\n\n/**\n * Маскировка ключа (кроме последних 4 символов)\n */\nfunction maskKey(k: string): string {\n  if (!k) return ''\n  const keep = 4\n  if (k.length <= keep) return '•'.repeat(Math.max(0, k.length - 1)) + (k.slice(-1) || '')\n  const hidden = '•'.repeat(k.length - keep)\n  return hidden + k.slice(-keep)\n}\n\n/**\n * Устойчивое копирование текста в буфер обмена.\n * 1) navigator.clipboard.writeText\n * 2) document.execCommand('copy') через скрытый textarea\n */\nasync function resilientCopy(text: string): Promise<boolean> {\n  // 1) Современный способ\n  try {\n    if (navigator.clipboard && typeof navigator.clipboard.writeText === 'function') {\n      await navigator.clipboard.writeText(text)\n      return true\n    }\n  } catch {\n    // переходим к фолбэку\n  }\n  // 2) Фолбэк: скрытый textarea + execCommand\n  try {\n    const ta = document.createElement('textarea')\n    ta.value = text\n    ta.style.position = 'fixed'\n    ta.style.left = '-9999px'\n    ta.style.top = '0'\n    ta.setAttribute('readonly', 'true')\n    document.body.appendChild(ta)\n    ta.select()\n    ta.setSelectionRange(0, text.length)\n    const ok = document.execCommand('copy')\n    document.body.removeChild(ta)\n    return ok\n  } catch {\n    return false\n  }\n}\n\n/**\n * Попытка получить текст SQL-артефакта с наборами кандидатных путей.\n * Избегаем cache: 'no-store' (CloudFront может не принимать не-кэшируемые запросы).\n */\nasync function fetchArtifactText(): Promise<string> {\n  const candidates = [\n    '/supabase/artifact_unified.sql',\n    'supabase/artifact_unified.sql',\n  ]\n  let lastError: any = null\n  for (const url of candidates) {\n    try {\n      const resp = await fetch(url, { method: 'GET', mode: 'same-origin', credentials: 'same-origin' })\n      if (resp.ok) {\n        return await resp.text()\n      } else {\n        lastError = new Error(`HTTP ${resp.status}`)\n      }\n    } catch (e) {\n      lastError = e\n    }\n  }\n  throw lastError || new Error('Не удалось загрузить artifact_unified.sql')\n}\n\n/**\n * SupabaseDebugPage — основная панель отладки\n */\nexport default function SupabaseDebugPage(): React.ReactElement {\n  // Состояние формы конфигурации\n  const [form, setForm] = useState<SupabaseConfig>({ url: '', anonKey: '', enabled: false })\n\n  // Диагностика\n  const [connOk, setConnOk] = useState<boolean | null>(null)\n  const [viewOk, setViewOk] = useState<boolean | null>(null)\n  const [subActive, setSubActive] = useState(false)\n  const unsubRef = useRef<() => void>(() => {})\n  const [localCount, setLocalCount] = useState<number>(0)\n  const supaEnabled = useMemo(() => isSupabaseEnabled(), [form])\n\n  // Флаг видимости Dev-пункта в меню\n  const [devMenuVisible, setDevMenuVisible] = useState<boolean>(false)\n\n  /**\n   * Инициализация: загрузка конфигурации и начальные данные\n   */\n  useEffect(() => {\n    const cfg = getSupabaseConfig()\n    setForm(cfg)\n    setLocalCount(readLocalMaterials().length)\n    try {\n      setDevMenuVisible(localStorage.getItem('wasser_devtools') === '1')\n    } catch {\n      setDevMenuVisible(false)\n    }\n  }, [])\n\n  /**\n   * Обновление поля формы\n   */\n  const updateField = useCallback(<K extends keyof SupabaseConfig>(k: K, v: SupabaseConfig[K]) => {\n    setForm((prev) => ({ ...prev, [k]: v }))\n  }, [])\n\n  /**\n   * Сохранение конфигурации в localStorage\n   */\n  const saveConfig = useCallback(() => {\n    setSupabaseConfig(form)\n    toast.success('Конфигурация сохранена')\n  }, [form])\n\n  /**\n   * Проверка соединения (быстрый head select)\n   */\n  const checkConnection = useCallback(async () => {\n    try {\n      setConnOk(null)\n      const ok = await testSupabaseConnection('materials')\n      setConnOk(ok)\n      toast[ok ? 'success' : 'error'](ok ? 'Подключение успешно' : 'Подключение не удалось')\n    } catch (e: any) {\n      setConnOk(false)\n      toast.error(`Ошибка соединения: ${e?.message || 'неизвестно'}`)\n    }\n  }, [])\n\n  /**\n   * Проверка доступности view v_products_export\n   */\n  const checkView = useCallback(async () => {\n    try {\n      setViewOk(null)\n      const c = getSupabase()\n      if (!c) {\n        setViewOk(false)\n        toast.error('Supabase не настроен')\n        return\n      }\n      const { error } = await c.from('v_products_export').select('*', { head: true, count: 'exact' }).limit(1)\n      const ok = !error\n      setViewOk(ok)\n      toast[ok ? 'success' : 'error'](ok ? 'View доступна' : `View недоступна: ${error?.message || 'ошибка'}`)\n    } catch (e: any) {\n      setViewOk(false)\n      toast.error(`Ошибка проверки view: ${e?.message || 'неизвестно'}`)\n    }\n  }, [])\n\n  /**\n   * Pull материалов: из БД в localStorage\n   */\n  const pullMaterials = useCallback(async () => {\n    try {\n      const n = await pullMaterialsToLocal()\n      setLocalCount(readLocalMaterials().length)\n      toast.success(`Импортировано из БД: ${n}`)\n    } catch (e: any) {\n      toast.error(`Ошибка Pull: ${e?.message || 'неизвестно'}`)\n    }\n  }, [])\n\n  /**\n   * Push материалов: из localStorage в БД (upsert batch)\n   */\n  const pushMaterials = useCallback(async () => {\n    try {\n      const list = readLocalMaterials()\n      if (list.length === 0) {\n        toast.info('Локальная база материалов пуста')\n        return\n      }\n      await upsertMaterialsBatch(list)\n      toast.success(`Выгружено в БД: ${list.length}`)\n    } catch (e: any) {\n      toast.error(`Ошибка Push: ${e?.message || 'неизвестно'}`)\n    }\n  }, [])\n\n  /**\n   * Включить realtime-подписку: на любое изменение делаем Pull\n   */\n  const subscribeRealtime = useCallback(() => {\n    if (subActive) return\n    const unsub = subscribeMaterialsChanges(async () => {\n      try {\n        await pullMaterialsToLocal()\n        setLocalCount(readLocalMaterials().length)\n        toast.success('Realtime: обновлены материалы')\n      } catch {\n        toast.error('Realtime: ошибка при обновлении')\n      }\n    })\n    unsubRef.current = unsub\n    setSubActive(true)\n    toast.success('Realtime-подписка включена')\n  }, [subActive])\n\n  /**\n   * Отключить realtime-подписку\n   */\n  const unsubscribeRealtime = useCallback(() => {\n    try {\n      unsubRef.current && unsubRef.current()\n    } catch {\n      // ignore\n    }\n    setSubActive(false)\n    toast.info('Realtime-подписка отключена')\n  }, [])\n\n  /**\n   * Скопировать SQL-артефакт в буфер обмена с устойчивыми фолбэками\n   */\n  const copyArtifact = useCallback(async () => {\n    try {\n      // 1) Получаем текст из нескольких кандидатных путей\n      const text = await fetchArtifactText()\n\n      // 2) Пытаемся скопировать (clipboard API -> textarea fallback)\n      const copied = await resilientCopy(text)\n      if (copied) {\n        toast.success('SQL-артефакт скопирован в буфер обмена')\n        return\n      }\n\n      // 3) Если копирование недоступно — скачиваем файл\n      const blob = new Blob([text], { type: 'text/plain;charset=utf-8' })\n      const url = URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.href = url\n      a.download = 'artifact_unified.sql'\n      a.click()\n      URL.revokeObjectURL(url)\n      toast.success('Скачан artifact_unified.sql (clipboard недоступен)')\n    } catch (e: any) {\n      toast.error(`Не удалось получить/скопировать артефакт: ${e?.message || 'неизвестно'}`)\n    }\n  }, [])\n\n  /**\n   * Переключить флаг отображения Dev-пункта в меню (localStorage + синтетическое событие storage)\n   */\n  const toggleDevMenu = useCallback(() => {\n    try {\n      const next = !devMenuVisible\n      const oldValue = localStorage.getItem('wasser_devtools')\n      if (next) {\n        localStorage.setItem('wasser_devtools', '1')\n      } else {\n        localStorage.removeItem('wasser_devtools')\n      }\n      setDevMenuVisible(next)\n      try {\n        const evt = new StorageEvent('storage', {\n          key: 'wasser_devtools',\n          oldValue,\n          newValue: next ? '1' : null,\n          storageArea: localStorage,\n        })\n        window.dispatchEvent(evt)\n      } catch {\n        /* noop */\n      }\n      toast.success(next ? 'Пункт Dev будет показан в боковом меню' : 'Пункт Dev скрыт в боковом меню')\n    } catch {\n      toast.error('Не удалось изменить флаг отображения Dev-пункта')\n    }\n  }, [devMenuVisible])\n\n  /**\n   * Скопировать прямую ссылку на /dev (HashRouter)\n   */\n  const copyDevLink = useCallback(async () => {\n    try {\n      const url = `${location.origin}${location.pathname}#/dev`\n      const ok = await resilientCopy(url)\n      if (ok) {\n        toast.success('Ссылка на /#/dev скопирована')\n      } else {\n        // Фолбэк: просто открываем новую вкладку с этой ссылкой\n        window.open(url, '_blank', 'noopener,noreferrer')\n        toast.success('Открыта новая вкладка /#/dev (clipboard недоступен)')\n      }\n    } catch {\n      toast.error('Не удалось скопировать ссылку')\n    }\n  }, [])\n\n  // Видимость статусов\n  const statusConn = connOk === null ? '—' : connOk ? 'OK' : 'Ошибка'\n  const statusView = viewOk === null ? '—' : viewOk ? 'OK' : 'Ошибка'\n\n  return (\n    <div className=\"max-w-5xl mx-auto px-6 py-8 space-y-6\">\n      {/* Заголовок */}\n      <div className=\"flex items-center justify-between gap-3\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 rounded-xl bg-indigo-600 text-white flex items-center justify-center shadow-md\">\n            <Cloud size={20} />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-extrabold text-gray-900\">Supabase Debug</h1>\n            <div className=\"text-sm text-gray-600\">Настройка подключения, диагностика, синхронизация материалов</div>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Badge ok={supaEnabled} label={supaEnabled ? 'Включено' : 'Отключено'} />\n          <span className=\"text-xs text-gray-500\">Локальных материалов: {localCount}</span>\n        </div>\n      </div>\n\n      {/* Конфигурация */}\n      <div className=\"bg-white border border-gray-200 rounded-xl p-5 space-y-4\">\n        <div className=\"flex items-center gap-2\">\n          <LinkIcon size={16} className=\"text-gray-500\" />\n          <h2 className=\"text-base font-semibold text-gray-900\">Конфигурация подключения</h2>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n          <div className=\"md:col-span-2\">\n            <label className=\"block text-sm text-gray-700 mb-1\">Supabase URL</label>\n            <input\n              type=\"url\"\n              value={form.url}\n              onChange={(e) => updateField('url', e.target.value)}\n              placeholder=\"https://xxx.supabase.co\"\n              className=\"w-full px-3 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-500\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm text-gray-700 mb-1\">Синхронизация</label>\n            <button\n              type=\"button\"\n              onClick={() => updateField('enabled', !form.enabled)}\n              className={`w-full px-3 py-2 rounded-lg border ${\n                form.enabled ? 'bg-emerald-50 border-emerald-200 text-emerald-700' : 'bg-white border-gray-300 text-gray-700'\n              }`}\n            >\n              {form.enabled ? 'Включена' : 'Выключена'}\n            </button>\n          </div>\n          <div className=\"md:col-span-2\">\n            <label className=\"block text-sm text-gray-700 mb-1\">Anon Key</label>\n            <input\n              type=\"text\"\n              value={form.anonKey}\n              onChange={(e) => updateField('anonKey', e.target.value)}\n              placeholder={maskKey(form.anonKey) || 'eyJhbGciOi...'}\n              className=\"w-full px-3 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-500\"\n            />\n          </div>\n          <div className=\"flex items-end\">\n            <button\n              type=\"button\"\n              onClick={saveConfig}\n              className=\"w-full px-3 py-2 rounded-lg text-white bg-indigo-600 hover:bg-indigo-700\"\n            >\n              Сохранить\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Диагностика */}\n      <div className=\"bg-white border border-gray-200 rounded-xl p-5 space-y-4\">\n        <div className=\"flex items-center gap-2\">\n          <ShieldCheck size={16} className=\"text-gray-500\" />\n          <h2 className=\"text-base font-semibold text-gray-900\">Диагностика</h2>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n          <div className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n            <div className=\"text-sm\">\n              <div className=\"font-medium text-gray-900\">Подключение</div>\n              <div className=\"text-xs text-gray-500\">HEAD select к таблице materials</div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-xs text-gray-500 mb-1\">Статус: {statusConn}</div>\n              <button\n                type=\"button\"\n                onClick={checkConnection}\n                className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-800\"\n              >\n                <PlugZap size={16} />\n                Проверить\n              </button>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n            <div className=\"text-sm\">\n              <div className=\"font-medium text-gray-900\">View v_products_export</div>\n              <div className=\"text-xs text-gray-500\">HEAD select наличия</div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-xs text-gray-500 mb-1\">Статус: {statusView}</div>\n              <button\n                type=\"button\"\n                onClick={checkView}\n                className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-800\"\n              >\n                <SatelliteDish size={16} />\n                Проверить\n              </button>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n            <div className=\"text-sm\">\n              <div className=\"font-medium text-gray-900\">SQL-артефакт</div>\n              <div className=\"text-xs text-gray-500\">Скопировать/скачать artifact_unified.sql</div>\n            </div>\n            <div className=\"text-right flex flex-wrap gap-2 justify-end\">\n              <button\n                type=\"button\"\n                onClick={copyArtifact}\n                className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg bg-emerald-600 hover:bg-emerald-700 text-white\"\n                title=\"Скопировать текст SQL в буфер\"\n              >\n                <Clipboard size={16} />\n                Скопировать\n              </button>\n              <a\n                href=\"/supabase/artifact_unified.sql\"\n                download\n                className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-800\"\n                title=\"Скачать файл artifact_unified.sql\"\n              >\n                <Download size={16} />\n                Скачать файл\n              </a>\n              <a\n                href=\"/supabase/artifact_unified.sql\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-800\"\n                title=\"Открыть файл в новой вкладке\"\n              >\n                <ExternalLink size={16} />\n                Открыть\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Видимость Dev-пункта в меню */}\n      <div className=\"bg-white border border-gray-200 rounded-xl p-5 space-y-4\">\n        <div className=\"flex items-center gap-2\">\n          <SatelliteDish size={16} className=\"text-gray-500\" />\n          <h2 className=\"text-base font-semibold text-gray-900\">Отображение пункта “Dev” в боковом меню</h2>\n        </div>\n\n        <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between gap-3 p-3 border border-gray-200 rounded-lg\">\n          <div className=\"text-sm\">\n            <div className=\"font-medium text-gray-900\">\n              Сейчас: {devMenuVisible || supaEnabled ? 'Показывается' : 'Скрыт'}\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              Пункт Dev автоматически показывается при активной конфигурации Supabase или по флагу localStorage.\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {devMenuVisible ? (\n              <button\n                type=\"button\"\n                onClick={toggleDevMenu}\n                className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-800\"\n                title=\"Скрыть пункт Dev в меню\"\n              >\n                <EyeOff size={16} />\n                Скрыть в меню\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                onClick={toggleDevMenu}\n                className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg text-white bg-indigo-600 hover:bg-indigo-700\"\n                title=\"Показать пункт Dev в меню\"\n              >\n                <Eye size={16} />\n                Показать в меню\n              </button>\n            )}\n\n            <a\n              href=\"#/dev\"\n              className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-800\"\n              title=\"Открыть страницу /#/dev\"\n            >\n              <LinkIcon size={16} />\n              Открыть /#/dev\n            </a>\n\n            <button\n              type=\"button\"\n              onClick={copyDevLink}\n              className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-800\"\n              title=\"Скопировать ссылку /#/dev\"\n            >\n              <Clipboard size={16} />\n              Скопировать ссылку\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Синхронизация материалов */}\n      <div className=\"bg-white border border-gray-200 rounded-xl p-5 space-y-4\">\n        <div className=\"flex items-center gap-2\">\n          <Database size={16} className=\"text-gray-500\" />\n          <h2 className=\"text-base font-semibold text-gray-900\">Материалы — синхронизация</h2>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n          <div className=\"p-3 border border-gray-200 rounded-lg\">\n            <div className=\"text-sm font-medium text-gray-900 mb-2\">Pull из БД</div>\n            <button\n              type=\"button\"\n              onClick={pullMaterials}\n              className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg text-white bg-indigo-600 hover:bg-indigo-700\"\n            >\n              <Download size={16} />\n              Импортировать (Pull)\n            </button>\n          </div>\n\n          <div className=\"p-3 border border-gray-200 rounded-lg\">\n            <div className=\"text-sm font-medium text-gray-900 mb-2\">Push в БД</div>\n            <button\n              type=\"button\"\n              onClick={pushMaterials}\n              className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg text-white bg-indigo-600 hover:bg-indigo-700\"\n            >\n              <Upload size={16} />\n              Выгрузить (Push)\n            </button>\n          </div>\n\n          <div className=\"p-3 border border-gray-200 rounded-lg\">\n            <div className=\"text-sm font-medium text-gray-900 mb-2\">Realtime</div>\n            {subActive ? (\n              <button\n                type=\"button\"\n                onClick={unsubscribeRealtime}\n                className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-800\"\n              >\n                <Unplug size={16} />\n                Отключить подписку\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                onClick={subscribeRealtime}\n                className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg text-white bg-indigo-600 hover:bg-indigo-700\"\n              >\n                <Bell size={16} />\n                Включить подписку\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "lines": 619,
      "size": 24432,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.4175124+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/tooltip.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const TooltipProvider = TooltipPrimitive.Provider",
          "const Tooltip = TooltipPrimitive.Root",
          "const TooltipTrigger = TooltipPrimitive.Trigger",
          "const TooltipContent = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 4,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as TooltipPrimitive from \"@radix-ui/react-tooltip\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
      "lines": 33,
      "size": 1267,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3037751+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/home/EmptyStateSection.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export default function EmptyStateSection({"
        ],
        "interfaces": [
          "export interface EmptyStateSectionProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React from 'react'",
          "import Card from '../common/Card'",
          "import Button from '../common/Button'",
          "import { Database, Zap, ChevronRight } from 'lucide-react'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface EmptyStateSectionProps {",
          "export default function EmptyStateSection({"
        ],
        "hooks": []
      },
      "content": "/**\n * EmptyStateSection — подсказка при пустых данных на главной странице.\n * Предлагает загрузить демо-данные или перейти к коллекциям.\n */\n\nimport React from 'react'\nimport Card from '../common/Card'\nimport Button from '../common/Button'\nimport { Database, Zap, ChevronRight } from 'lucide-react'\n\n/**\n * Пропсы пустого состояния\n */\nexport interface EmptyStateSectionProps {\n  /** Загрузить демо-данные */\n  onSeedData: () => void\n  /** Перейти к коллекциям */\n  onNavigateCollections: () => void\n}\n\n/**\n * EmptyStateSection — компонент подсказки\n */\nexport default function EmptyStateSection({\n  onSeedData,\n  onNavigateCollections,\n}: EmptyStateSectionProps): React.ReactElement {\n  return (\n    <Card className=\"p-8 text-center border-dashed\">\n      <div className=\"max-w-md mx-auto\">\n        <Database className=\"mx-auto text-gray-300 mb-3\" size={44} />\n        <h3 className=\"text-lg font-semibold text-gray-900\">Система готова к работе</h3>\n        <p className=\"text-gray-600 mt-1\">\n          Загрузите демонстрационные данные или начните с создания первой коллекции.\n        </p>\n        <div className=\"flex flex-col sm:flex-row gap-2 justify-center mt-4\">\n          <Button onClick={onSeedData} className=\"inline-flex items-center gap-2\">\n            <Zap size={16} />\n            Загрузить демо-данные\n          </Button>\n          <Button variant=\"outline\" className=\"bg-transparent\" onClick={onNavigateCollections}>\n            Перейти к коллекциям\n            <ChevronRight size={16} className=\"inline ml-1\" />\n          </Button>\n        </div>\n      </div>\n    </Card>\n  )\n}\n",
      "lines": 50,
      "size": 1889,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3277961+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/pages/Collections.tsx": {
      "analysis": {
        "types": [
          "type FurnitureKind = 'tumbas' | 'penals' | 'mirrors' | 'other'"
        ],
        "classes": [],
        "components": [
          "const LS_KEYS = {",
          "const utils = {",
          "const raw = localStorage.getItem(key)",
          "function classifyProduct(p: { name: string; article?: string }): FurnitureKind {",
          "const n = (p.name || '').toLowerCase()",
          "const a = (p.article || '').toLowerCase()",
          "function logEvent(event: Omit<AuditEvent, 'id' | 'at' | 'version'>) {",
          "const list = utils.read<AuditEvent[]>(LS_KEYS.audit, [])",
          "function seedProducts(): Product[] {",
          "const now = new Date().toISOString()",
          "function seedCollections(productIds: string[]): Collection[] {",
          "const now = new Date().toISOString()",
          "const firstHalf = productIds.slice(0, Math.ceil(productIds.length / 2))",
          "export default function CollectionsPage(): React.ReactElement {",
          "const groups = useMemo(() => {",
          "const s = new Set<string>()",
          "const stats = useMemo(() => {",
          "const archivedCount = collections.filter((c) => c.is_archived).length",
          "const productsUnique = new Set<string>()",
          "const productMap = useMemo(() => new Map(products.map((p) => [p.id, p])), [products])",
          "const filteredCollections = useMemo(() => {",
          "const term = search.trim().toLowerCase()",
          "const nameMatch = c.name.toLowerCase().includes(term)",
          "const descrMatch = (c.description || '').toLowerCase().includes(term)",
          "const hasProductMatch = c.product_order",
          "const createCollection = useCallback(() => {",
          "const now = new Date().toISOString()",
          "const updateCollection = useCallback((id: string, patch: Partial<Collection>) => {",
          "const deleteCollection = useCallback((id: string) => {",
          "const c = collections.find((x) => x.id === id)",
          "const toggleArchive = useCallback((id: string) => {",
          "const c = collections.find((x) => x.id === id)",
          "const next = !c.is_archived",
          "const togglePin = useCallback((id: string) => {",
          "const c = collections.find((x) => x.id === id)",
          "const createProduct = useCallback(() => {",
          "const now = new Date().toISOString()",
          "const updateProduct = useCallback((id: string, patch: Partial<Product>) => {",
          "const deleteProduct = useCallback((id: string) => {",
          "const p = products.find((x) => x.id === id)",
          "const quickAddProductToCollection = useCallback((collectionId: string, productId: string) => {",
          "const mapForCard = productMap as unknown as Map<string, CardProduct>",
          "const ok = confirm(`Удалить коллекцию \"${c.name}\"?`)",
          "const full = productMap.get(productId)",
          "const p = products.find((x) => x.id === id)",
          "function CollectionModal({",
          "const doGenerateDescription = useCallback(async () => {",
          "const desc = await AiService.generateCollectionDescription({",
          "function ProductModal({",
          "const materials = utils.read<Material[]>(LS_KEYS.materials, [])",
          "const resolveAiItemsToTechCard = useCallback((items: AiTechCardItem[], catalog: Material[]): { resolved: TechCardItem[]; unresolved: AiTechCardItem[] } => {",
          "const byArticle = new Map(catalog.map((m) => [String(m.article || '').trim().toLowerCase(), m]))",
          "const byName = new Map(catalog.map((m) => [String(m.name || '').trim().toLowerCase(), m]))",
          "const articleKey = String(it.article || '').trim().toLowerCase()",
          "const nameKey = String(it.name || '').trim().toLowerCase()",
          "const doSuggestTechCard = useCallback(async () => {",
          "const items = await AiService.suggestTechCard({",
          "const applyResolvedToForm = useCallback(() => {",
          "const base = Array.isArray(form.tech_card) ? form.tech_card : []",
          "const map = new Map<string, TechCardItem>()",
          "const exist = map.get(it.materialId)",
          "const next = Array.from(map.values())",
          "function DnDEditor({",
          "const inCollection = useMemo(",
          "const availableAll = useMemo(() => products.filter((p) => !order.includes(p.id)), [order, products])",
          "const available = useMemo(() => {",
          "const onDragStart = useCallback((id: string) => setDraggingId(id), [])",
          "const onDragOverCard = useCallback((e: React.DragEvent) => e.preventDefault(), [])",
          "const insertAt = (arr: string[], idx: number, val: string) => {",
          "const copy = arr.slice()",
          "const onDropOverItem = useCallback(",
          "const targetIdx = next.indexOf(targetId)",
          "const onDropToListEnd = useCallback(() => {",
          "const next = order.filter((id) => id !== draggingId).concat(draggingId)",
          "const removeFromCollection = useCallback((id: string) => {",
          "const KindBadge = ({ p }: { p: Product }) => {",
          "const kind = classifyProduct(p)",
          "const classes =",
          "const label =",
          "const THUMB_WEBP =",
          "const THUMB_FALLBACK =",
          "const active = kindFilter === key"
        ],
        "interfaces": [
          "interface AuditEvent {",
          "interface Product {",
          "interface Collection {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 82,
          "typesCount": 1,
          "hooksCount": 51,
          "interfacesCount": 3,
          "exportsCount": 1,
          "importsCount": 9,
          "classesCount": 0,
          "functionsCount": 9
        },
        "imports": [
          "import React, { useCallback, useEffect, useMemo, useState } from 'react'",
          "import {",
          "import CollectionStatsBar from '../components/collections/CollectionStatsBar'",
          "import CollectionsFilters from '../components/collections/CollectionsFilters'",
          "import CollectionCard, { type ICollection as CardCollection, type IProduct as CardProduct } from '../components/collections/CollectionCard'",
          "import ProgressiveImage from '../components/common/ProgressiveImage'",
          "import TechCardManager from '../components/techcard/TechCardManager'",
          "import type { Material, TechCardItem } from '../types/models'",
          "import { AiService, type MaterialsCatalogItem, type AiTechCardItem } from '../services/ai'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function classifyProduct(p: { name: string; article?: string }): FurnitureKind {",
          "function logEvent(event: Omit<AuditEvent, 'id' | 'at' | 'version'>) {",
          "function seedProducts(): Product[] {",
          "function seedCollections(productIds: string[]): Collection[] {",
          "function CollectionModal({",
          "function ProductModal({",
          "function DnDEditor({",
          "const insertAt = (arr: string[], idx: number, val: string) => {",
          "const KindBadge = ({ p }: { p: Product }) => {"
        ],
        "exports": [
          "export default function CollectionsPage(): React.ReactElement {"
        ],
        "hooks": [
          "import React, { useCallback, useEffect, useMemo, useState } from 'react'",
          "const [products, setProducts] = useState<Product[]>(",
          "const [collections, setCollections] = useState<Collection[]>(",
          "useEffect(() => utils.write(LS_KEYS.products, products), [products])",
          "useEffect(() => utils.write(LS_KEYS.collections, collections), [collections])",
          "const [search, setSearch] = useState('')",
          "const [groupFilter, setGroupFilter] = useState<string>('all')",
          "const [showArchived, setShowArchived] = useState<boolean>(false)",
          "const groups = useMemo(() => {",
          "const stats = useMemo(() => {",
          "const productMap = useMemo(() => new Map(products.map((p) => [p.id, p])), [products])",
          "const filteredCollections = useMemo(() => {",
          "const [editingCollection, setEditingCollection] = useState<Collection | null>(null)",
          "const [editingProduct, setEditingProduct] = useState<Product | null>(null)",
          "const [editorCollection, setEditorCollection] = useState<Collection | null>(null)",
          "const [productTab, setProductTab] = useState<'info' | 'tc'>('info')",
          "const createCollection = useCallback(() => {",
          "const updateCollection = useCallback((id: string, patch: Partial<Collection>) => {",
          "const deleteCollection = useCallback((id: string) => {",
          "const toggleArchive = useCallback((id: string) => {",
          "const togglePin = useCallback((id: string) => {",
          "const createProduct = useCallback(() => {",
          "const updateProduct = useCallback((id: string, patch: Partial<Product>) => {",
          "const deleteProduct = useCallback((id: string) => {",
          "const quickAddProductToCollection = useCallback((collectionId: string, productId: string) => {",
          "const [form, setForm] = useState<Collection>(value)",
          "const [aiLoading, setAiLoading] = useState(false)",
          "const [aiError, setAiError] = useState<string | null>(null)",
          "const doGenerateDescription = useCallback(async () => {",
          "const [form, setForm] = useState<Product>(value)",
          "const [tab, setTab] = useState<'info' | 'tc'>(initialTab)",
          "const [aiBrief, setAiBrief] = useState<string>('')",
          "const [aiLoading, setAiLoading] = useState<boolean>(false)",
          "const [aiError, setAiError] = useState<string | null>(null)",
          "const [aiResolved, setAiResolved] = useState<TechCardItem[]>([])",
          "const [aiUnresolved, setAiUnresolved] = useState<AiTechCardItem[]>([])",
          "const resolveAiItemsToTechCard = useCallback((items: AiTechCardItem[], catalog: Material[]): { resolved: TechCardItem[]; unresolved: AiTechCardItem[] } => {",
          "const doSuggestTechCard = useCallback(async () => {",
          "const applyResolvedToForm = useCallback(() => {",
          "const [order, setOrder] = useState<string[]>(collection.product_order)",
          "const [draggingId, setDraggingId] = useState<string | null>(null)",
          "const [overId, setOverId] = useState<string | null>(null)",
          "const [kindFilter, setKindFilter] = useState<FurnitureKind | 'all'>('all')",
          "const inCollection = useMemo(",
          "const availableAll = useMemo(() => products.filter((p) => !order.includes(p.id)), [order, products])",
          "const available = useMemo(() => {",
          "const onDragStart = useCallback((id: string) => setDraggingId(id), [])",
          "const onDragOverCard = useCallback((e: React.DragEvent) => e.preventDefault(), [])",
          "const onDropOverItem = useCallback(",
          "const onDropToListEnd = useCallback(() => {",
          "const removeFromCollection = useCallback((id: string) => {"
        ]
      },
      "content": "/** \n * Страница \"Коллекции\"\n * Улучшения:\n * - Статистика (всего коллекций, изделий, архивных)\n * - Фильтры с чипами групп\n * - Карточка коллекции с закреплением (pin) и быстрым добавлением изделия\n * - DnD-редактор — фильтрация по типам (Тумбы/Пеналы/Зеркала/Прочее)\n * - Новое: обложка коллекции (cover_url) + поле в модалке \"Обложка (URL)\"\n * - Дополнено: клик по товару из превью открывает карточку товара с редактированием.\n * - Новое: в DnD-редакторе карточка товара кликабельна — открывается полная модалка товара с вкладкой \"Технологическая карта\".\n * - Новое: AI (Claude) — генерация описания коллекции и подсказка технологической карты изделия.\n */\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport {\n  Grid2X2,\n  Plus,\n  BookOpenCheck,\n  Layers,\n  GripVertical,\n  Trash2,\n  Wand2,\n  Sparkles,\n} from 'lucide-react'\n\nimport CollectionStatsBar from '../components/collections/CollectionStatsBar'\nimport CollectionsFilters from '../components/collections/CollectionsFilters'\nimport CollectionCard, { type ICollection as CardCollection, type IProduct as CardProduct } from '../components/collections/CollectionCard'\nimport ProgressiveImage from '../components/common/ProgressiveImage'\nimport TechCardManager from '../components/techcard/TechCardManager'\nimport type { Material, TechCardItem } from '../types/models'\nimport { AiService, type MaterialsCatalogItem, type AiTechCardItem } from '../services/ai'\n\n/**\n * Тип события журнала\n */\ninterface AuditEvent {\n  id: string\n  at: number\n  action: string\n  entity: 'collection' | 'product' | 'system' | string\n  entityId?: string\n  details?: any\n  version?: string\n}\n\n/**\n * Тип товара (дополнен: tech_card для редактирования ТД)\n */\ninterface Product {\n  id: string\n  name: string\n  article: string\n  imageKeyword?: string\n  /** Техкарта (опционально для обратной совместимости) */\n  tech_card?: TechCardItem[]\n  created_at: string\n  updated_at: string\n}\n\n/**\n * Тип коллекции (добавлено поле cover_url)\n */\ninterface Collection {\n  id: string\n  name: string\n  description?: string\n  group?: string\n  is_archived?: boolean\n  pinned?: boolean\n  product_order: string[]\n  /** URL обложки коллекции */\n  cover_url?: string\n  created_at: string\n  updated_at: string\n}\n\n/**\n * Локальные ключи хранилища\n */\nconst LS_KEYS = {\n  collections: 'wasser_collections_data',\n  products: 'wasser_products_data',\n  audit: 'wasser_change_log',\n  materials: 'wasser_materials_data',\n}\n\n/**\n * Утилиты\n */\nconst utils = {\n  /** Генерация ID */\n  id: () => Date.now().toString(36) + Math.random().toString(36).slice(2),\n  /** Короткий формат даты */\n  shortDate: (d: string | number | Date) =>\n    new Date(d).toLocaleString('ru-RU', { dateStyle: 'medium', timeStyle: 'short' }),\n  /** Безопасное чтение из LS */\n  read<T>(key: string, fallback: T): T {\n    try {\n      const raw = localStorage.getItem(key)\n      return raw ? (JSON.parse(raw) as T) : fallback\n    } catch {\n      return fallback\n    }\n  },\n  /** Запись в LS */\n  write<T>(key: string, value: T) {\n    try {\n      localStorage.setItem(key, JSON.stringify(value))\n    } catch {\n      /* noop */\n    }\n  },\n}\n\n/**\n * Классификация изделий по типу для UX (эвристика по названию/артикулу)\n */\ntype FurnitureKind = 'tumbas' | 'penals' | 'mirrors' | 'other'\nfunction classifyProduct(p: { name: string; article?: string }): FurnitureKind {\n  const n = (p.name || '').toLowerCase()\n  const a = (p.article || '').toLowerCase()\n  // Тумбы\n  if (n.includes('тумб') || a.includes('tumb') || a.includes('tb-')) return 'tumbas'\n  // Пеналы\n  if (n.includes('пенал') || a.includes('penal')) return 'penals'\n  // Зеркала\n  if (n.includes('зеркал') || a.includes('mir')) return 'mirrors'\n  return 'other'\n}\n\n/**\n * Логирование событий в общий журнал\n */\nfunction logEvent(event: Omit<AuditEvent, 'id' | 'at' | 'version'>) {\n  const list = utils.read<AuditEvent[]>(LS_KEYS.audit, [])\n  const item: AuditEvent = {\n    id: utils.id(),\n    at: Date.now(),\n    version: 'v1',\n    ...event,\n  }\n  utils.write(LS_KEYS.audit, [item, ...list])\n}\n\n/**\n * Начальные тестовые продукты (если нет в LS)\n * Дополнено: добавляем пустую техкарту\n */\nfunction seedProducts(): Product[] {\n  const now = new Date().toISOString()\n  return [\n    { id: utils.id(), name: 'Тумба 600 Белая', article: 'TB-600-WHT', imageKeyword: 'bathroom furniture', tech_card: [], created_at: now, updated_at: now },\n    { id: utils.id(), name: 'Тумба 800 Дуб', article: 'TB-800-OAK', imageKeyword: 'modern cabinet', tech_card: [], created_at: now, updated_at: now },\n    { id: utils.id(), name: 'Пенал узкий', article: 'PENAL-NARROW', imageKeyword: 'tall cabinet', tech_card: [], created_at: now, updated_at: now },\n    { id: utils.id(), name: 'Зеркало 600', article: 'MIR-600', imageKeyword: 'mirror', tech_card: [], created_at: now, updated_at: now },\n    { id: utils.id(), name: 'Полка настенная', article: 'SHELF-600', imageKeyword: 'shelf', tech_card: [], created_at: now, updated_at: now },\n    { id: utils.id(), name: 'Тумба 1000 Глянец', article: 'TB-1000-GL', imageKeyword: 'gloss furniture', tech_card: [], created_at: now, updated_at: now },\n  ]\n}\n\n/**\n * Начальные коллекции (если нет в LS). Добавлено поле cover_url: пустое по умолчанию.\n */\nfunction seedCollections(productIds: string[]): Collection[] {\n  const now = new Date().toISOString()\n  const firstHalf = productIds.slice(0, Math.ceil(productIds.length / 2))\n  return [\n    {\n      id: utils.id(),\n      name: '2025 Весна',\n      description: 'Светлая и лаконичная коллекция',\n      group: '2025 Весна',\n      is_archived: false,\n      pinned: true,\n      product_order: firstHalf,\n      cover_url: '',\n      created_at: now,\n      updated_at: now,\n    },\n    {\n      id: utils.id(),\n      name: '2025 Осень',\n      description: 'Теплые тона и натуральные фактуры',\n      group: '2025 Осень',\n      is_archived: false,\n      pinned: false,\n      product_order: productIds.filter((id) => !firstHalf.includes(id)),\n      cover_url: '',\n      created_at: now,\n      updated_at: now,\n    },\n  ]\n}\n\n/**\n * Компонент \"Коллекции\"\n */\nexport default function CollectionsPage(): React.ReactElement {\n  // Данные\n  const [products, setProducts] = useState<Product[]>(\n    () => utils.read<Product[]>(LS_KEYS.products, seedProducts()),\n  )\n  const [collections, setCollections] = useState<Collection[]>(\n    () =>\n      utils.read<Collection[]>(\n        LS_KEYS.collections,\n        seedCollections(utils.read<Product[]>(LS_KEYS.products, seedProducts()).map((p) => p.id)),\n      ),\n  )\n\n  // Сохранение в LS\n  useEffect(() => utils.write(LS_KEYS.products, products), [products])\n  useEffect(() => utils.write(LS_KEYS.collections, collections), [collections])\n\n  // Фильтры\n  const [search, setSearch] = useState('')\n  const [groupFilter, setGroupFilter] = useState<string>('all')\n  const [showArchived, setShowArchived] = useState<boolean>(false)\n\n  // Группы\n  const groups = useMemo(() => {\n    const s = new Set<string>()\n    collections.forEach((c) => c.group && s.add(c.group))\n    return Array.from(s).sort((a, b) => a.localeCompare(b, 'ru'))\n  }, [collections])\n\n  // Подсчёты для статистики\n  const stats = useMemo(() => {\n    const archivedCount = collections.filter((c) => c.is_archived).length\n    const productsUnique = new Set<string>()\n    collections.forEach((c) => c.product_order.forEach((id) => productsUnique.add(id)))\n    return {\n      collectionsCount: collections.length,\n      productsCount: productsUnique.size,\n      archivedCount,\n    }\n  }, [collections])\n\n  // Словарь изделий\n  const productMap = useMemo(() => new Map(products.map((p) => [p.id, p])), [products])\n\n  // Фильтрация и сортировка (закреплённые сверху)\n  const filteredCollections = useMemo(() => {\n    const term = search.trim().toLowerCase()\n    let list = collections\n      .filter((c) => (showArchived ? true : !c.is_archived))\n      .filter((c) => (groupFilter === 'all' ? true : (c.group || '') === groupFilter))\n      .filter((c) => {\n        if (!term) return true\n        const nameMatch = c.name.toLowerCase().includes(term)\n        const descrMatch = (c.description || '').toLowerCase().includes(term)\n        const hasProductMatch = c.product_order\n          .map((id) => productMap.get(id))\n          .filter(Boolean)\n          .some((p) => p!.name.toLowerCase().includes(term) || p!.article.toLowerCase().includes(term))\n        return nameMatch || descrMatch || hasProductMatch\n      })\n      .sort((a, b) => a.name.localeCompare(b.name, 'ru'))\n\n    // Закреплённые сначала\n    list = list.slice().sort((a, b) => Number(!!b.pinned) - Number(!!a.pinned))\n    return list\n  }, [collections, productMap, search, groupFilter, showArchived])\n\n  // Модалки\n  const [editingCollection, setEditingCollection] = useState<Collection | null>(null)\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null)\n  const [editorCollection, setEditorCollection] = useState<Collection | null>(null)\n  /** Какая вкладка в модалке товара открыта */\n  const [productTab, setProductTab] = useState<'info' | 'tc'>('info')\n\n  // CRUD: Коллекции\n  const createCollection = useCallback(() => {\n    const now = new Date().toISOString()\n    const c: Collection = {\n      id: utils.id(),\n      name: 'Новая коллекция',\n      description: '',\n      group: groups[0] || 'Без группы',\n      is_archived: false,\n      pinned: false,\n      product_order: [],\n      cover_url: '',\n      created_at: now,\n      updated_at: now,\n    }\n    setCollections((prev) => [c, ...prev])\n    logEvent({ action: 'create', entity: 'collection', entityId: c.id, details: { name: c.name } })\n    setEditingCollection(c)\n  }, [groups])\n\n  const updateCollection = useCallback((id: string, patch: Partial<Collection>) => {\n    setCollections((prev) =>\n      prev.map((c) => (c.id === id ? { ...c, ...patch, updated_at: new Date().toISOString() } : c)),\n    )\n    logEvent({ action: 'update', entity: 'collection', entityId: id, details: patch })\n  }, [])\n\n  const deleteCollection = useCallback((id: string) => {\n    const c = collections.find((x) => x.id === id)\n    if (!c) return\n    if (!confirm(`Удалить коллекцию \"${c.name}\"? Товары будут помечены как неприкрепленные.`)) return\n    setCollections((prev) => prev.filter((x) => x.id !== id))\n    logEvent({ action: 'delete', entity: 'collection', entityId: id, details: { name: c.name } })\n  }, [collections])\n\n  const toggleArchive = useCallback((id: string) => {\n    const c = collections.find((x) => x.id === id)\n    if (!c) return\n    const next = !c.is_archived\n    updateCollection(id, { is_archived: next })\n    logEvent({\n      action: next ? 'archive' : 'unarchive',\n      entity: 'collection',\n      entityId: id,\n      details: { name: c.name },\n    })\n  }, [collections, updateCollection])\n\n  const togglePin = useCallback((id: string) => {\n    const c = collections.find((x) => x.id === id)\n    if (!c) return\n    updateCollection(id, { pinned: !c.pinned })\n  }, [collections, updateCollection])\n\n  // CRUD: Продукты (минимально)\n  const createProduct = useCallback(() => {\n    const now = new Date().toISOString()\n    const p: Product = {\n      id: utils.id(),\n      name: 'Новое изделие',\n      article: `ART-${Math.random().toString(36).slice(2, 7).toUpperCase()}`,\n      imageKeyword: 'furniture',\n      tech_card: [],\n      created_at: now,\n      updated_at: now,\n    }\n    setProducts((prev) => [p, ...prev])\n    logEvent({ action: 'create', entity: 'product', entityId: p.id, details: { name: p.name } })\n    setEditingProduct(p)\n    setProductTab('info')\n  }, [])\n\n  const updateProduct = useCallback((id: string, patch: Partial<Product>) => {\n    setProducts((prev) =>\n      prev.map((p) => (p.id === id ? { ...p, ...patch, updated_at: new Date().toISOString() } : p)),\n    )\n    logEvent({ action: 'update', entity: 'product', entityId: id, details: patch })\n  }, [])\n\n  const deleteProduct = useCallback((id: string) => {\n    const p = products.find((x) => x.id === id)\n    if (!p) return\n    if (!confirm(`Удалить изделие \"${p.name}\"?`)) return\n    // Удаляем из порядков в коллекциях\n    setCollections((prev) =>\n      prev.map((c) => ({ ...c, product_order: c.product_order.filter((pid) => pid !== id) })),\n    )\n    setProducts((prev) => prev.filter((x) => x.id !== id))\n    logEvent({ action: 'delete', entity: 'product', entityId: id, details: { name: p.name } })\n  }, [products])\n\n  /**\n   * Быстро добавить изделие в коллекцию (из выпадающего списка)\n   */\n  const quickAddProductToCollection = useCallback((collectionId: string, productId: string) => {\n    setCollections((prev) =>\n      prev.map((c) =>\n        c.id === collectionId && !c.product_order.includes(productId)\n          ? { ...c, product_order: [...c.product_order, productId], updated_at: new Date().toISOString() }\n          : c,\n      ),\n    )\n    logEvent({\n      action: 'add_product',\n      entity: 'collection',\n      entityId: collectionId,\n      details: { productId },\n    })\n  }, [])\n\n  return (\n    <div className=\"max-w-6xl mx-auto px-6 py-8 space-y-6\">\n      {/* Заголовок и действия */}\n      <div className=\"flex flex-col md:flex-row md:items-center gap-4 justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 flex items-center gap-2\">\n            <Grid2X2 size={22} className=\"text-blue-600\" />\n            Коллекции\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Управляйте витриной изделий по коллекциям. Закрепляйте важные, быстро добавляйте изделия и открывайте DnD-редактор для детального порядка.\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            className=\"px-4 py-2 rounded-lg font-medium bg-white border border-gray-300 hover:bg-gray-50 text-gray-700\"\n            onClick={() => (location.hash = '#/journal')}\n            title=\"Открыть журнал изменений\"\n          >\n            <BookOpenCheck size={16} className=\"inline mr-2\" />\n            Журнал\n          </button>\n          <button\n            className=\"px-4 py-2 rounded-lg font-medium bg-white border border-gray-300 hover:bg-gray-50 text-gray-700\"\n            onClick={createProduct}\n            title=\"Добавить изделие\"\n          >\n            <Plus size={16} className=\"inline mr-2\" />\n            Изделие\n          </button>\n          <button\n            className=\"px-4 py-2 rounded-lg font-medium bg-blue-600 hover:bg-blue-700 text-white\"\n            onClick={createCollection}\n            title=\"Создать коллекцию\"\n          >\n            <Plus size={16} className=\"inline mr-2\" />\n            Коллекция\n          </button>\n        </div>\n      </div>\n\n      {/* Статистика */}\n      <CollectionStatsBar\n        collectionsCount={stats.collectionsCount}\n        productsCount={stats.productsCount}\n        archivedCount={stats.archivedCount}\n      />\n\n      {/* Панель фильтров с чипами групп */}\n      <CollectionsFilters\n        search={search}\n        onSearchChange={setSearch}\n        groups={groups}\n        groupFilter={groupFilter}\n        onGroupChange={setGroupFilter}\n        showArchived={showArchived}\n        onToggleArchived={setShowArchived}\n        onReset={() => {\n          setSearch('')\n          setGroupFilter('all')\n          setShowArchived(false)\n        }}\n      />\n\n      {/* Список коллекций */}\n      <div className=\"space-y-6\">\n        {filteredCollections.length === 0 ? (\n          <div className=\"text-center py-16 bg-white border border-gray-200 rounded-xl\">\n            <Layers size={48} className=\"mx-auto mb-3 text-gray-300\" />\n            <div className=\"text-gray-600\">Коллекции не найдены. Создайте первую коллекцию или измените фильтры.</div>\n          </div>\n        ) : (\n          filteredCollections.map((c) => {\n            const asCard: CardCollection = {\n              id: c.id,\n              name: c.name,\n              description: c.description,\n              group: c.group,\n              is_archived: c.is_archived,\n              pinned: c.pinned,\n              product_order: c.product_order,\n              cover_url: c.cover_url,\n              updated_at: c.updated_at,\n            }\n            const mapForCard = productMap as unknown as Map<string, CardProduct>\n            return (\n              <CollectionCard\n                key={c.id}\n                collection={asCard}\n                productMap={mapForCard}\n                onEdit={(col) => setEditingCollection(c)}\n                onOpenEditor={(col) => setEditorCollection(c)}\n                onToggleArchive={(col) => toggleArchive(c.id)}\n                onDelete={(col) => {\n                  const ok = confirm(`Удалить коллекцию \"${c.name}\"?`)\n                  if (ok) deleteCollection(c.id)\n                }}\n                onTogglePin={(col) => togglePin(c.id)}\n                onQuickAddProduct={quickAddProductToCollection}\n                onOpenProduct={(productId) => {\n                  const full = productMap.get(productId)\n                  if (full) {\n                    setEditingProduct(full)\n                    setProductTab('info')\n                  }\n                }}\n              />\n            )\n          })\n        )}\n      </div>\n\n      {/* Модалки: редактирование коллекции, редактирование товара, редактор DnD */}\n      {editingCollection && (\n        <CollectionModal\n          value={editingCollection}\n          /** Имена товаров коллекции — для AI описания */\n          productNames={editingCollection.product_order.map((id) => productMap.get(id)?.name).filter(Boolean) as string[]}\n          onClose={() => setEditingCollection(null)}\n          onSubmit={(val) => {\n            updateCollection(val.id, {\n              name: val.name,\n              description: val.description,\n              group: val.group,\n              cover_url: val.cover_url,\n              pinned: val.pinned,\n            })\n            setEditingCollection(null)\n          }}\n        />\n      )}\n\n      {editingProduct && (\n        <ProductModal\n          value={editingProduct}\n          initialTab={productTab}\n          onClose={() => setEditingProduct(null)}\n          onSubmit={(val) => {\n            updateProduct(val.id, {\n              name: val.name,\n              article: val.article,\n              imageKeyword: val.imageKeyword,\n              tech_card: val.tech_card || [],\n            })\n            setEditingProduct(null)\n          }}\n          onDelete={() => {\n            deleteProduct(editingProduct.id)\n            setEditingProduct(null)\n          }}\n          onApplyTechCard={(tc) => {\n            updateProduct(editingProduct.id, { tech_card: tc })\n          }}\n        />\n      )}\n\n      {editorCollection && (\n        <DnDEditor\n          collection={editorCollection}\n          products={products}\n          onClose={() => setEditorCollection(null)}\n          onApply={(nextOrder) => {\n            updateCollection(editorCollection.id, { product_order: nextOrder })\n            logEvent({\n              action: 'reorder',\n              entity: 'collection',\n              entityId: editorCollection.id,\n              details: { order: nextOrder },\n            })\n            setEditorCollection(null)\n          }}\n          onAddProduct={() =>\n            setEditingProduct({\n              id: utils.id(),\n              name: 'Новое изделие',\n              article: `ART-${Math.random().toString(36).slice(2, 7).toUpperCase()}`,\n              imageKeyword: 'furniture',\n              tech_card: [],\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString(),\n            })\n          }\n          onOpenProduct={(id) => {\n            const p = products.find((x) => x.id === id)\n            if (p) {\n              setEditingProduct(p)\n              setProductTab('tc')\n            }\n          }}\n        />\n      )}\n    </div>\n  )\n}\n\n/**\n * CollectionModal — модальное окно редактирования коллекции (добавлено поле cover_url)\n * Новое: кнопка AI для генерации описания.\n */\nfunction CollectionModal({\n  value,\n  productNames,\n  onClose,\n  onSubmit,\n}: {\n  value: Collection\n  /** Для AI описания — список наименований изделий в коллекции */\n  productNames: string[]\n  onClose: () => void\n  onSubmit: (val: Collection) => void\n}) {\n  const [form, setForm] = useState<Collection>(value)\n  /** Состояния AI */\n  const [aiLoading, setAiLoading] = useState(false)\n  const [aiError, setAiError] = useState<string | null>(null)\n\n  /** Вызов AI для генерации описания коллекции */\n  const doGenerateDescription = useCallback(async () => {\n    setAiError(null)\n    setAiLoading(true)\n    try {\n      const desc = await AiService.generateCollectionDescription({\n        name: form.name || '',\n        group: form.group || '',\n        productNames: productNames || [],\n      })\n      setForm((prev) => ({ ...prev, description: desc }))\n    } catch (e: any) {\n      setAiError(e?.message || 'Не удалось получить описание')\n    } finally {\n      setAiLoading(false)\n    }\n  }, [form.name, form.group, productNames])\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n      onClick={onClose}\n      role=\"dialog\"\n      aria-modal=\"true\"\n    >\n      <div className=\"bg-white rounded-xl w-full max-w-lg\" onClick={(e) => e.stopPropagation()}>\n        <div className=\"p-5 border-b border-gray-200 flex items-center justify-between\">\n          <div className=\"font-semibold text-gray-900\">Редактировать коллекцию</div>\n          <button className=\"text-gray-500 hover:text-gray-700\" onClick={onClose} title=\"Закрыть\">\n            ✕\n          </button>\n        </div>\n        <div className=\"p-5 space-y-4\">\n          <div>\n            <label className=\"block text-sm text-gray-700 mb-1\">Название</label>\n            <input\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              value={form.name}\n              onChange={(e) => setForm({ ...form, name: e.target.value })}\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm text-gray-700 mb-1\">Группа</label>\n            <input\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"Например: 2025 Весна\"\n              value={form.group || ''}\n              onChange={(e) => setForm({ ...form, group: e.target.value })}\n            />\n          </div>\n\n          {/* Новое поле: обложка коллекции */}\n          <div>\n            <label className=\"block text-sm text-gray-700 mb-1\">Обложка (URL)</label>\n            <input\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"https://example.com/cover.jpg\"\n              value={form.cover_url || ''}\n              onChange={(e) => setForm({ ...form, cover_url: e.target.value })}\n            />\n            {/* Превью для удобства */}\n            <div className=\"mt-2 aspect-[16/5] rounded-lg overflow-hidden border border-gray-200 bg-gray-50\">\n              {form.cover_url ? (\n                <ProgressiveImage\n                  alt=\"Превью обложки\"\n                  src={form.cover_url}\n                  className=\"w-full h-full\"\n                  imgClassName=\"object-cover w-full h-full\"\n                  loading=\"lazy\"\n                  decoding=\"async\"\n                />\n              ) : (\n                <ProgressiveImage\n                  alt=\"Превью обложки\"\n                  src=\"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?auto=format&q=80&w=1200\"\n                  webpSrc=\"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?auto=format&fm=webp&q=75&w=1200\"\n                  className=\"w-full h-full\"\n                  imgClassName=\"object-cover w-full h-full\"\n                  loading=\"lazy\"\n                  decoding=\"async\"\n                />\n              )}\n            </div>\n          </div>\n\n          <div>\n            <div className=\"flex items-center justify-between\">\n              <label className=\"block text-sm text-gray-700 mb-1\">Описание</label>\n              <button\n                type=\"button\"\n                onClick={doGenerateDescription}\n                disabled={aiLoading}\n                className={`inline-flex items-center gap-2 px-3 py-1.5 rounded-md border ${\n                  aiLoading ? 'bg-gray-100 text-gray-500 border-gray-200' : 'bg-white hover:bg-gray-50 text-gray-800 border-gray-300'\n                }`}\n                title=\"Сгенерировать описание (AI)\"\n              >\n                <Wand2 size={14} />\n                {aiLoading ? 'Генерация…' : 'Сгенерировать (AI)'}\n              </button>\n            </div>\n            <textarea\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              rows={3}\n              value={form.description || ''}\n              onChange={(e) => setForm({ ...form, description: e.target.value })}\n              placeholder=\"Краткое описание коллекции…\"\n            />\n            {aiError && <div className=\"text-xs text-red-600 mt-1\">{aiError}</div>}\n          </div>\n\n          <label className=\"inline-flex items-center gap-2 text-sm text-gray-700\">\n            <input\n              type=\"checkbox\"\n              className=\"rounded border-gray-300\"\n              checked={!!form.pinned}\n              onChange={(e) => setForm({ ...form, pinned: e.target.checked })}\n            />\n            Закрепить коллекцию\n          </label>\n        </div>\n        <div className=\"p-5 border-t border-gray-200 flex justify-end gap-2\">\n          <button className=\"px-4 py-2 rounded-lg font-medium bg-white border border-gray-300 hover:bg-gray-50 text-gray-700\" onClick={onClose}>\n            Отмена\n          </button>\n          <button\n            className=\"px-4 py-2 rounded-lg font-medium bg-blue-600 hover:bg-blue-700 text-white\"\n            onClick={() => onSubmit(form)}\n          >\n            Сохранить\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n/**\n * ProductModal — полная модалка редактирования товара с вкладками и ТД\n * Новое: панель AI для подсказки технологической карты.\n */\nfunction ProductModal({\n  value,\n  initialTab = 'info',\n  onClose,\n  onSubmit,\n  onDelete,\n  onApplyTechCard,\n}: {\n  value: Product\n  initialTab?: 'info' | 'tc'\n  onClose: () => void\n  onSubmit: (val: Product) => void\n  onDelete: () => void\n  onApplyTechCard: (tc: TechCardItem[]) => void\n}) {\n  const [form, setForm] = useState<Product>(value)\n  const [tab, setTab] = useState<'info' | 'tc'>(initialTab)\n\n  /** Материалы для ТД */\n  const materials = utils.read<Material[]>(LS_KEYS.materials, [])\n\n  /** Состояния AI блока */\n  const [aiBrief, setAiBrief] = useState<string>('')\n  const [aiLoading, setAiLoading] = useState<boolean>(false)\n  const [aiError, setAiError] = useState<string | null>(null)\n  const [aiResolved, setAiResolved] = useState<TechCardItem[]>([])\n  const [aiUnresolved, setAiUnresolved] = useState<AiTechCardItem[]>([])\n\n  /** Сопоставление AI-позиций с каталогом материалов */\n  const resolveAiItemsToTechCard = useCallback((items: AiTechCardItem[], catalog: Material[]): { resolved: TechCardItem[]; unresolved: AiTechCardItem[] } => {\n    const byArticle = new Map(catalog.map((m) => [String(m.article || '').trim().toLowerCase(), m]))\n    const byName = new Map(catalog.map((m) => [String(m.name || '').trim().toLowerCase(), m]))\n\n    const resolved: TechCardItem[] = []\n    const unresolved: AiTechCardItem[] = []\n\n    for (const it of items) {\n      const articleKey = String(it.article || '').trim().toLowerCase()\n      const nameKey = String(it.name || '').trim().toLowerCase()\n      let matched: Material | undefined\n\n      if (articleKey) {\n        matched = byArticle.get(articleKey)\n      }\n      // Если не нашли по артикулу — пробуем по имени (строгое совпадение)\n      if (!matched && nameKey) {\n        matched = byName.get(nameKey)\n      }\n      // Доп: если нет строгого, пробуем \"содержит\" по имени (эвристика)\n      if (!matched && nameKey) {\n        matched = catalog.find((m) => String(m.name || '').trim().toLowerCase().includes(nameKey))\n      }\n\n      if (matched) {\n        resolved.push({\n          materialId: matched.id,\n          quantity: Number(it.quantity) || 0,\n          _techCardId: utils.id(),\n        })\n      } else {\n        unresolved.push(it)\n      }\n    }\n\n    return { resolved, unresolved }\n  }, [])\n\n  /** Вызов AI — предложить состав ТД */\n  const doSuggestTechCard = useCallback(async () => {\n    setAiError(null)\n    setAiLoading(true)\n    try {\n      const catalog: MaterialsCatalogItem[] = materials.map((m) => ({\n        name: m.name,\n        article: m.article,\n        unit: m.unit,\n        price: m.price,\n      }))\n\n      const items = await AiService.suggestTechCard({\n        productName: form.name || '',\n        brief: aiBrief || '',\n        typeName: '', // в этой модалке нет справочника типов — оставим пусто\n        finishName: '', // аналогично\n        materialsCatalog: catalog,\n      })\n\n      const { resolved, unresolved } = resolveAiItemsToTechCard(items, materials)\n      setAiResolved(resolved)\n      setAiUnresolved(unresolved)\n    } catch (e: any) {\n      setAiError(e?.message || 'Не удалось получить подсказки по ТД')\n      setAiResolved([])\n      setAiUnresolved([])\n    } finally {\n      setAiLoading(false)\n    }\n  }, [materials, form.name, aiBrief, resolveAiItemsToTechCard])\n\n  /** Применить найденные позиции в текущую форму */\n  const applyResolvedToForm = useCallback(() => {\n    if (!aiResolved.length) return\n    const base = Array.isArray(form.tech_card) ? form.tech_card : []\n    // Сливаем с существующими (по materialId суммируем количество)\n    const map = new Map<string, TechCardItem>()\n    for (const it of base) map.set(it.materialId, it)\n    for (const it of aiResolved) {\n      const exist = map.get(it.materialId)\n      if (exist) {\n        map.set(it.materialId, { ...exist, quantity: (Number(exist.quantity) || 0) + (Number(it.quantity) || 0) })\n      } else {\n        map.set(it.materialId, it)\n      }\n    }\n    const next = Array.from(map.values())\n    setForm({ ...form, tech_card: next })\n    // Очистим результаты AI, чтобы не дублировать повторно\n    setAiResolved([])\n    setAiUnresolved([])\n  }, [aiResolved, form])\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n      onClick={onClose}\n      role=\"dialog\"\n      aria-modal=\"true\"\n    >\n      <div className=\"bg-white rounded-xl w-full max-w-3xl\" onClick={(e) => e.stopPropagation()}>\n        <div className=\"p-5 border-b border-gray-200 flex items-center justify-between\">\n          <div className=\"font-semibold text-gray-900\">{`Редактирование: ${form.name}`}</div>\n          <button className=\"text-gray-500 hover:text-gray-700\" onClick={onClose} title=\"Закрыть\">\n            ✕\n          </button>\n        </div>\n\n        <div className=\"p-5 space-y-6\">\n          {/* Табы */}\n          <div className=\"flex border-b border-gray-200\">\n            <button\n              className={`px-4 py-2 -mb-px border-b-2 ${tab === 'info' ? 'border-blue-600 text-blue-600 font-medium' : 'border-transparent text-gray-600'}`}\n              onClick={() => setTab('info')}\n            >\n              Основная информация\n            </button>\n            <button\n              className={`px-4 py-2 -mb-px border-b-2 ${tab === 'tc' ? 'border-blue-600 text-blue-600 font-medium' : 'border-transparent text-gray-600'}`}\n              onClick={() => setTab('tc')}\n            >\n              Технологическая карта\n            </button>\n          </div>\n\n          {tab === 'info' ? (\n            <form\n              className=\"space-y-4\"\n              onSubmit={(e) => {\n                e.preventDefault()\n                if (!form.name.trim()) return alert('Укажите наименование')\n                if (!form.article.trim()) return alert('Укажите артикул')\n                onSubmit(form)\n              }}\n            >\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Артикул</label>\n                  <input\n                    name=\"article\"\n                    type=\"text\"\n                    value={form.article}\n                    onChange={(e) => setForm({ ...form, article: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"PROD-001\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Наименование</label>\n                  <input\n                    name=\"name\"\n                    type=\"text\"\n                    value={form.name}\n                    onChange={(e) => setForm({ ...form, name: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"Тумба 600 Белая\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Ключевое слово картинки</label>\n                <input\n                  name=\"imageKeyword\"\n                  type=\"text\"\n                  value={form.imageKeyword || ''}\n                  onChange={(e) => setForm({ ...form, imageKeyword: e.target.value })}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"Например: modern furniture\"\n                />\n              </div>\n\n              <div className=\"flex justify-between gap-2 pt-2\">\n                <button\n                  type=\"button\"\n                  className=\"px-4 py-2 rounded-lg font-medium bg-red-600 hover:bg-red-700 text-white\"\n                  onClick={onDelete}\n                >\n                  <Trash2 size={16} className=\"inline mr-1\" />\n                  Удалить\n                </button>\n                <div className=\"flex gap-2\">\n                  <button\n                    type=\"button\"\n                    className=\"px-4 py-2 rounded-lg font-medium bg-white border border-gray-300 hover:bg-gray-50 text-gray-700\"\n                    onClick={onClose}\n                  >\n                    Отмена\n                  </button>\n                  <button\n                    type=\"submit\"\n                    className=\"px-4 py-2 rounded-lg font-medium bg-blue-600 hover:bg-blue-700 text-white\"\n                  >\n                    Сохранить\n                  </button>\n                </div>\n              </div>\n            </form>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Новое: AI помощь по ТД */}\n              <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"font-medium text-blue-900 flex items-center gap-2\">\n                    <Sparkles size={16} />\n                    AI помощь: подсказать состав ТД\n                  </div>\n                </div>\n                <div className=\"mt-2 grid grid-cols-1 md:grid-cols-6 gap-2\">\n                  <div className=\"md:col-span-5\">\n                    <textarea\n                      value={aiBrief}\n                      onChange={(e) => setAiBrief(e.target.value)}\n                      rows={2}\n                      className=\"w-full px-3 py-2 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 bg-white\"\n                      placeholder='Краткое ТЗ (например: \"тумба 600мм, фасады МДФ, 2 дверцы, петли clip-on\")'\n                    />\n                  </div>\n                  <div className=\"md:col-span-1 flex md:block\">\n                    <button\n                      type=\"button\"\n                      onClick={doSuggestTechCard}\n                      disabled={aiLoading}\n                      className={`w-full inline-flex items-center justify-center gap-2 px-3 py-2 rounded-lg ${\n                        aiLoading ? 'bg-blue-300 cursor-not-allowed text-white' : 'bg-blue-600 hover:bg-blue-700 text-white'\n                      }`}\n                      title=\"Получить подсказку состава от AI\"\n                    >\n                      {aiLoading ? 'Запрос…' : 'Предложить'}\n                    </button>\n                  </div>\n                </div>\n\n                {(aiError || aiResolved.length > 0 || aiUnresolved.length > 0) && (\n                  <div className=\"mt-2 rounded-md border border-blue-200 bg-white p-2\">\n                    {aiError && <div className=\"text-sm text-red-600\">{aiError}</div>}\n                    {!aiError && (\n                      <>\n                        <div className=\"text-sm text-gray-800\">\n                          Найдено позиций в каталоге: <span className=\"font-semibold\">{aiResolved.length}</span>\n                          {aiResolved.length > 0 && (\n                            <button\n                              type=\"button\"\n                              onClick={applyResolvedToForm}\n                              className=\"ml-2 inline-flex items-center gap-2 px-2 py-1 rounded-md bg-emerald-600 hover:bg-emerald-700 text-white text-xs\"\n                              title=\"Добавить найденные позиции в текущую техкарту\"\n                            >\n                              Добавить найденные\n                            </button>\n                          )}\n                        </div>\n                        {aiResolved.length > 0 && (\n                          <ul className=\"mt-1 text-xs text-gray-700 list-disc list-inside\">\n                            {aiResolved.slice(0, 5).map((r) => (\n                              <li key={r._techCardId}>{r.materialId} × {r.quantity}</li>\n                            ))}\n                            {aiResolved.length > 5 && <li>… и ещё {aiResolved.length - 5}</li>}\n                          </ul>\n                        )}\n                        {aiUnresolved.length > 0 && (\n                          <div className=\"mt-2\">\n                            <div className=\"text-sm text-gray-800\">Не сопоставлено с каталогом: <span className=\"font-semibold\">{aiUnresolved.length}</span></div>\n                            <ul className=\"mt-1 text-xs text-gray-700 list-disc list-inside\">\n                              {aiUnresolved.slice(0, 5).map((u, idx) => (\n                                <li key={`${u.article || u.name}-${idx}`}>{u.name}{u.article ? ` (${u.article})` : ''} × {u.quantity}</li>\n                              ))}\n                              {aiUnresolved.length > 5 && <li>… и ещё {aiUnresolved.length - 5}</li>}\n                            </ul>\n                            <div className=\"text-xs text-gray-500 mt-1\">Добавьте отсутствующие материалы в разделе “Материалы”, чтобы в следующий раз всё сопоставилось автоматически.</div>\n                          </div>\n                        )}\n                      </>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              <TechCardManager\n                materials={materials}\n                value={form.tech_card || []}\n                onChange={(tc) => setForm({ ...form, tech_card: tc })}\n              />\n              <div className=\"flex justify-end gap-2\">\n                <button\n                  className=\"px-4 py-2 rounded-lg font-medium bg-white border border-gray-300 hover:bg-gray-50 text-gray-700\"\n                  onClick={() => onApplyTechCard(form.tech_card || [])}\n                >\n                  Сохранить ТД\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n/**\n * DnDEditor — модалка редактора коллекции с перетаскиванием\n * Добавлено: фильтр по типу мебели для правой колонки \"Доступные\"\n * Новое: клик по карточке изделия открывает полную модалку товара (вкладка \"ТД\")\n */\nfunction DnDEditor({\n  collection,\n  products,\n  onClose,\n  onApply,\n  onAddProduct,\n  onOpenProduct,\n}: {\n  collection: Collection\n  products: Product[]\n  onClose: () => void\n  onApply: (order: string[]) => void\n  onAddProduct: () => void\n  /** Открыть модалку товара */\n  onOpenProduct: (id: string) => void\n}) {\n  const [order, setOrder] = useState<string[]>(collection.product_order)\n  const [draggingId, setDraggingId] = useState<string | null>(null)\n  const [overId, setOverId] = useState<string | null>(null)\n\n  /** Фильтр по типу мебели для правой колонки */\n  const [kindFilter, setKindFilter] = useState<FurnitureKind | 'all'>('all')\n\n  /** Изделия в коллекции */\n  const inCollection = useMemo(\n    () => order.map((id) => products.find((p) => p.id === id)).filter(Boolean) as Product[],\n    [order, products],\n  )\n\n  /** Все доступные (не в коллекции) */\n  const availableAll = useMemo(() => products.filter((p) => !order.includes(p.id)), [order, products])\n\n  /** Доступные с учётом фильтра типа */\n  const available = useMemo(() => {\n    if (kindFilter === 'all') return availableAll\n    return availableAll.filter((p) => classifyProduct(p) === kindFilter)\n  }, [availableAll, kindFilter])\n\n  const onDragStart = useCallback((id: string) => setDraggingId(id), [])\n  const onDragOverCard = useCallback((e: React.DragEvent) => e.preventDefault(), [])\n\n  const insertAt = (arr: string[], idx: number, val: string) => {\n    const copy = arr.slice()\n    copy.splice(idx, 0, val)\n    return copy\n  }\n\n  const onDropOverItem = useCallback(\n    (targetId: string) => {\n      if (!draggingId || draggingId === targetId) return\n      let next = order.slice().filter((id) => id !== draggingId)\n      const targetIdx = next.indexOf(targetId)\n      next = insertAt(next, targetIdx, draggingId)\n      setOrder(next)\n      setDraggingId(null)\n      setOverId(null)\n    },\n    [draggingId, order],\n  )\n\n  const onDropToListEnd = useCallback(() => {\n    if (!draggingId) return\n    const next = order.filter((id) => id !== draggingId).concat(draggingId)\n    setOrder(next)\n    setDraggingId(null)\n    setOverId(null)\n  }, [draggingId, order])\n\n  const removeFromCollection = useCallback((id: string) => {\n    setOrder((prev) => prev.filter((x) => x !== id))\n  }, [])\n\n  /** Рендер бейджа типа */\n  const KindBadge = ({ p }: { p: Product }) => {\n    const kind = classifyProduct(p)\n    const classes =\n      kind === 'tumbas'\n        ? 'bg-blue-50 text-blue-800 border-blue-200'\n        : kind === 'penals'\n        ? 'bg-emerald-50 text-emerald-800 border-emerald-200'\n        : kind === 'mirrors'\n        ? 'bg-violet-50 text-violet-800 border-violet-200'\n        : 'bg-gray-50 text-gray-700 border-gray-200'\n    const label =\n      kind === 'tumbas' ? 'Тумбы' : kind === 'penals' ? 'Пеналы' : kind === 'mirrors' ? 'Зеркала' : 'Прочее'\n    return <span className={`text-[10px] px-2 py-0.5 rounded border ${classes}`}>{label}</span>\n  }\n\n  // Источники изображений для миниатюр в редакторе\n  const THUMB_WEBP =\n    'https://images.unsplash.com/photo-1586023492125-27b2c045efd7?auto=format&fm=webp&q=70&w=100&h=100&fit=crop&crop=faces,center'\n  const THUMB_FALLBACK =\n    'https://images.unsplash.com/photo-1586023492125-27b2c045efd7?auto=format&q=75&w=100&h=100&fit=crop&crop=faces,center'\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n      onClick={onClose}\n      role=\"dialog\"\n      aria-modal=\"true\"\n    >\n      <div className=\"bg-white rounded-xl w-full max-w-6xl max-h-[90vh] overflow-hidden\" onClick={(e) => e.stopPropagation()}>\n        <div className=\"p-5 border-b border-gray-200 flex items-center justify-between\">\n          <div className=\"font-semibold text-gray-900 flex items-center gap-2\">\n            <GripVertical size={18} className=\"text-blue-600\" />\n            Редактор коллекции — {collection.name}\n          </div>\n          <button className=\"text-gray-500 hover:text-gray-700\" onClick={onClose} title=\"Закрыть\">\n            ✕\n          </button>\n        </div>\n\n        <div className=\"p-5 grid grid-cols-1 lg:grid-cols-2 gap-5 overflow-y-auto\">\n          {/* В коллекции */}\n          <div className=\"border border-gray-200 rounded-xl p-3 bg-gray-50\" onDragOver={onDragOverCard} onDrop={onDropToListEnd}>\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"font-medium text-gray-800\">В коллекции ({inCollection.length})</div>\n            </div>\n            <div className=\"space-y-2 min-h-[120px]\">\n              {inCollection.length === 0 && (\n                <div className=\"text-sm text-gray-500 text-center py-6 border border-dashed border-gray-300 rounded-lg bg-white\">\n                  Перетащите изделия сюда из правой колонки\n                </div>\n              )}\n              {inCollection.map((p) => (\n                <div\n                  key={p.id}\n                  draggable\n                  onDragStart={() => onDragStart(p.id)}\n                  onDragOver={(e) => {\n                    e.preventDefault()\n                    setOverId(p.id)\n                  }}\n                  onDragLeave={() => setOverId(null)}\n                  onDrop={() => onDropOverItem(p.id)}\n                  className={`bg-white border rounded-lg p-2 flex items-center gap-3 transition-all ${\n                    overId === p.id ? 'border-blue-400 shadow-sm' : 'border-gray-200'\n                  }`}\n                  title=\"Перетащите, чтобы изменить порядок\"\n                >\n                  <GripVertical size={16} className=\"text-gray-400 flex-shrink-0 cursor-move\" />\n                  <div\n                    className=\"w-14 h-14 rounded bg-gray-100 overflow-hidden border border-gray-200 flex-shrink-0\"\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      onOpenProduct(p.id)\n                    }}\n                    role=\"button\"\n                    title=\"Открыть карточку товара\"\n                  >\n                    <ProgressiveImage\n                      alt={p.name}\n                      src={THUMB_FALLBACK}\n                      webpSrc={THUMB_WEBP}\n                      className=\"w-full h-full\"\n                      imgClassName=\"object-cover w-full h-full\"\n                      loading=\"lazy\"\n                      decoding=\"async\"\n                    />\n                  </div>\n                  <div\n                    className=\"min-w-0 flex-1 cursor-pointer\"\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      onOpenProduct(p.id)\n                    }}\n                    title=\"Открыть карточку товара\"\n                  >\n                    <div className=\"text-sm font-medium text-gray-900 truncate flex items-center gap-2\">\n                      {p.name}\n                      <KindBadge p={p} />\n                    </div>\n                    <div className=\"text-xs text-gray-500 font-mono\">{p.article}</div>\n                  </div>\n                  <button\n                    className=\"px-2 py-1 rounded bg-white border border-gray-300 hover:bg-gray-50 text-gray-700 text-sm\"\n                    onClick={() => removeFromCollection(p.id)}\n                    title=\"Убрать из коллекции\"\n                  >\n                    Убрать\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Доступные */}\n          <div className=\"border border-gray-200 rounded-xl p-3 bg-gray-50\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"font-medium text-gray-800\">Доступные ({availableAll.length})</div>\n              <button className=\"px-3 py-1.5 rounded-lg font-medium bg-white border border-gray-300 hover:bg-gray-50 text-gray-700\" onClick={onAddProduct}>\n                <Plus size={14} className=\"inline mr-1\" />\n                Добавить изделие\n              </button>\n            </div>\n\n            {/* Фильтр по типу мебели */}\n            <div className=\"mb-2 flex flex-wrap gap-1.5\">\n              {(\n                [\n                  ['all', 'Все'],\n                  ['tumbas', 'Тумбы'],\n                  ['penals', 'Пеналы'],\n                  ['mirrors', 'Зеркала'],\n                  ['other', 'Прочее'],\n                ] as Array<[FurnitureKind | 'all', string]>\n              ).map(([key, label]) => {\n                const active = kindFilter === key\n                return (\n                  <button\n                    key={key}\n                    className={`px-2.5 py-1 text-xs rounded-full border ${\n                      active ? 'bg-blue-600 text-white border-blue-600' : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'\n                    }`}\n                    onClick={() => setKindFilter(key as FurnitureKind | 'all')}\n                  >\n                    {label}\n                  </button>\n                )\n              })}\n            </div>\n\n            <div className=\"grid sm:grid-cols-2 gap-2\">\n              {available.map((p) => (\n                <div\n                  key={p.id}\n                  draggable\n                  onDragStart={() => onDragStart(p.id)}\n                  className=\"bg-white border border-gray-200 rounded-lg p-2 flex items-center gap-3 cursor-move hover:shadow-sm\"\n                  title=\"Перетащите в левую колонку\"\n                >\n                  <GripVertical size={16} className=\"text-gray-300 flex-shrink-0\" />\n                  <div\n                    className=\"w-12 h-12 rounded bg-gray-100 overflow-hidden border border-gray-200 flex-shrink-0\"\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      onOpenProduct(p.id)\n                    }}\n                    role=\"button\"\n                    title=\"Открыть карточку товара\"\n                  >\n                    <ProgressiveImage\n                      alt={p.name}\n                      src={THUMB_FALLBACK}\n                      webpSrc={THUMB_WEBP}\n                      className=\"w-full h-full\"\n                      imgClassName=\"object-cover w-full h-full\"\n                      loading=\"lazy\"\n                      decoding=\"async\"\n                    />\n                  </div>\n                  <div\n                    className=\"min-w-0 cursor-pointer\"\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      onOpenProduct(p.id)\n                    }}\n                    title=\"Открыть карточку товара\"\n                  >\n                    <div className=\"text-sm font-medium text-gray-900 truncate flex items-center gap-2\">\n                      {p.name}\n                      <KindBadge p={p} />\n                    </div>\n                    <div className=\"text-xs text-gray-500 font-mono\">{p.article}</div>\n                  </div>\n                </div>\n              ))}\n              {available.length === 0 && (\n                <div className=\"text-sm text-gray-500 text-center py-6 border border-dashed border-gray-300 rounded-lg bg-white col-span-full\">\n                  Нет изделий для выбранного типа\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-5 border-t border-gray-200 flex justify-end gap-2\">\n          <button className=\"px-4 py-2 rounded-lg font-medium bg-white border border-gray-300 hover:bg-gray-50 text-gray-700\" onClick={onClose}>\n            Отмена\n          </button>\n          <button className=\"px-4 py-2 rounded-lg font-medium bg-blue-600 hover:bg-blue-700 text-white\" onClick={() => onApply(order)}>\n            Применить изменения\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "lines": 1359,
      "size": 56077,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.4045187+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/progress.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Progress = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as ProgressPrimitive from \"@radix-ui/react-progress\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Progress }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
      "lines": 29,
      "size": 792,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2645889+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/hooks/useLocaleFormat.ts": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "function langToLocale(lang: string): string {",
          "const l = (lang || 'ru').toLowerCase()",
          "export function useLocaleFormat(defaultCurrency: string = 'KGS') {",
          "const locale = useMemo(() => langToLocale(i18n.language || 'ru'), [i18n.language])",
          "const formatNumber = (n: number, opts?: Intl.NumberFormatOptions) => {",
          "const formatCurrency = (amount: number, currency: string = defaultCurrency, opts?: Intl.NumberFormatOptions) => {",
          "const formatDate = (d: string | Date, opts?: Intl.DateTimeFormatOptions) => {"
        ],
        "interfaces": [],
        "hasJSX": false,
        "stats": {
          "componentsCount": 7,
          "typesCount": 0,
          "hooksCount": 3,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 4
        },
        "imports": [
          "import { useMemo } from 'react'",
          "import i18n from '../i18n'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function langToLocale(lang: string): string {",
          "const formatNumber = (n: number, opts?: Intl.NumberFormatOptions) => {",
          "const formatCurrency = (amount: number, currency: string = defaultCurrency, opts?: Intl.NumberFormatOptions) => {",
          "const formatDate = (d: string | Date, opts?: Intl.DateTimeFormatOptions) => {"
        ],
        "exports": [
          "export function useLocaleFormat(defaultCurrency: string = 'KGS') {"
        ],
        "hooks": [
          "import { useMemo } from 'react'",
          "export function useLocaleFormat(defaultCurrency: string = 'KGS') {",
          "const locale = useMemo(() => langToLocale(i18n.language || 'ru'), [i18n.language])"
        ]
      },
      "content": "/**\n * useLocaleFormat — универсальное форматирование чисел/дат/валют по текущему языку i18n\n */\n\nimport { useMemo } from 'react'\nimport i18n from '../i18n'\n\n/** Соответствие языка i18n -> системная локаль */\nfunction langToLocale(lang: string): string {\n  const l = (lang || 'ru').toLowerCase()\n  if (l.startsWith('ky')) return 'ky-KG'\n  if (l.startsWith('en')) return 'en-US'\n  return 'ru-RU'\n}\n\n/**\n * Хук форматирования\n * @param defaultCurrency Валюта по умолчанию (например, 'KGS')\n */\nexport function useLocaleFormat(defaultCurrency: string = 'KGS') {\n  const locale = useMemo(() => langToLocale(i18n.language || 'ru'), [i18n.language])\n\n  /** Формат числа без валюты */\n  const formatNumber = (n: number, opts?: Intl.NumberFormatOptions) => {\n    try {\n      return new Intl.NumberFormat(locale, opts).format(n ?? 0)\n    } catch {\n      return String(n ?? 0)\n    }\n  }\n\n  /** Формат валюты */\n  const formatCurrency = (amount: number, currency: string = defaultCurrency, opts?: Intl.NumberFormatOptions) => {\n    try {\n      return new Intl.NumberFormat(locale, {\n        style: 'currency',\n        currency,\n        minimumFractionDigits: 2,\n        ...opts,\n      }).format(amount ?? 0)\n    } catch {\n      // Фолбэк без локали\n      return `${(amount ?? 0).toFixed(2)} ${currency}`\n    }\n  }\n\n  /** Формат даты */\n  const formatDate = (d: string | Date, opts?: Intl.DateTimeFormatOptions) => {\n    try {\n      return new Intl.DateTimeFormat(locale, {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        ...opts,\n      }).format(new Date(d))\n    } catch {\n      return new Date(d).toLocaleDateString()\n    }\n  }\n\n  return { locale, formatNumber, formatCurrency, formatDate }\n}\n",
      "lines": 63,
      "size": 1903,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.3814657+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/main.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const root = createRoot(document.getElementById('app')!)"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 0,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import { createRoot } from 'react-dom/client'",
          "import './shadcn.css'",
          "import App from './App'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [],
        "hooks": []
      },
      "content": "import { createRoot } from 'react-dom/client'\nimport './shadcn.css'\nimport App from './App'\n\n// Отключаем EventSource в production\nif (typeof EventSource !== 'undefined' && location.hostname !== 'localhost') {\n  // Блокируем EventSource в production\n  window.EventSource = undefined as any;\n}\n\nconst root = createRoot(document.getElementById('app')!)\nroot.render(<App />)\n",
      "lines": 13,
      "size": 392,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.1938479+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/common/ThemeToggle.tsx": {
      "analysis": {
        "types": [
          "export type AppTheme = 'light' | 'dark' | 'system'"
        ],
        "classes": [],
        "components": [
          "function applyTheme(theme: AppTheme) {",
          "const root = document.documentElement",
          "const systemPrefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches",
          "const isDark = theme === 'dark' || (theme === 'system' && systemPrefersDark)",
          "export function applyStoredTheme() {",
          "const saved = (localStorage.getItem('theme') as AppTheme | null) || 'system'",
          "export default function ThemeToggle(): React.ReactElement {",
          "const mm = window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)') : null",
          "const handler = () => {",
          "const t = (localStorage.getItem('theme') as AppTheme | null) || 'system'",
          "const nextTheme = useCallback(() => {",
          "const Icon = useMemo(() => {",
          "const title = useMemo(() => {"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 13,
          "typesCount": 1,
          "hooksCount": 7,
          "interfacesCount": 0,
          "exportsCount": 3,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 2
        },
        "imports": [
          "import React, { useCallback, useEffect, useMemo, useState } from 'react'",
          "import { Moon, SunMedium, Monitor } from 'lucide-react'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function applyTheme(theme: AppTheme) {",
          "const handler = () => {"
        ],
        "exports": [
          "export type AppTheme = 'light' | 'dark' | 'system'",
          "export function applyStoredTheme() {",
          "export default function ThemeToggle(): React.ReactElement {"
        ],
        "hooks": [
          "import React, { useCallback, useEffect, useMemo, useState } from 'react'",
          "const [theme, setTheme] = useState<AppTheme>(() => {",
          "useEffect(() => {",
          "useEffect(() => {",
          "const nextTheme = useCallback(() => {",
          "const Icon = useMemo(() => {",
          "const title = useMemo(() => {"
        ]
      },
      "content": "/**\n * ThemeToggle — переключатель темы (Светлая / Темная / Системная).\n * Применение: добавляет/убирает класс \"dark\" у корня документа. Сохраняет выбор в localStorage (theme).\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { Moon, SunMedium, Monitor } from 'lucide-react'\n\n/** Тип темы */\nexport type AppTheme = 'light' | 'dark' | 'system'\n\n/**\n * Применить тему к documentElement\n */\nfunction applyTheme(theme: AppTheme) {\n  const root = document.documentElement\n  const systemPrefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\n  const isDark = theme === 'dark' || (theme === 'system' && systemPrefersDark)\n  root.classList.toggle('dark', isDark)\n}\n\n/**\n * Применить сохранённую тему при загрузке приложения (однократно)\n */\nexport function applyStoredTheme() {\n  try {\n    const saved = (localStorage.getItem('theme') as AppTheme | null) || 'system'\n    applyTheme(saved)\n  } catch {\n    // ignore\n  }\n}\n\n/**\n * ThemeToggle — кнопка цикла тем или мини-меню (здесь цикл).\n */\nexport default function ThemeToggle(): React.ReactElement {\n  const [theme, setTheme] = useState<AppTheme>(() => {\n    try {\n      return (localStorage.getItem('theme') as AppTheme | null) || 'system'\n    } catch {\n      return 'system'\n    }\n  })\n\n  /** Подписка на системную тему, если выбран режим \"system\" */\n  useEffect(() => {\n    const mm = window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)') : null\n    const handler = () => {\n      const t = (localStorage.getItem('theme') as AppTheme | null) || 'system'\n      if (t === 'system') applyTheme('system')\n    }\n    mm?.addEventListener?.('change', handler)\n    return () => {\n      mm?.removeEventListener?.('change', handler)\n    }\n  }, [])\n\n  /** Применяем текущую тему */\n  useEffect(() => {\n    applyTheme(theme)\n    try {\n      localStorage.setItem('theme', theme)\n    } catch {\n      // ignore\n    }\n  }, [theme])\n\n  /** Следующая тема по кругу */\n  const nextTheme = useCallback(() => {\n    setTheme((prev) => (prev === 'light' ? 'dark' : prev === 'dark' ? 'system' : 'light'))\n  }, [])\n\n  /** Иконка согласно теме */\n  const Icon = useMemo(() => {\n    return theme === 'light' ? SunMedium : theme === 'dark' ? Moon : Monitor\n  }, [theme])\n\n  /** Подсказка title */\n  const title = useMemo(() => {\n    return theme === 'light' ? 'Тема: Светлая' : theme === 'dark' ? 'Тема: Темная' : 'Тема: Системная'\n  }, [theme])\n\n  return (\n    <button\n      type=\"button\"\n      onClick={nextTheme}\n      className=\"inline-flex items-center justify-center w-10 h-10 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-700\"\n      title={title}\n      aria-label={title}\n    >\n      <Icon size={18} />\n    </button>\n  )\n}\n",
      "lines": 95,
      "size": 3114,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3588924+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/textarea.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Textarea = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Textarea }"
        ],
        "hooks": []
      },
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
      "lines": 23,
      "size": 649,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2942567+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/lib/utils.ts": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export function cn(...inputs: ClassValue[]) {"
        ],
        "interfaces": [],
        "hasJSX": false,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import { clsx, type ClassValue } from \"clsx\"",
          "import { twMerge } from \"tailwind-merge\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export function cn(...inputs: ClassValue[]) {"
        ],
        "hooks": []
      },
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "lines": 7,
      "size": 166,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.3859680+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/chart.tsx": {
      "analysis": {
        "types": [
          "export type ChartConfig = {",
          "type ChartContextProps = {"
        ],
        "classes": [],
        "components": [
          "const THEMES = { light: \"\", dark: \".dark\" } as const",
          "const ChartContext = React.createContext<ChartContextProps | null>(null)",
          "function useChart() {",
          "const context = React.useContext(ChartContext)",
          "const ChartContainer = React.forwardRef<",
          "const uniqueId = React.useId()",
          "const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`",
          "const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {",
          "const colorConfig = Object.entries(config).filter(",
          "const color =",
          "const ChartTooltip = RechartsPrimitive.Tooltip",
          "const ChartTooltipContent = React.forwardRef<",
          "const tooltipLabel = React.useMemo(() => {",
          "const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`",
          "const itemConfig = getPayloadConfigFromPayload(config, item, key)",
          "const value =",
          "const nestLabel = payload.length === 1 && indicator !== \"dot\"",
          "const key = `${nameKey || item.name || item.dataKey || \"value\"}`",
          "const itemConfig = getPayloadConfigFromPayload(config, item, key)",
          "const indicatorColor = color || item.payload.fill || item.color",
          "const ChartLegend = RechartsPrimitive.Legend",
          "const ChartLegendContent = React.forwardRef<",
          "const key = `${nameKey || item.dataKey || \"value\"}`",
          "const itemConfig = getPayloadConfigFromPayload(config, item, key)",
          "function getPayloadConfigFromPayload(",
          "const payloadPayload ="
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 26,
          "typesCount": 2,
          "hooksCount": 7,
          "interfacesCount": 0,
          "exportsCount": 2,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 3
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as RechartsPrimitive from \"recharts\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [
          "function useChart() {",
          "const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {",
          "function getPayloadConfigFromPayload("
        ],
        "exports": [
          "export type ChartConfig = {",
          "export {"
        ],
        "hooks": [
          "function useChart() {",
          "const context = React.useContext(ChartContext)",
          "throw new Error(\"useChart must be used within a <ChartContainer />\")",
          "const uniqueId = React.useId()",
          "const { config } = useChart()",
          "const tooltipLabel = React.useMemo(() => {",
          "const { config } = useChart()"
        ]
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
      "lines": 366,
      "size": 10481,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2314911+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/common/ProgressiveImage.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "function isLikelyWebP(url?: string): boolean {",
          "const u = url.toLowerCase()",
          "const ProgressiveImage = memo(function ProgressiveImage({",
          "function handleLoad(): void {"
        ],
        "interfaces": [
          "export interface ProgressiveImageProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 4,
          "typesCount": 0,
          "hooksCount": 2,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 2
        },
        "imports": [
          "import React, { memo, useState } from 'react'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function isLikelyWebP(url?: string): boolean {",
          "function handleLoad(): void {"
        ],
        "exports": [
          "export interface ProgressiveImageProps {",
          "export default ProgressiveImage"
        ],
        "hooks": [
          "import React, { memo, useState } from 'react'",
          "const [loaded, setLoaded] = useState(false)"
        ]
      },
      "content": "/**\n * ProgressiveImage — универсальный компонент изображения\n * Поддерживает picture с WebP (если передан webpSrc), lazy/eager, sizes\n * и плавное появление с \"blur-up\" скелетоном без внешних зависимостей.\n */\n\nimport React, { memo, useState } from 'react'\n\n/**\n * Пропсы ProgressiveImage\n */\nexport interface ProgressiveImageProps {\n  /** Альтернативный текст */\n  alt: string\n  /** Базовый источник (jpg/png/др.) */\n  src: string\n  /** Источник WebP (опционально; используется в picture) */\n  webpSrc?: string\n  /** Классы корневого контейнера */\n  className?: string\n  /** Классы самого тега img */\n  imgClassName?: string\n  /** Атрибут sizes для адаптивной загрузки */\n  sizes?: string\n  /** Режим загрузки */\n  loading?: 'eager' | 'lazy'\n  /** Режим декодирования */\n  decoding?: 'async' | 'auto' | 'sync'\n  /** Callback загрузки */\n  onLoad?: () => void\n}\n\n/**\n * Локальный утилитарный предикат — выглядит ли строка как webp URL\n */\nfunction isLikelyWebP(url?: string): boolean {\n  if (!url) return false\n  const u = url.toLowerCase()\n  return u.endsWith('.webp') || u.includes('fm=webp') || u.includes('format=webp')\n}\n\n/**\n * ProgressiveImage — универсальный компонент\n */\nconst ProgressiveImage = memo(function ProgressiveImage({\n  alt,\n  src,\n  webpSrc,\n  className = '',\n  imgClassName = '',\n  sizes,\n  loading = 'lazy',\n  decoding = 'async',\n  onLoad,\n}: ProgressiveImageProps): React.ReactElement {\n  const [loaded, setLoaded] = useState(false)\n\n  /** Обработчик завершения загрузки */\n  function handleLoad(): void {\n    setLoaded(true)\n    onLoad?.()\n  }\n\n  return (\n    <div\n      className={`relative overflow-hidden ${className}`}\n      aria-busy={!loaded}\n      aria-live=\"polite\"\n    >\n      {/* Скелетон/шиммер пока не загрузилось */}\n      {!loaded && (\n        <div className=\"absolute inset-0 animate-pulse bg-gradient-to-br from-gray-100 via-gray-50 to-gray-100\" />\n      )}\n\n      {/* Изображение: picture, если есть валидный webpSrc */}\n      {webpSrc && isLikelyWebP(webpSrc) ? (\n        <picture>\n          <source type=\"image/webp\" srcSet={webpSrc} />\n          <img\n            src={src}\n            alt={alt}\n            className={`transition-all duration-500 ease-out ${loaded ? 'opacity-100 blur-0 scale-100' : 'opacity-0 blur-sm scale-105'} ${imgClassName}`}\n            sizes={sizes}\n            loading={loading}\n            decoding={decoding}\n            onLoad={handleLoad}\n          />\n        </picture>\n      ) : (\n        <img\n          src={src}\n          alt={alt}\n          className={`transition-all duration-500 ease-out ${loaded ? 'opacity-100 blur-0 scale-100' : 'opacity-0 blur-sm scale-105'} ${imgClassName}`}\n          sizes={sizes}\n          loading={loading}\n          decoding={decoding}\n          onLoad={handleLoad}\n        />\n      )}\n    </div>\n  )\n})\n\nexport default ProgressiveImage\n",
      "lines": 105,
      "size": 3298,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3558863+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/common/LanguageSwitcher.tsx": {
      "analysis": {
        "types": [
          "type Lang = 'ru' | 'ky' | 'en'"
        ],
        "classes": [],
        "components": [
          "export default function LanguageSwitcher(): React.ReactElement {",
          "const current = (i18n.language as Lang) || 'ru'",
          "const choose = useCallback(",
          "const title = useMemo(() => 'Выбор языка: RU / KY / EN', [])",
          "const active = l.code === current"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 5,
          "typesCount": 1,
          "hooksCount": 5,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React, { useCallback, useMemo } from 'react'",
          "import { useTranslation } from 'react-i18next'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export default function LanguageSwitcher(): React.ReactElement {"
        ],
        "hooks": [
          "import React, { useCallback, useMemo } from 'react'",
          "import { useTranslation } from 'react-i18next'",
          "const { i18n } = useTranslation()",
          "const choose = useCallback(",
          "const title = useMemo(() => 'Выбор языка: RU / KY / EN', [])"
        ]
      },
      "content": "/**\n * LanguageSwitcher — простой переключатель RU | KY | EN.\n * Сохраняет выбор в localStorage (app_lang), переключает i18next.\n */\nimport React, { useCallback, useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\n\n/** Поддерживаемые языки */\ntype Lang = 'ru' | 'ky' | 'en'\n\n/** Карточка языка для рендера */\nconst LANGS: Array<{ code: Lang; label: string }> = [\n  { code: 'ru', label: 'RU' },\n  { code: 'ky', label: 'KY' },\n  { code: 'en', label: 'EN' },\n]\n\n/**\n * LanguageSwitcher — компактный сегментный переключатель\n */\nexport default function LanguageSwitcher(): React.ReactElement {\n  const { i18n } = useTranslation()\n  const current = (i18n.language as Lang) || 'ru'\n\n  /** Выбор языка */\n  const choose = useCallback(\n    (code: Lang) => {\n      if (!code || code === current) return\n      i18n.changeLanguage(code)\n      try {\n        localStorage.setItem('app_lang', code)\n      } catch {\n        // ignore\n      }\n    },\n    [current, i18n],\n  )\n\n  /** ARIA-лейбл */\n  const title = useMemo(() => 'Выбор языка: RU / KY / EN', [])\n\n  return (\n    <div className=\"inline-flex items-center gap-1 p-1 rounded-lg border border-gray-300 bg-white\" role=\"group\" aria-label={title} title={title}>\n      {LANGS.map((l) => {\n        const active = l.code === current\n        return (\n          <button\n            key={l.code}\n            type=\"button\"\n            onClick={() => choose(l.code)}\n            className={`px-2.5 py-1 text-xs rounded-md ${active ? 'bg-blue-600 text-white' : 'text-gray-700 hover:bg-gray-50'}`}\n            aria-pressed={active}\n          >\n            {l.label}\n          </button>\n        )\n      })}\n    </div>\n  )\n}\n",
      "lines": 61,
      "size": 1820,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3608940+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/aspect-ratio.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const AspectRatio = AspectRatioPrimitive.Root"
        ],
        "interfaces": [],
        "hasJSX": false,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { AspectRatio }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
      "lines": 8,
      "size": 154,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2148949+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/collapsible.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Collapsible = CollapsiblePrimitive.Root",
          "const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger",
          "const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent"
        ],
        "interfaces": [],
        "hasJSX": false,
        "stats": {
          "componentsCount": 3,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Collapsible, CollapsibleTrigger, CollapsibleContent }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
      "lines": 12,
      "size": 329,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2344887+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/collections/CollectionStatsBar.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export default function CollectionStatsBar({",
          "const items = ["
        ],
        "interfaces": [
          "export interface CollectionStatsBarProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 2,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React from 'react'",
          "import { Layers, FolderOpen, Archive } from 'lucide-react'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface CollectionStatsBarProps {",
          "export default function CollectionStatsBar({"
        ],
        "hooks": []
      },
      "content": "/**\n * CollectionStatsBar — сводка по коллекциям и изделиям\n * Отображает три метрики: всего коллекций, всего изделий, архивных коллекций.\n */\n\nimport React from 'react'\nimport { Layers, FolderOpen, Archive } from 'lucide-react'\n\n/**\n * Пропсы сводки\n */\nexport interface CollectionStatsBarProps {\n  /** Количество коллекций */\n  collectionsCount: number\n  /** Количество всех изделий (уникальных) */\n  productsCount: number\n  /** Количество архивных коллекций */\n  archivedCount: number\n}\n\n/**\n * Колода карточек статистики\n */\nexport default function CollectionStatsBar({\n  collectionsCount,\n  productsCount,\n  archivedCount,\n}: CollectionStatsBarProps): React.ReactElement {\n  const items = [\n    {\n      icon: <FolderOpen size={18} className=\"text-blue-600\" />,\n      label: 'Коллекций',\n      value: collectionsCount,\n      ring: 'ring-blue-100',\n      bg: 'bg-blue-50/60',\n      text: 'text-blue-900',\n    },\n    {\n      icon: <Layers size={18} className=\"text-emerald-600\" />,\n      label: 'Изделий',\n      value: productsCount,\n      ring: 'ring-emerald-100',\n      bg: 'bg-emerald-50/60',\n      text: 'text-emerald-900',\n    },\n    {\n      icon: <Archive size={18} className=\"text-gray-600\" />,\n      label: 'Архивных',\n      value: archivedCount,\n      ring: 'ring-gray-100',\n      bg: 'bg-gray-50/60',\n      text: 'text-gray-900',\n    },\n  ]\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3\">\n      {items.map((it) => (\n        <div\n          key={it.label}\n          className={`flex items-center gap-3 rounded-xl border border-gray-200 px-4 py-3 bg-white`}\n        >\n          <div className={`p-2 rounded-lg ${it.bg} ${it.ring}`}>{it.icon}</div>\n          <div className=\"min-w-0\">\n            <div className=\"text-xs text-gray-500\">{it.label}</div>\n            <div className={`text-lg font-semibold ${it.text}`}>{it.value}</div>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n",
      "lines": 73,
      "size": 2154,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3102893+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/tabs.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Tabs = TabsPrimitive.Root",
          "const TabsList = React.forwardRef<",
          "const TabsTrigger = React.forwardRef<",
          "const TabsContent = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 4,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as TabsPrimitive from \"@radix-ui/react-tabs\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Tabs, TabsList, TabsTrigger, TabsContent }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "lines": 56,
      "size": 1891,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2922590+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/input-otp.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const InputOTP = React.forwardRef<",
          "const InputOTPGroup = React.forwardRef<",
          "const InputOTPSlot = React.forwardRef<",
          "const inputOTPContext = React.useContext(OTPInputContext)",
          "const InputOTPSeparator = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 5,
          "typesCount": 0,
          "hooksCount": 1,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import { OTPInput, OTPInputContext } from \"input-otp\"",
          "import { Minus } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }"
        ],
        "hooks": [
          "const inputOTPContext = React.useContext(OTPInputContext)"
        ]
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
      "lines": 72,
      "size": 2157,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2505257+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/badge.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const badgeVariants = cva(",
          "function Badge({ className, variant, ...props }: BadgeProps) {"
        ],
        "interfaces": [
          "export interface BadgeProps"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 2,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [
          "import * as React from \"react\"",
          "import { cva, type VariantProps } from \"class-variance-authority\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [
          "function Badge({ className, variant, ...props }: BadgeProps) {"
        ],
        "exports": [
          "export interface BadgeProps",
          "export { Badge, badgeVariants }"
        ],
        "hooks": []
      },
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
      "lines": 37,
      "size": 1140,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2194123+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/switch.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Switch = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as SwitchPrimitives from \"@radix-ui/react-switch\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Switch }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
      "lines": 30,
      "size": 1162,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2882573+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/button.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const buttonVariants = cva(",
          "const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(",
          "const Comp = asChild ? Slot : \"button\""
        ],
        "interfaces": [
          "export interface ButtonProps"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 3,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import { Slot } from \"@radix-ui/react-slot\"",
          "import { cva, type VariantProps } from \"class-variance-authority\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface ButtonProps",
          "export { Button, buttonVariants }"
        ],
        "hooks": []
      },
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"text-primary border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"text-primary hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
      "lines": 58,
      "size": 1928,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2234166+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/home/SystemMetricsPanel.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "function MetricCard({",
          "const toneCls =",
          "export default function SystemMetricsPanel({ metrics }: SystemMetricsPanelProps): React.ReactElement {",
          "const health = metrics.systemHealth",
          "const HealthIcon = health === 'warning' || health === 'critical' ? AlertCircle : CheckCircle"
        ],
        "interfaces": [
          "export interface SystemMetricsPanelProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 5,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [
          "import React from 'react'",
          "import { Grid2X2, Package, Activity, CheckCircle, AlertCircle } from 'lucide-react'",
          "import Card from '../common/Card'",
          "import type { SystemMetrics } from '../../services/analytics'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function MetricCard({"
        ],
        "exports": [
          "export interface SystemMetricsPanelProps {",
          "export default function SystemMetricsPanel({ metrics }: SystemMetricsPanelProps): React.ReactElement {"
        ],
        "hooks": []
      },
      "content": "/**\n * SystemMetricsPanel — виджет ключевых метрик системы\n * Показывает четыре карточки: коллекции, изделия, операции за сегодня и аптайм.\n */\n\nimport React from 'react'\nimport { Grid2X2, Package, Activity, CheckCircle, AlertCircle } from 'lucide-react'\nimport Card from '../common/Card'\nimport type { SystemMetrics } from '../../services/analytics'\n\n/**\n * Пропсы панели метрик\n */\nexport interface SystemMetricsPanelProps {\n  /** Набор метрик */\n  metrics: SystemMetrics\n}\n\n/**\n * Карточка метрики (внутренняя)\n */\nfunction MetricCard({\n  title,\n  value,\n  icon,\n  tone = 'default',\n}: {\n  title: string\n  value: React.ReactNode\n  icon: React.ReactNode\n  tone?: 'default' | 'success' | 'warning'\n}) {\n  const toneCls =\n    tone === 'success'\n      ? 'bg-green-50 border-green-200'\n      : tone === 'warning'\n      ? 'bg-amber-50 border-amber-200'\n      : 'bg-white border-gray-200'\n\n  return (\n    <Card className={`p-4 ${toneCls}`}>\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <div className=\"text-sm text-gray-600\">{title}</div>\n          <div className=\"text-2xl font-bold text-gray-900\">{value}</div>\n        </div>\n        <div className=\"text-gray-500\">{icon}</div>\n      </div>\n    </Card>\n  )\n}\n\n/**\n * SystemMetricsPanel — основной компонент\n */\nexport default function SystemMetricsPanel({ metrics }: SystemMetricsPanelProps): React.ReactElement {\n  const health = metrics.systemHealth\n  const HealthIcon = health === 'warning' || health === 'critical' ? AlertCircle : CheckCircle\n  const healthTone: 'success' | 'warning' = health === 'warning' || health === 'critical' ? 'warning' : 'success'\n\n  return (\n    <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3\">\n      <MetricCard title=\"Коллекции\" value={metrics.totalCollections} icon={<Grid2X2 size={22} className=\"text-blue-600\" />} />\n      <MetricCard title=\"Изделия\" value={metrics.totalProducts} icon={<Package size={22} className=\"text-emerald-600\" />} />\n      <MetricCard title=\"Операции (24ч)\" value={metrics.todayOperations} icon={<Activity size={22} className=\"text-violet-600\" />} />\n      <MetricCard\n        title=\"Доступность\"\n        value={`${metrics.uptime}%`}\n        icon={<HealthIcon size={22} className={healthTone === 'success' ? 'text-green-600' : 'text-amber-600'} />}\n        tone={healthTone}\n      />\n    </div>\n  )\n}\n",
      "lines": 75,
      "size": 2556,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3247985+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/table.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Table = React.forwardRef<",
          "const TableHeader = React.forwardRef<",
          "const TableBody = React.forwardRef<",
          "const TableFooter = React.forwardRef<",
          "const TableRow = React.forwardRef<",
          "const TableHead = React.forwardRef<",
          "const TableCell = React.forwardRef<",
          "const TableCaption = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 8,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export {"
        ],
        "hooks": []
      },
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
      "lines": 121,
      "size": 2859,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2902497+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/App.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export default function App(): React.ReactElement {"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 15,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React from 'react'",
          "import { HashRouter, Route, Routes } from 'react-router'",
          "import AppShell from './layouts/AppShell'",
          "import HomePage from './pages/Home'",
          "import CollectionsPage from './pages/Collections'",
          "import ProductsPage from './pages/Products'",
          "import MaterialsPage from './pages/Materials'",
          "import PriceListPage from './pages/PriceList'",
          "import SettingsPage from './pages/Settings'",
          "import JournalPage from './pages/Journal'",
          "import SupabaseDebugPage from './pages/SupabaseDebug' // Новая страница отладки Supabase",
          "import './i18n'",
          "import './theme'",
          "import QuickPrefsDock from './components/common/QuickPrefsDock'",
          "import ToasterProvider from './components/common/ToasterProvider'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export default function App(): React.ReactElement {"
        ],
        "hooks": []
      },
      "content": "/**\n * Корневое приложение WASSER PRO\n * Маршрутизация с общим AppShell (боковая панель + шапка) и контентом страниц.\n * Инициализация i18n и темы (light/dark/system) + плавающая панель предпочтений.\n * Дополнено: глобальный ToasterProvider для тост‑уведомлений.\n */\n\nimport React from 'react'\nimport { HashRouter, Route, Routes } from 'react-router'\nimport AppShell from './layouts/AppShell'\nimport HomePage from './pages/Home'\nimport CollectionsPage from './pages/Collections'\nimport ProductsPage from './pages/Products'\nimport MaterialsPage from './pages/Materials'\nimport PriceListPage from './pages/PriceList'\nimport SettingsPage from './pages/Settings'\nimport JournalPage from './pages/Journal'\nimport SupabaseDebugPage from './pages/SupabaseDebug' // Новая страница отладки Supabase\n\n// Инициализация i18n (однократно)\nimport './i18n'\n// Инициализация темы (однократно)\nimport './theme'\n\n// Плавающая панель предпочтений (язык/тема)\nimport QuickPrefsDock from './components/common/QuickPrefsDock'\n// Глобальный тост‑провайдер\nimport ToasterProvider from './components/common/ToasterProvider'\n\n/**\n * App — корневой компонент с layout-маршрутом\n */\nexport default function App(): React.ReactElement {\n  return (\n    <HashRouter>\n      <Routes>\n        {/* Общий layout */}\n        <Route path=\"/\" element={<AppShell />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"collections\" element={<CollectionsPage />} />\n          <Route path=\"products\" element={<ProductsPage />} />\n          <Route path=\"materials\" element={<MaterialsPage />} />\n          <Route path=\"pricelist\" element={<PriceListPage />} />\n          <Route path=\"settings\" element={<SettingsPage />} />\n          <Route path=\"journal\" element={<JournalPage />} />\n          {/* Новое: отладочная страница Supabase */}\n          <Route path=\"dev\" element={<SupabaseDebugPage />} />\n          {/* Fallback внутрь layout */}\n          <Route path=\"*\" element={<HomePage />} />\n        </Route>\n      </Routes>\n\n      {/* Глобальная панель пользовательских предпочтений и тосты */}\n      <QuickPrefsDock />\n      <ToasterProvider />\n    </HashRouter>\n  )\n}\n",
      "lines": 59,
      "size": 2550,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.1918414+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/collections/CollectionsFilters.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export default function CollectionsFilters({",
          "const active = groupFilter === g"
        ],
        "interfaces": [
          "export interface CollectionsFiltersProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 2,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React from 'react'",
          "import { Search } from 'lucide-react'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface CollectionsFiltersProps {",
          "export default function CollectionsFilters({"
        ],
        "hooks": []
      },
      "content": "/**\n * CollectionsFilters — панель фильтров для страницы \"Коллекции\"\n * Содержит поиск, выбор группы, переключатель \"архивные\" и чипы групп.\n */\n\nimport React from 'react'\nimport { Search } from 'lucide-react'\n\n/**\n * Пропсы панели фильтров\n */\nexport interface CollectionsFiltersProps {\n  /** Текущее значение поиска */\n  search: string\n  /** Обновление поиска */\n  onSearchChange: (v: string) => void\n  /** Список групп */\n  groups: string[]\n  /** Выбранная группа */\n  groupFilter: string\n  /** Изменение фильтра группы */\n  onGroupChange: (v: string) => void\n  /** Показ архивных */\n  showArchived: boolean\n  /** Изменение флага архивных */\n  onToggleArchived: (v: boolean) => void\n  /** Сброс всех фильтров */\n  onReset: () => void\n}\n\n/**\n * Компонент панели фильтров\n */\nexport default function CollectionsFilters({\n  search,\n  onSearchChange,\n  groups,\n  groupFilter,\n  onGroupChange,\n  showArchived,\n  onToggleArchived,\n  onReset,\n}: CollectionsFiltersProps): React.ReactElement {\n  return (\n    <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n      {/* Верхняя строка фильтров */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3\">\n        <div className=\"relative\">\n          <Search size={16} className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-400\" />\n          <input\n            type=\"text\"\n            placeholder=\"Поиск по коллекциям и изделиям...\"\n            className=\"w-full pl-9 pr-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            value={search}\n            onChange={(e) => onSearchChange(e.target.value)}\n          />\n        </div>\n\n        <select\n          className=\"px-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white\"\n          value={groupFilter}\n          onChange={(e) => onGroupChange(e.target.value)}\n        >\n          <option value=\"all\">Все группы</option>\n          {groups.map((g) => (\n            <option key={g} value={g}>\n              {g}\n            </option>\n          ))}\n        </select>\n\n        <div className=\"flex items-center justify-between gap-2\">\n          <label className=\"inline-flex items-center gap-2 text-sm text-gray-700\">\n            <input\n              type=\"checkbox\"\n              className=\"rounded border-gray-300\"\n              checked={showArchived}\n              onChange={(e) => onToggleArchived(e.target.checked)}\n            />\n            Показать архивные\n          </label>\n          <button\n            className=\"px-3 py-2 rounded-lg font-medium bg-white border border-gray-300 hover:bg-gray-50 text-gray-700 text-sm\"\n            onClick={onReset}\n          >\n            Сбросить\n          </button>\n        </div>\n      </div>\n\n      {/* Чипы групп */}\n      {groups.length > 0 && (\n        <div className=\"mt-3 flex flex-wrap gap-2\">\n          {groups.slice(0, 12).map((g) => {\n            const active = groupFilter === g\n            return (\n              <button\n                key={g}\n                className={`px-2.5 py-1 rounded-full border text-xs ${\n                  active\n                    ? 'bg-blue-600 text-white border-blue-600'\n                    : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'\n                }`}\n                onClick={() => onGroupChange(active ? 'all' : g)}\n                title={active ? 'Показать все группы' : `Показать только: ${g}`}\n              >\n                {g}\n              </button>\n            )\n          })}\n        </div>\n      )}\n    </div>\n  )\n}\n",
      "lines": 116,
      "size": 3959,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3122891+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/common/AccentThemeSwitcher.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "function Swatch({ color }: { color: string }): React.ReactElement {",
          "export default function AccentThemeSwitcher(): React.ReactElement {",
          "const items = useMemo(() => listAccents(), [])",
          "const a = readAccent()",
          "const onPick = (key: AccentKey) => {",
          "const previewFor = (key: AccentKey) => {"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 6,
          "typesCount": 0,
          "hooksCount": 5,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 3
        },
        "imports": [
          "import React, { useEffect, useMemo, useState } from 'react'",
          "import { Palette } from 'lucide-react'",
          "import { applyAccent, listAccents, readAccent, type AccentKey } from '../../themeAccent'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function Swatch({ color }: { color: string }): React.ReactElement {",
          "const onPick = (key: AccentKey) => {",
          "const previewFor = (key: AccentKey) => {"
        ],
        "exports": [
          "export default function AccentThemeSwitcher(): React.ReactElement {"
        ],
        "hooks": [
          "import React, { useEffect, useMemo, useState } from 'react'",
          "const [open, setOpen] = useState(false)",
          "const [current, setCurrent] = useState<AccentKey>('blue')",
          "const items = useMemo(() => listAccents(), [])",
          "useEffect(() => {"
        ]
      },
      "content": "/**\n * AccentThemeSwitcher — компактный переключатель акцентных цветовых тем.\n * Варианты: Светлая (blue), Ночная, Изумруд, Аметист.\n * Показывает кнопку с палитрой и выпадающее меню с мини-превью цвета.\n */\n\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { Palette } from 'lucide-react'\nimport { applyAccent, listAccents, readAccent, type AccentKey } from '../../themeAccent'\n\n/** Элемент превью темы (кружок с градиентом/цветом) */\nfunction Swatch({ color }: { color: string }): React.ReactElement {\n  return (\n    <span\n      className=\"inline-block w-4 h-4 rounded-full ring-1 ring-black/10\"\n      style={{ background: color }}\n      aria-hidden=\"true\"\n    />\n  )\n}\n\n/** AccentThemeSwitcher — основной компонент */\nexport default function AccentThemeSwitcher(): React.ReactElement {\n  const [open, setOpen] = useState(false)\n  const [current, setCurrent] = useState<AccentKey>('blue')\n  const items = useMemo(() => listAccents(), [])\n\n  /** Применяем сохранённое значение при монтировании */\n  useEffect(() => {\n    const a = readAccent()\n    setCurrent(a)\n    applyAccent(a)\n  }, [])\n\n  /** Выбор темы */\n  const onPick = (key: AccentKey) => {\n    setCurrent(key)\n    applyAccent(key)\n    setOpen(false)\n  }\n\n  /** Для превью цвета используем переменные (примерная палитра) */\n  const previewFor = (key: AccentKey) => {\n    switch (key) {\n      case 'blue': return 'linear-gradient(135deg, #dbeafe, #93c5fd)'\n      case 'night': return 'linear-gradient(135deg, #0b1020, #141a2d)'\n      case 'emerald': return 'linear-gradient(135deg, #d1fae5, #6ee7b7)'\n      case 'violet': return 'linear-gradient(135deg, #f3e8ff, #d8b4fe)'\n      default: return '#e5e7eb'\n    }\n  }\n\n  return (\n    <div className=\"relative\">\n      <button\n        type=\"button\"\n        onClick={() => setOpen(v => !v)}\n        className=\"inline-flex items-center gap-2 px-2.5 py-1.5 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-700\"\n        aria-haspopup=\"menu\"\n        aria-expanded={open}\n        title=\"Сменить акцентную тему\"\n      >\n        <Palette size={16} />\n        <span className=\"text-xs font-medium\">Тема</span>\n      </button>\n\n      {open && (\n        <div\n          role=\"menu\"\n          className=\"absolute right-0 mt-2 w-56 rounded-lg border border-gray-200 bg-white shadow-lg z-50 p-2\"\n        >\n          {items.map((it) => (\n            <button\n              key={it.key}\n              type=\"button\"\n              onClick={() => onPick(it.key)}\n              className={`w-full flex items-center justify-between gap-3 px-3 py-2 rounded-md hover:bg-gray-50 ${\n                current === it.key ? 'ring-1 ring-gray-300' : ''\n              }`}\n              role=\"menuitem\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <Swatch color={previewFor(it.key)} />\n                <span className=\"text-sm text-gray-800\">{it.label}</span>\n              </div>\n              {current === it.key && <span className=\"text-xs text-gray-500\">✓</span>}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n",
      "lines": 94,
      "size": 3418,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3659373+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/checkbox.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Checkbox = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"",
          "import { Check } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Checkbox }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
      "lines": 31,
      "size": 1026,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2334903+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/popover.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Popover = PopoverPrimitive.Root",
          "const PopoverTrigger = PopoverPrimitive.Trigger",
          "const PopoverAnchor = PopoverPrimitive.Anchor",
          "const PopoverContent = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 4,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as PopoverPrimitive from \"@radix-ui/react-popover\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n",
      "lines": 34,
      "size": 1356,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2625849+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/common/Button.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Button = memo(function Button({",
          "const variantClass =",
          "const sizeClass ="
        ],
        "interfaces": [
          "export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 3,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React, { memo } from 'react'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {",
          "export default Button"
        ],
        "hooks": []
      },
      "content": "/**\n * Кнопка общего назначения\n * Варианты: primary | outline | danger, размеры и состояния. Без внешних зависимостей.\n */\n\nimport React, { memo } from 'react'\n\n/**\n * Пропсы кнопки\n */\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /** Вариант оформления */\n  variant?: 'primary' | 'outline' | 'danger'\n  /** Размер кнопки */\n  size?: 'sm' | 'md' | 'lg'\n}\n\n/**\n * Button — переиспользуемая кнопка\n */\nconst Button = memo(function Button({\n  children,\n  className = '',\n  variant = 'primary',\n  size = 'md',\n  disabled,\n  ...rest\n}: ButtonProps): React.ReactElement {\n  /** Подбор цветов по варианту */\n  const variantClass =\n    variant === 'primary'\n      ? 'bg-blue-600 hover:bg-blue-700 text-white border border-transparent'\n      : variant === 'danger'\n      ? 'bg-red-600 hover:bg-red-700 text-white border border-transparent'\n      : // outline: важно — bg-transparent (см. OutlineButtonFix)\n        'bg-transparent border border-gray-300 text-gray-700 hover:bg-gray-50'\n\n  /** Подбор отступов по размеру */\n  const sizeClass =\n    size === 'sm'\n      ? 'px-3 py-1.5 text-sm'\n      : size === 'lg'\n      ? 'px-6 py-3 text-base'\n      : 'px-4 py-2 text-sm'\n\n  return (\n    <button\n      type=\"button\"\n      className={`rounded-lg font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 ${variantClass} ${sizeClass} ${className}`}\n      disabled={disabled}\n      {...rest}\n    >\n      {children}\n    </button>\n  )\n})\n\nexport default Button\n",
      "lines": 59,
      "size": 1700,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3448648+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/sonner.tsx": {
      "analysis": {
        "types": [
          "type ToasterProps = React.ComponentProps<typeof Sonner>"
        ],
        "classes": [],
        "components": [
          "const Toaster = ({ ...props }: ToasterProps) => {"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 1,
          "hooksCount": 2,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [
          "import { useTheme } from \"next-themes\"",
          "import { Toaster as Sonner } from \"sonner\""
        ],
        "hasTypeScript": true,
        "functions": [
          "const Toaster = ({ ...props }: ToasterProps) => {"
        ],
        "exports": [
          "export { Toaster }"
        ],
        "hooks": [
          "import { useTheme } from \"next-themes\"",
          "const { theme = \"system\" } = useTheme()"
        ]
      },
      "content": "\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n",
      "lines": 32,
      "size": 894,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2862568+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/hooks/useSystemData.ts": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export function useSystemData(): UseSystemDataResult {",
          "const products = useMemo(() => StorageService.getProducts(), [tick])",
          "const collections = useMemo(() => StorageService.getCollections(), [tick])",
          "const auditLog = useMemo(() => StorageService.getAudit(), [tick])",
          "const metrics = useMemo(() => AnalyticsService.calculate(collections, products, auditLog), [collections, products, auditLog])",
          "const pinnedCollections = useMemo(",
          "const refresh = useCallback(() => setTick((t) => t + 1), [])",
          "const seed = useCallback(() => {"
        ],
        "interfaces": [
          "export interface UseSystemDataResult {"
        ],
        "hasJSX": false,
        "stats": {
          "componentsCount": 8,
          "typesCount": 0,
          "hooksCount": 11,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import { useCallback, useMemo, useState } from 'react'",
          "import { StorageService, type AuditEvent, type SimpleCollection, type SimpleProduct } from '../services/storage'",
          "import { AnalyticsService, type SystemMetrics } from '../services/analytics'",
          "import { seedDemoData } from '../services/seed'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface UseSystemDataResult {",
          "export function useSystemData(): UseSystemDataResult {"
        ],
        "hooks": [
          "import { useCallback, useMemo, useState } from 'react'",
          "export interface UseSystemDataResult {",
          "export function useSystemData(): UseSystemDataResult {",
          "const [tick, setTick] = useState(0)",
          "const products = useMemo(() => StorageService.getProducts(), [tick])",
          "const collections = useMemo(() => StorageService.getCollections(), [tick])",
          "const auditLog = useMemo(() => StorageService.getAudit(), [tick])",
          "const metrics = useMemo(() => AnalyticsService.calculate(collections, products, auditLog), [collections, products, auditLog])",
          "const pinnedCollections = useMemo(",
          "const refresh = useCallback(() => setTick((t) => t + 1), [])",
          "const seed = useCallback(() => {"
        ]
      },
      "content": "/**\n * useSystemData — хук для инкапсуляции данных главной страницы\n * Возвращает коллекции, товары, аудит, метрики и операции (seed/refresh).\n */\n\nimport { useCallback, useMemo, useState } from 'react'\nimport { StorageService, type AuditEvent, type SimpleCollection, type SimpleProduct } from '../services/storage'\nimport { AnalyticsService, type SystemMetrics } from '../services/analytics'\nimport { seedDemoData } from '../services/seed'\n\n/**\n * Результат хука useSystemData\n */\nexport interface UseSystemDataResult {\n  products: SimpleProduct[]\n  collections: SimpleCollection[]\n  auditLog: AuditEvent[]\n  metrics: SystemMetrics\n  pinnedCollections: SimpleCollection[]\n  seed: () => void\n  refresh: () => void\n}\n\n/**\n * useSystemData — главный хук\n */\nexport function useSystemData(): UseSystemDataResult {\n  const [tick, setTick] = useState(0)\n\n  // Чтение данных из LS\n  const products = useMemo(() => StorageService.getProducts(), [tick])\n  const collections = useMemo(() => StorageService.getCollections(), [tick])\n  const auditLog = useMemo(() => StorageService.getAudit(), [tick])\n\n  // Метрики\n  const metrics = useMemo(() => AnalyticsService.calculate(collections, products, auditLog), [collections, products, auditLog])\n\n  // Закреплённые коллекции\n  const pinnedCollections = useMemo(\n    () => collections.filter((c) => c.pinned && !c.is_archived),\n    [collections],\n  )\n\n  /** Обновить (перечитать) данные */\n  const refresh = useCallback(() => setTick((t) => t + 1), [])\n\n  /** Загрузить демо-данные */\n  const seed = useCallback(() => {\n    seedDemoData()\n    refresh()\n  }, [refresh])\n\n  return { products, collections, auditLog, metrics, pinnedCollections, seed, refresh }\n}\n",
      "lines": 55,
      "size": 1893,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.3794664+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/services/storage.ts": {
      "analysis": {
        "types": [],
        "classes": [
          "export class StorageService {"
        ],
        "components": [
          "export const LS_KEYS = {",
          "const raw = localStorage.getItem(key)",
          "const list = this.getAudit()"
        ],
        "interfaces": [
          "export interface AuditEvent {",
          "export interface SimpleProduct {",
          "export interface SimpleCollection {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 3,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 3,
          "exportsCount": 5,
          "importsCount": 0,
          "classesCount": 1,
          "functionsCount": 0
        },
        "imports": [],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface AuditEvent {",
          "export interface SimpleProduct {",
          "export interface SimpleCollection {",
          "export const LS_KEYS = {",
          "export class StorageService {"
        ],
        "hooks": []
      },
      "content": "/**\n * StorageService — централизованный доступ к localStorage\n * Согласованные ключи и безопасное чтение/запись.\n */\n\nexport interface AuditEvent {\n  /** Уникальный ID события */\n  id: string\n  /** Время (ms epoch) */\n  at: number\n  /** Действие */\n  action: string\n  /** Сущность события */\n  entity: 'collection' | 'product' | 'system' | string\n  /** ID сущности (опционально) */\n  entityId?: string\n  /** Доп. данные */\n  details?: any\n  /** Версия записи */\n  version?: string\n}\n\n/**\n * Упрощенный товар для главной\n */\nexport interface SimpleProduct {\n  id: string\n  name: string\n  article: string\n  imageKeyword?: string\n  created_at: string\n  updated_at: string\n}\n\n/**\n * Упрощенная коллекция для главной\n */\nexport interface SimpleCollection {\n  id: string\n  name: string\n  description?: string\n  group?: string\n  is_archived?: boolean\n  pinned?: boolean\n  product_order: string[]\n  created_at: string\n  updated_at: string\n}\n\n/**\n * Ключи хранилища приложения\n */\nexport const LS_KEYS = {\n  collections: 'wasser_collections_data',\n  products: 'wasser_products_data',\n  audit: 'wasser_change_log',\n} as const\n\n/**\n * Безопасное чтение/запись JSON в localStorage\n */\nexport class StorageService {\n  /** Прочитать значение типа T из LS безопасно */\n  static read<T>(key: string, fallback: T): T {\n    try {\n      const raw = localStorage.getItem(key)\n      return raw ? (JSON.parse(raw) as T) : fallback\n    } catch {\n      return fallback\n    }\n  }\n\n  /** Записать значение в LS безопасно */\n  static write<T>(key: string, value: T): void {\n    try {\n      localStorage.setItem(key, JSON.stringify(value))\n    } catch {\n      /* noop */\n    }\n  }\n\n  /** Получить коллекции */\n  static getCollections(): SimpleCollection[] {\n    return this.read<SimpleCollection[]>(LS_KEYS.collections, [])\n  }\n\n  /** Сохранить коллекции */\n  static saveCollections(list: SimpleCollection[]): void {\n    this.write(LS_KEYS.collections, list)\n  }\n\n  /** Получить товары */\n  static getProducts(): SimpleProduct[] {\n    return this.read<SimpleProduct[]>(LS_KEYS.products, [])\n  }\n\n  /** Сохранить товары */\n  static saveProducts(list: SimpleProduct[]): void {\n    this.write(LS_KEYS.products, list)\n  }\n\n  /** Получить журнал аудита */\n  static getAudit(): AuditEvent[] {\n    return this.read<AuditEvent[]>(LS_KEYS.audit, [])\n  }\n\n  /** Добавить запись в журнал */\n  static pushAudit(item: Omit<AuditEvent, 'id' | 'at' | 'version'>): void {\n    const list = this.getAudit()\n    const record: AuditEvent = {\n      id: StorageService.id(),\n      at: Date.now(),\n      version: 'v1',\n      ...item,\n    }\n    this.write(LS_KEYS.audit, [record, ...list])\n  }\n\n  /** Утилита: компактный ID */\n  static id(): string {\n    return Date.now().toString(36) + Math.random().toString(36).slice(2)\n  }\n}\n",
      "lines": 124,
      "size": 3211,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.4230357+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/services/supabase.ts": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const LS_KEY = 'wasser_supabase_cfg'",
          "export function getSupabaseConfig(): SupabaseConfig {",
          "const raw = localStorage.getItem(LS_KEY)",
          "const cfg = raw ? (JSON.parse(raw) as SupabaseConfig) : null",
          "export function setSupabaseConfig(cfg: SupabaseConfig): void {",
          "export function isSupabaseEnabled(): boolean {",
          "const cfg = getSupabaseConfig()",
          "export function getSupabase(): SupabaseClient | null {",
          "const cfg = getSupabaseConfig()",
          "export async function testSupabaseConnection(table = 'materials'): Promise<boolean> {",
          "const client = getSupabase()"
        ],
        "interfaces": [
          "export interface SupabaseConfig {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 11,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 1,
          "exportsCount": 6,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import { createClient, type SupabaseClient } from '@supabase/supabase-js'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface SupabaseConfig {",
          "export function getSupabaseConfig(): SupabaseConfig {",
          "export function setSupabaseConfig(cfg: SupabaseConfig): void {",
          "export function isSupabaseEnabled(): boolean {",
          "export function getSupabase(): SupabaseClient | null {",
          "export async function testSupabaseConnection(table = 'materials'): Promise<boolean> {"
        ],
        "hooks": []
      },
      "content": "/**\n * Supabase client и конфигурация.\n * Хранит и читает настройки из localStorage, создаёт клиент по запросу.\n */\n\nimport { createClient, type SupabaseClient } from '@supabase/supabase-js'\n\n/** Конфигурация Supabase */\nexport interface SupabaseConfig {\n  /** URL проекта (https://xxx.supabase.co) */\n  url: string\n  /** anon ключ */\n  anonKey: string\n  /** Включена ли синхронизация */\n  enabled: boolean\n}\n\n/** Ключ хранения настроек */\nconst LS_KEY = 'wasser_supabase_cfg'\n\n/** Прочитать конфигурацию из localStorage */\nexport function getSupabaseConfig(): SupabaseConfig {\n  try {\n    const raw = localStorage.getItem(LS_KEY)\n    const cfg = raw ? (JSON.parse(raw) as SupabaseConfig) : null\n    return cfg || { url: '', anonKey: '', enabled: false }\n  } catch {\n    return { url: '', anonKey: '', enabled: false }\n  }\n}\n\n/** Сохранить конфигурацию в localStorage */\nexport function setSupabaseConfig(cfg: SupabaseConfig): void {\n  try {\n    localStorage.setItem(LS_KEY, JSON.stringify(cfg))\n  } catch {\n    /* noop */\n  }\n}\n\n/** Включена ли синхронизация */\nexport function isSupabaseEnabled(): boolean {\n  const cfg = getSupabaseConfig()\n  return Boolean(cfg.enabled && cfg.url && cfg.anonKey)\n}\n\n/** Создать клиент Supabase (или вернуть null, если не настроено) */\nexport function getSupabase(): SupabaseClient | null {\n  const cfg = getSupabaseConfig()\n  if (!cfg.enabled || !cfg.url || !cfg.anonKey) return null\n  return createClient(cfg.url, cfg.anonKey, {\n    auth: { persistSession: false },\n    global: { fetch: (input, init) => fetch(input as any, { ...init, cache: 'no-store' }) },\n  })\n}\n\n/** Проба соединения: простой select count из указанной таблицы */\nexport async function testSupabaseConnection(table = 'materials'): Promise<boolean> {\n  const client = getSupabase()\n  if (!client) return false\n  const { error } = await client.from(table).select('*', { count: 'exact', head: true }).limit(1)\n  return !error\n}",
      "lines": 63,
      "size": 2203,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.4286096+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/home/CurrencyRatesCard.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const LS_KEY = 'wasser_rates_kgs'",
          "const CACHE_TTL = 3 * 60 * 60 * 1000",
          "function fmt(n?: number): string {",
          "async function fetchToKGS(base: 'USD' | 'EUR' | 'RUB' | 'CNY' | 'KZT'): Promise<number | null> {",
          "const r1 = await fetch(`https://open.er-api.com/v6/latest/${base}`, { cache: 'no-store' })",
          "const j = await r1.json()",
          "const v = j?.rates?.KGS",
          "const r2 = await fetch(`https://api.exchangerate.host/latest?base=${base}&symbols=KGS`, { cache: 'no-store' })",
          "const j = await r2.json()",
          "const v = j?.rates?.KGS",
          "function readCache(): RatesState | null {",
          "const raw = localStorage.getItem(LS_KEY)",
          "const data = JSON.parse(raw) as RatesState",
          "function writeCache(state: RatesState): void {",
          "export default function CurrencyRatesCard(): React.ReactElement {",
          "async function load() {",
          "const cached = readCache()",
          "const updated = useMemo("
        ],
        "interfaces": [
          "interface RatesState {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 18,
          "typesCount": 0,
          "hooksCount": 4,
          "interfacesCount": 1,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 3
        },
        "imports": [
          "import React, { useEffect, useMemo, useState } from 'react'",
          "import Card from '../common/Card'",
          "import { DollarSign, Euro, Banknote, RefreshCw, Coins, JapaneseYen } from 'lucide-react'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function fmt(n?: number): string {",
          "function readCache(): RatesState | null {",
          "function writeCache(state: RatesState): void {"
        ],
        "exports": [
          "export default function CurrencyRatesCard(): React.ReactElement {"
        ],
        "hooks": [
          "import React, { useEffect, useMemo, useState } from 'react'",
          "const [state, setState] = useState<RatesState>({ loading: true })",
          "useEffect(() => {",
          "const updated = useMemo("
        ]
      },
      "content": "/**\n * CurrencyRatesCard — карточка с курсами валют к KGS (сом).\n * Источники: open.er-api.com (основной), exchangerate.host (резерв).\n * Кэширование в localStorage на 3 часа для снижения нагрузки на API.\n */\n\nimport React, { useEffect, useMemo, useState } from 'react'\nimport Card from '../common/Card'\nimport { DollarSign, Euro, Banknote, RefreshCw, Coins, JapaneseYen } from 'lucide-react'\n\n/** Состояние загрузки курсов */\ninterface RatesState {\n  USDKGS?: number\n  EURKGS?: number\n  CNYKGS?: number\n  RUBKGS?: number\n  KZTKGS?: number\n  updatedAt?: number\n  loading: boolean\n  error?: string\n}\n\n/** Ключ кэша в LS */\nconst LS_KEY = 'wasser_rates_kgs'\n/** TTL кэша (мс) — 3 часа */\nconst CACHE_TTL = 3 * 60 * 60 * 1000\n\n/** Форматирование числа */\nfunction fmt(n?: number): string {\n  if (typeof n !== 'number' || !isFinite(n)) return '—'\n  return n.toFixed(2)\n}\n\n/** Попытка получить курс base→KGS из open.er-api, затем exchangerate.host */\nasync function fetchToKGS(base: 'USD' | 'EUR' | 'RUB' | 'CNY' | 'KZT'): Promise<number | null> {\n  try {\n    const r1 = await fetch(`https://open.er-api.com/v6/latest/${base}`, { cache: 'no-store' })\n    if (r1.ok) {\n      const j = await r1.json()\n      const v = j?.rates?.KGS\n      if (typeof v === 'number') return v\n    }\n  } catch {\n    /* noop */\n  }\n  try {\n    const r2 = await fetch(`https://api.exchangerate.host/latest?base=${base}&symbols=KGS`, { cache: 'no-store' })\n    if (r2.ok) {\n      const j = await r2.json()\n      const v = j?.rates?.KGS\n      if (typeof v === 'number') return v\n    }\n  } catch {\n    /* noop */\n  }\n  return null\n}\n\n/** Прочитать кэш из LS */\nfunction readCache(): RatesState | null {\n  try {\n    const raw = localStorage.getItem(LS_KEY)\n    if (!raw) return null\n    const data = JSON.parse(raw) as RatesState\n    if (data.updatedAt && Date.now() - data.updatedAt < CACHE_TTL) return data\n  } catch {\n    /* noop */\n  }\n  return null\n}\n\n/** Сохранить кэш в LS */\nfunction writeCache(state: RatesState): void {\n  try {\n    localStorage.setItem(LS_KEY, JSON.stringify(state))\n  } catch {\n    /* noop */\n  }\n}\n\n/** Компонент карточки курсов */\nexport default function CurrencyRatesCard(): React.ReactElement {\n  const [state, setState] = useState<RatesState>({ loading: true })\n\n  /** Загрузка данных (параллельно) */\n  async function load() {\n    setState((s) => ({ ...s, loading: true, error: undefined }))\n    try {\n      const [usd, eur, cny, rub, kzt] = await Promise.all([\n        fetchToKGS('USD'),\n        fetchToKGS('EUR'),\n        fetchToKGS('CNY'),\n        fetchToKGS('RUB'),\n        fetchToKGS('KZT'),\n      ])\n      if (!usd && !eur && !cny && !rub && !kzt) throw new Error('Не удалось получить курсы')\n\n      const next: RatesState = {\n        USDKGS: usd ?? undefined,\n        EURKGS: eur ?? undefined,\n        CNYKGS: cny ?? undefined,\n        RUBKGS: rub ?? undefined,\n        KZTKGS: kzt ?? undefined,\n        updatedAt: Date.now(),\n        loading: false,\n      }\n      setState(next)\n      writeCache(next)\n    } catch (e: any) {\n      setState({ loading: false, error: e?.message || 'Ошибка загрузки курсов' })\n    }\n  }\n\n  useEffect(() => {\n    const cached = readCache()\n    if (cached) {\n      setState({ ...cached, loading: false })\n    } else {\n      load()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const updated = useMemo(\n    () => (state.updatedAt ? new Date(state.updatedAt).toLocaleString('ru-RU', { dateStyle: 'medium', timeStyle: 'short' }) : '—'),\n    [state.updatedAt],\n  )\n\n  return (\n    <Card className=\"p-4\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"text-sm font-semibold text-gray-900\">Курсы валют</div>\n        <button\n          type=\"button\"\n          onClick={() => load()}\n          className=\"inline-flex items-center justify-center w-8 h-8 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-700\"\n          title=\"Обновить\"\n          aria-label=\"Обновить\"\n        >\n          <RefreshCw size={14} />\n        </button>\n      </div>\n\n      {state.loading ? (\n        <div className=\"animate-pulse space-y-2\">\n          <div className=\"h-4 bg-gray-100 rounded\" />\n          <div className=\"h-4 bg-gray-100 rounded\" />\n          <div className=\"h-4 bg-gray-100 rounded\" />\n          <div className=\"h-4 bg-gray-100 rounded\" />\n          <div className=\"h-4 bg-gray-100 rounded\" />\n        </div>\n      ) : state.error ? (\n        <div className=\"text-sm text-red-600 bg-red-50 border border-red-200 rounded p-2\">{state.error}</div>\n      ) : (\n        <ul className=\"divide-y divide-gray-200 text-sm\">\n          <li className=\"py-2 flex items-center justify-between\">\n            <span className=\"inline-flex items-center gap-2 text-gray-700\">\n              <DollarSign size={16} className=\"text-blue-600\" />\n              USD\n            </span>\n            <span className=\"font-semibold text-gray-900\">{fmt(state.USDKGS)} KGS</span>\n          </li>\n          <li className=\"py-2 flex items-center justify-between\">\n            <span className=\"inline-flex items-center gap-2 text-gray-700\">\n              <Euro size={16} className=\"text-emerald-600\" />\n              EUR\n            </span>\n            <span className=\"font-semibold text-gray-900\">{fmt(state.EURKGS)} KGS</span>\n          </li>\n          <li className=\"py-2 flex items-center justify-between\">\n            <span className=\"inline-flex items-center gap-2 text-gray-700\">\n              <JapaneseYen size={16} className=\"text-rose-600\" />\n              CNY\n            </span>\n            <span className=\"font-semibold text-gray-900\">{fmt(state.CNYKGS)} KGS</span>\n          </li>\n          <li className=\"py-2 flex items-center justify-between\">\n            <span className=\"inline-flex items-center gap-2 text-gray-700\">\n              <Banknote size={16} className=\"text-violet-600\" />\n              RUB\n            </span>\n            <span className=\"font-semibold text-gray-900\">{fmt(state.RUBKGS)} KGS</span>\n          </li>\n          <li className=\"py-2 flex items-center justify-between\">\n            <span className=\"inline-flex items-center gap-2 text-gray-700\">\n              <Coins size={16} className=\"text-indigo-600\" />\n              KZT\n            </span>\n            <span className=\"font-semibold text-gray-900\">{fmt(state.KZTKGS)} KGS</span>\n          </li>\n        </ul>\n      )}\n      <div className=\"mt-2 text-xs text-gray-500\">Обновлено: {updated}</div>\n    </Card>\n  )\n}\n",
      "lines": 197,
      "size": 6828,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3293011+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/techcard/TechCardManager.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "function rid(): string {",
          "async function parseTechCardExcel(buffer: ArrayBuffer, materials: Material[]): Promise<TechCardItem[]> {",
          "const wb = XLSX.read(buffer, { type: 'array' })",
          "const ws = wb.Sheets[wb.SheetNames[0]]",
          "const mapByArticle = new Map(materials.map((m) => [String(m.article || '').trim().toLowerCase(), m.id]))",
          "const row = rows[i]",
          "const article = String(row[0] ?? '').trim().toLowerCase()",
          "const qty = Number(row[1] ?? 0)",
          "const materialId = mapByArticle.get(article)",
          "const TechCardManager = memo(function TechCardManager({",
          "const inputRef = useRef<HTMLInputElement | null>(null)",
          "const matMap = useMemo(() => new Map(materials.map((m) => [m.id, m])), [materials])",
          "const sortedMaterials = useMemo(",
          "const rows = useMemo(() => {",
          "const m = matMap.get(it.materialId)",
          "const total = (Number(it.quantity) || 0) * (m.price || 0)",
          "const totalCost = useMemo(() => rows.reduce((s, r) => s + (r.total || 0), 0), [rows])",
          "const addPosition = useCallback(() => {",
          "const exists = (value || []).find((it) => it.materialId === selected)",
          "const next = (value || []).map((it) =>",
          "const next = [{ materialId: selected, quantity: Number(qty), _techCardId: rid() }, ...(value || [])]",
          "const commitQty = useCallback(",
          "const raw = (str ?? '').trim()",
          "const normalized = raw.replace(',', '.')",
          "const q = raw === '' ? 0 : Number(normalized)",
          "const next = (value || []).map((it) => (it._techCardId === id ? { ...it, quantity: q } : it))",
          "const removePosition = useCallback(",
          "const next = (value || []).filter((it) => it._techCardId !== id)",
          "const handleQtyChange = useCallback((id: string | undefined, input: string) => {",
          "const doImport = useCallback(async (file: File | undefined | null) => {",
          "const buffer = await file.arrayBuffer()",
          "const items = await parseTechCardExcel(buffer, materials)"
        ],
        "interfaces": [
          "export interface TechCardManagerProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 32,
          "typesCount": 0,
          "hooksCount": 17,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 8,
          "classesCount": 0,
          "functionsCount": 5
        },
        "imports": [
          "import React, { memo, useCallback, useMemo, useRef, useState } from 'react'",
          "import type { Material, TechCardItem } from '../../types/models'",
          "import Card from '../common/Card'",
          "import Button from '../common/Button'",
          "import NumericField from '../common/NumericField'",
          "import * as XLSX from 'xlsx'",
          "import { toast } from 'sonner'",
          "import { useLocaleFormat } from '../../hooks/useLocaleFormat'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function rid(): string {",
          "const exists = (value || []).find((it) => it.materialId === selected)",
          "const next = (value || []).map((it) =>",
          "const next = (value || []).map((it) => (it._techCardId === id ? { ...it, quantity: q } : it))",
          "const next = (value || []).filter((it) => it._techCardId !== id)"
        ],
        "exports": [
          "export interface TechCardManagerProps {",
          "export default TechCardManager"
        ],
        "hooks": [
          "import React, { memo, useCallback, useMemo, useRef, useState } from 'react'",
          "import { useLocaleFormat } from '../../hooks/useLocaleFormat'",
          "const [selected, setSelected] = useState<string>('')",
          "const [qty, setQty] = useState<number>(1)",
          "const [importing, setImporting] = useState<boolean>(false)",
          "const inputRef = useRef<HTMLInputElement | null>(null)",
          "const [qtyDraft, setQtyDraft] = useState<Record<string, string>>({})",
          "const matMap = useMemo(() => new Map(materials.map((m) => [m.id, m])), [materials])",
          "const sortedMaterials = useMemo(",
          "const { formatCurrency } = useLocaleFormat('KGS')",
          "const rows = useMemo(() => {",
          "const totalCost = useMemo(() => rows.reduce((s, r) => s + (r.total || 0), 0), [rows])",
          "const addPosition = useCallback(() => {",
          "const commitQty = useCallback(",
          "const removePosition = useCallback(",
          "const handleQtyChange = useCallback((id: string | undefined, input: string) => {",
          "const doImport = useCallback(async (file: File | undefined | null) => {"
        ]
      },
      "content": "/**\n * Технологическая карта (ТД) — редактор состава изделия\n * Функции: добавление материалов, изменение количества, удаление, импорт из Excel, расчет сумм\n * Обновлено:\n * - Формат валюты: KGS\n * - Тосты для импорта/ошибок вместо alert\n * - draft-ввод количества (без изменений логики)\n */\n\nimport React, { memo, useCallback, useMemo, useRef, useState } from 'react'\nimport type { Material, TechCardItem } from '../../types/models'\nimport Card from '../common/Card'\nimport Button from '../common/Button'\nimport NumericField from '../common/NumericField'\nimport * as XLSX from 'xlsx'\nimport { toast } from 'sonner'\nimport { useLocaleFormat } from '../../hooks/useLocaleFormat'\n\n/**\n * Пропсы TechCardManager\n */\nexport interface TechCardManagerProps {\n  /** Доступные материалы */\n  materials: Material[]\n  /** Значение техкарты */\n  value: TechCardItem[]\n  /** Изменение техкарты */\n  onChange: (next: TechCardItem[]) => void\n}\n\n/**\n * Создание локального ID строки\n */\nfunction rid(): string {\n  return Date.now().toString(36) + Math.random().toString(36).slice(2, 8)\n}\n\n/**\n * Импорт из Excel (A: артикул, B: количество)\n */\nasync function parseTechCardExcel(buffer: ArrayBuffer, materials: Material[]): Promise<TechCardItem[]> {\n  const wb = XLSX.read(buffer, { type: 'array' })\n  const ws = wb.Sheets[wb.SheetNames[0]]\n  const rows: any[][] = XLSX.utils.sheet_to_json(ws, { header: 1 }) as any[][]\n  if (!rows || rows.length === 0) return []\n\n  const mapByArticle = new Map(materials.map((m) => [String(m.article || '').trim().toLowerCase(), m.id]))\n\n  const result: TechCardItem[] = []\n  for (let i = 1; i < rows.length; i++) {\n    const row = rows[i]\n    if (!row || row.length < 2) continue\n    const article = String(row[0] ?? '').trim().toLowerCase()\n    const qty = Number(row[1] ?? 0)\n    if (!article || !qty || qty <= 0) continue\n    const materialId = mapByArticle.get(article)\n    if (!materialId) continue\n    result.push({ materialId, quantity: qty, _techCardId: rid() })\n  }\n  return result\n}\n\n/**\n * TechCardManager — редактор техкарты\n */\nconst TechCardManager = memo(function TechCardManager({\n  materials,\n  value,\n  onChange,\n}: TechCardManagerProps): React.ReactElement {\n  const [selected, setSelected] = useState<string>('')\n  const [qty, setQty] = useState<number>(1)\n  const [importing, setImporting] = useState<boolean>(false)\n  const inputRef = useRef<HTMLInputElement | null>(null)\n\n  /** Локальные драфты количеств */\n  const [qtyDraft, setQtyDraft] = useState<Record<string, string>>({})\n\n  /** Мапа материалов для быстрого доступа */\n  const matMap = useMemo(() => new Map(materials.map((m) => [m.id, m])), [materials])\n\n  /** Отсортированные материалы (по имени) */\n  const sortedMaterials = useMemo(\n    () => [...materials].sort((a, b) => a.name.localeCompare(b.name, 'ru')),\n    [materials],\n  )\n\n  /** Форматтер валюты (база KGS) */\n  const { formatCurrency } = useLocaleFormat('KGS')\n\n  /** Состав с подробностями */\n  const rows = useMemo(() => {\n    return (value || [])\n      .map((it) => {\n        const m = matMap.get(it.materialId)\n        if (!m) return null\n        const total = (Number(it.quantity) || 0) * (m.price || 0)\n        return {\n          ...it,\n          name: m.name,\n          article: m.article,\n          unit: m.unit,\n          price: m.price,\n          total,\n        }\n      })\n      .filter(Boolean) as Array<\n      TechCardItem & { name: string; article: string; unit: string; price: number; total: number }\n    >\n  }, [value, matMap])\n\n  /** Общая стоимость материалов */\n  const totalCost = useMemo(() => rows.reduce((s, r) => s + (r.total || 0), 0), [rows])\n\n  /**\n   * Добавление позиции\n   */\n  const addPosition = useCallback(() => {\n    if (!selected || !qty || qty <= 0) {\n      toast.error('Выберите материал и укажите количество > 0')\n      return\n    }\n    const exists = (value || []).find((it) => it.materialId === selected)\n    if (exists) {\n      const next = (value || []).map((it) =>\n        it.materialId === selected ? { ...it, quantity: Number(it.quantity) + Number(qty) } : it,\n      )\n      onChange(next)\n    } else {\n      const next = [{ materialId: selected, quantity: Number(qty), _techCardId: rid() }, ...(value || [])]\n      onChange(next)\n    }\n    setSelected('')\n    setQty(1)\n    toast.success('Материал добавлен в ТД')\n  }, [selected, qty, value, onChange])\n\n  /**\n   * Коммит изменения количества в модель (после ввода/очистки)\n   */\n  const commitQty = useCallback(\n    (id: string | undefined, str: string) => {\n      if (!id) return\n      const raw = (str ?? '').trim()\n      const normalized = raw.replace(',', '.')\n      const q = raw === '' ? 0 : Number(normalized)\n      if (Number.isNaN(q) || q < 0) {\n        // Некорректный ввод — откат к текущему значению и очистка драфта\n        setQtyDraft((prev) => {\n          const { [id]: _omit, ...rest } = prev\n          return rest\n        })\n        toast.error('Некорректное количество')\n        return\n      }\n      const next = (value || []).map((it) => (it._techCardId === id ? { ...it, quantity: q } : it))\n      onChange(next)\n      setQtyDraft((prev) => {\n        const { [id]: _omit, ...rest } = prev\n        return rest\n      })\n    },\n    [onChange, value],\n  )\n\n  /**\n   * Удаление позиции\n   */\n  const removePosition = useCallback(\n    (id?: string) => {\n      const next = (value || []).filter((it) => it._techCardId !== id)\n      onChange(next)\n      if (id) {\n        setQtyDraft((prev) => {\n          const { [id]: _omit, ...rest } = prev\n          return rest\n        })\n      }\n      toast.success('Позиция удалена из ТД')\n    },\n    [value, onChange],\n  )\n\n  /**\n   * Изменение количества (драфт)\n   */\n  const handleQtyChange = useCallback((id: string | undefined, input: string) => {\n    if (!id) return\n    setQtyDraft((prev) => ({ ...prev, [id]: input }))\n  }, [])\n\n  /**\n   * Импорт техкарты из Excel\n   */\n  const doImport = useCallback(async (file: File | undefined | null) => {\n    if (!file) return\n    setImporting(true)\n    try {\n      const buffer = await file.arrayBuffer()\n      const items = await parseTechCardExcel(buffer, materials)\n      if (items.length === 0) {\n        toast.warning('В файле не найдено валидных строк (ожидаются: A — артикул, B — количество)')\n        return\n      }\n      onChange([...(value || []), ...items])\n      toast.success(`Импортировано позиций: ${items.length}`)\n    } catch (e: any) {\n      toast.error(`Ошибка импорта: ${e?.message || 'неизвестно'}`)\n    } finally {\n      setImporting(false)\n      if (inputRef.current) inputRef.current.value = ''\n    }\n  }, [materials, onChange, value])\n\n  return (\n    <Card className=\"space-y-4\">\n      <div className=\"flex flex-col lg:flex-row gap-3 justify-between lg:items-end\">\n        <div className=\"flex-1\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Материал</label>\n          <select\n            value={selected}\n            onChange={(e) => setSelected(e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"\">— Выберите материал —</option>\n            {sortedMaterials.map((m) => (\n              <option key={m.id} value={m.id}>\n                {m.name} ({m.article}) — {formatCurrency(m.price, 'KGS')}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"w-full lg:w-48\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Количество</label>\n          <NumericField\n            value={qty}\n            min={0}\n            onValueChange={(n) => setQty(n ?? 0)}\n            inputClassName=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n            ariaLabel=\"Количество\"\n          />\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={addPosition}>Добавить</Button>\n          <Button\n            variant=\"outline\"\n            className=\"bg-transparent\"\n            onClick={() => inputRef.current?.click()}\n            disabled={importing}\n          >\n            {importing ? 'Импорт...' : 'Импорт Excel'}\n          </Button>\n          <input\n            ref={inputRef}\n            type=\"file\"\n            accept=\".xlsx,.xls\"\n            onChange={(e) => doImport(e.target.files?.[0])}\n            className=\"hidden\"\n          />\n        </div>\n      </div>\n\n      <div className=\"overflow-hidden border border-gray-200 rounded-xl\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                {['Артикул', 'Наименование', 'Кол-во', 'Ед.', 'Цена', 'Сумма', ''].map((h) => (\n                  <th\n                    key={h}\n                    className=\"px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wide\"\n                  >\n                    {h}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {rows.length === 0 ? (\n                <tr>\n                  <td colSpan={7} className=\"px-4 py-8 text-center text-gray-500\">\n                    Техкарта пуста. Добавьте материал вручную или импортируйте из Excel.\n                  </td>\n                </tr>\n              ) : (\n                rows.map((r) => (\n                  <tr key={r._techCardId} className=\"border-t border-gray-100\">\n                    <td className=\"px-4 py-3 text-sm font-mono\">{r.article}</td>\n                    <td className=\"px-4 py-3 text-sm text-gray-900\">{r.name}</td>\n                    <td className=\"px-4 py-3 text-sm\">\n                      <input\n                        type=\"text\"\n                        inputMode=\"decimal\"\n                        value={qtyDraft[r._techCardId!] ?? String(r.quantity)}\n                        onChange={(e) => handleQtyChange(r._techCardId, e.target.value)}\n                        onBlur={(e) => commitQty(r._techCardId, e.target.value)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') {\n                            e.preventDefault()\n                            commitQty(r._techCardId, (e.currentTarget as HTMLInputElement).value)\n                          }\n                          if (e.key === 'Escape') {\n                            e.preventDefault()\n                            setQtyDraft((prev) => {\n                              const { [r._techCardId!]: _omit, ...rest } = prev\n                              return rest\n                            })\n                          }\n                        }}\n                        className=\"w-24 px-2 py-1 border border-gray-300 rounded focus:ring-1 focus:ring-blue-500\"\n                        placeholder=\"0\"\n                        aria-label=\"Количество\"\n                      />\n                    </td>\n                    <td className=\"px-4 py-3 text-sm text-gray-600\">{r.unit}</td>\n                    <td className=\"px-4 py-3 text-sm text-gray-900\">{formatCurrency(r.price, 'KGS')}</td>\n                    <td className=\"px-4 py-3 text-sm font-semibold text-gray-900\">{formatCurrency(r.total, 'KGS')}</td>\n                    <td className=\"px-4 py-3 text-right\">\n                      <Button variant=\"danger\" size=\"sm\" onClick={() => removePosition(r._techCardId!)}>\n                        Удалить\n                      </Button>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <div className=\"flex items-center justify-end\">\n        <div className=\"text-right\">\n          <div className=\"text-sm text-gray-600\">Итого материалы</div>\n          <div className=\"text-xl font-bold text-blue-600\">{formatCurrency(totalCost, 'KGS')}</div>\n        </div>\n      </div>\n\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <div className=\"text-sm text-blue-800\">\n          Формат Excel для импорта: колонка A — артикул материала, колонка B — количество. Первая строка может быть заголовком.\n        </div>\n      </div>\n    </Card>\n  )\n})\n\nexport default TechCardManager\n",
      "lines": 348,
      "size": 13341,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3709534+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/label.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const labelVariants = cva(",
          "const Label = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 2,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as LabelPrimitive from \"@radix-ui/react-label\"",
          "import { cva, type VariantProps } from \"class-variance-authority\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Label }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
      "lines": 27,
      "size": 724,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2550341+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/home/QuickActionsPanel.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export default function QuickActionsPanel({ items }: QuickActionsPanelProps): React.ReactElement {",
          "const list = items && items.length ? items : defaults"
        ],
        "interfaces": [
          "export interface QuickAction {",
          "export interface QuickActionsPanelProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 2,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 2,
          "exportsCount": 3,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React from 'react'",
          "import Card from '../common/Card'",
          "import { Grid2X2, Package, Layers, FileSpreadsheet } from 'lucide-react'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface QuickAction {",
          "export interface QuickActionsPanelProps {",
          "export default function QuickActionsPanel({ items }: QuickActionsPanelProps): React.ReactElement {"
        ],
        "hooks": []
      },
      "content": "/**\n * QuickActionsPanel — панель быстрых действий с иконками и краткими подсказками.\n * Мобильные улучшения: min-height ≥44px для touch, focus-ring для a11y, чуть больше gap.\n */\n\nimport React from 'react'\nimport Card from '../common/Card'\nimport { Grid2X2, Package, Layers, FileSpreadsheet } from 'lucide-react'\n\n/**\n * Описание одного действия\n */\nexport interface QuickAction {\n  /** Заголовок */\n  label: string\n  /** Подсказка (маленький текст) */\n  description?: string\n  /** Цветовой акцент (Tailwind классы) */\n  accentClass?: string\n  /** Обработчик клика */\n  onClick: () => void\n  /** Иконка */\n  icon: React.ReactNode\n}\n\n/**\n * Пропсы панели быстрых действий\n */\nexport interface QuickActionsPanelProps {\n  /** Набор действий */\n  items?: QuickAction[]\n}\n\n/**\n * QuickActionsPanel — компонент\n */\nexport default function QuickActionsPanel({ items }: QuickActionsPanelProps): React.ReactElement {\n  const defaults: QuickAction[] = [\n    {\n      label: 'Коллекции',\n      description: 'Управление витриной',\n      icon: <Grid2X2 size={18} />,\n      onClick: () => {},\n      accentClass: 'border-blue-200 bg-blue-50 text-blue-700',\n    },\n    {\n      label: 'Изделия',\n      description: 'Каталог изделий',\n      icon: <Package size={18} />,\n      onClick: () => {},\n      accentClass: 'border-emerald-200 bg-emerald-50 text-emerald-700',\n    },\n    {\n      label: 'Материалы',\n      description: 'Реестр материалов',\n      icon: <Layers size={18} />,\n      onClick: () => {},\n      accentClass: 'border-amber-200 bg-amber-50 text-amber-700',\n    },\n    {\n      label: 'Прайс-лист',\n      description: 'PDF/Excel',\n      icon: <FileSpreadsheet size={18} />,\n      onClick: () => {},\n      accentClass: 'border-violet-200 bg-violet-50 text-violet-700',\n    },\n  ]\n\n  const list = items && items.length ? items : defaults\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n      {list.map((it, i) => (\n        <button\n          key={i}\n          type=\"button\"\n          onClick={it.onClick}\n          className={`group text-left p-4 rounded-xl border ${it.accentClass} hover:shadow-sm transition-all min-h-[44px] focus:outline-none focus:ring-2 focus:ring-blue-500`}\n          title={it.label}\n          aria-label={it.label}\n        >\n          <div className=\"flex items-center justify-between\">\n            <span className=\"inline-flex items-center gap-2 text-sm font-medium\">\n              {it.icon}\n              {it.label}\n            </span>\n          </div>\n          {it.description && <div className=\"text-xs opacity-80 mt-1 text-gray-700\">{it.description}</div>}\n        </button>\n      ))}\n    </div>\n  )\n}\n",
      "lines": 94,
      "size": 2979,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3363401+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/home/PinnedCollectionsPanel.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export default function PinnedCollectionsPanel({",
          "const items = c.product_order.map((id) => productMap.get(id)).filter(Boolean) as SimpleProduct[]"
        ],
        "interfaces": [
          "export interface PinnedCollectionsPanelProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 2,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 5,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React from 'react'",
          "import Card from '../common/Card'",
          "import { Star, Package, Calendar, ChevronRight } from 'lucide-react'",
          "import type { SimpleCollection, SimpleProduct } from '../../services/storage'",
          "import ProgressiveImage from '../common/ProgressiveImage'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface PinnedCollectionsPanelProps {",
          "export default function PinnedCollectionsPanel({"
        ],
        "hooks": []
      },
      "content": "/**\n * PinnedCollectionsPanel — виджет закреплённых коллекций\n * Показывает карточки с краткой информацией и миниатюрами изделий (Smart Placeholder Image).\n * Мобильные улучшения: progressive image loading и фокус‑стейты.\n */\n\nimport React from 'react'\nimport Card from '../common/Card'\nimport { Star, Package, Calendar, ChevronRight } from 'lucide-react'\nimport type { SimpleCollection, SimpleProduct } from '../../services/storage'\nimport ProgressiveImage from '../common/ProgressiveImage'\n\n/**\n * Пропсы виджета\n */\nexport interface PinnedCollectionsPanelProps {\n  /** Коллекции */\n  collections: SimpleCollection[]\n  /** Словарь товаров по id */\n  productMap: Map<string, SimpleProduct>\n  /** Переход ко всем коллекциям */\n  onOpenCollections: () => void\n}\n\n/**\n * PinnedCollectionsPanel — основной компонент\n */\nexport default function PinnedCollectionsPanel({\n  collections,\n  productMap,\n  onOpenCollections,\n}: PinnedCollectionsPanelProps): React.ReactElement | null {\n  if (!collections.length) return null\n\n  return (\n    <section className=\"space-y-3\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-base font-semibold text-gray-900 flex items-center gap-2\">\n          <Star size={18} className=\"text-amber-500\" />\n          Закреплённые коллекции\n        </h2>\n        <button\n          type=\"button\"\n          onClick={onOpenCollections}\n          className=\"px-3 py-1.5 rounded-lg bg-white border border-gray-300 hover:bg-gray-50 text-gray-700 text-sm min-h-[36px] focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          title=\"Открыть все коллекции\"\n          aria-label=\"Открыть все коллекции\"\n        >\n          Все коллекции\n          <ChevronRight size={14} className=\"inline ml-1\" />\n        </button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n        {collections.map((c) => {\n          const items = c.product_order.map((id) => productMap.get(id)).filter(Boolean) as SimpleProduct[]\n          return (\n            <Card key={c.id} className=\"p-4 hover:shadow-md transition-all\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"min-w-0\">\n                  <div className=\"font-medium text-gray-900 truncate\">{c.name}</div>\n                  {c.group && (\n                    <div className=\"inline-block mt-1 text-[11px] px-2 py-0.5 rounded bg-blue-50 text-blue-700 border border-blue-200\">\n                      {c.group}\n                    </div>\n                  )}\n                  {c.description && <div className=\"text-xs text-gray-600 mt-1 line-clamp-2\">{c.description}</div>}\n                </div>\n                <Star size={16} className=\"text-amber-500 flex-shrink-0\" />\n              </div>\n\n              <div className=\"flex items-center justify-between text-xs text-gray-500 mt-2\">\n                <span className=\"inline-flex items-center gap-1\">\n                  <Package size={14} />\n                  {c.product_order.length} изделий\n                </span>\n                <span className=\"inline-flex items-center gap-1\">\n                  <Calendar size={14} />\n                  {new Date(c.updated_at).toLocaleDateString('ru-RU')}\n                </span>\n              </div>\n\n              {items.length > 0 && (\n                <div className=\"mt-3 flex -space-x-2\">\n                  {items.slice(0, 4).map((p) => (\n                    <div key={p.id} className=\"w-8 h-8 rounded-lg overflow-hidden border border-gray-200 bg-gray-50\" title={p.name}>\n                      <ProgressiveImage\n                        alt={p.name}\n                        // Плейсхолдер с WebP + fallback\n                        webpSrc=\"https://placehold.co/64x64.webp?text=%20\"\n                        src=\"https://placehold.co/64x64.jpg?text=%20\"\n                        className=\"w-full h-full\"\n                        imgClassName=\"object-cover w-full h-full\"\n                        loading=\"lazy\"\n                        decoding=\"async\"\n                      />\n                    </div>\n                  ))}\n                  {items.length > 4 && (\n                    <div className=\"w-8 h-8 rounded-lg border border-dashed border-gray-300 bg-white flex items-center justify-center text-xs text-gray-500\">\n                      +{items.length - 4}\n                    </div>\n                  )}\n                </div>\n              )}\n            </Card>\n          )\n        })}\n      </div>\n    </section>\n  )\n}\n",
      "lines": 113,
      "size": 4790,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3388582+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/common/QuickPrefsDock.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "function SegButton({",
          "export default function QuickPrefsDock(): React.ReactElement {",
          "const langs = useMemo(",
          "const changeLanguage = async (lng: 'ru' | 'ky' | 'en') => {",
          "const changeTheme = (m: ThemeMode) => {"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 5,
          "typesCount": 0,
          "hooksCount": 5,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 2
        },
        "imports": [
          "import React, { useMemo, useState } from 'react'",
          "import i18n from '../../i18n'",
          "import { setTheme, getTheme, type ThemeMode } from '../../theme'",
          "import { Settings, Globe, Sun, Moon, Monitor } from 'lucide-react'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function SegButton({",
          "const changeTheme = (m: ThemeMode) => {"
        ],
        "exports": [
          "export default function QuickPrefsDock(): React.ReactElement {"
        ],
        "hooks": [
          "import React, { useMemo, useState } from 'react'",
          "const [open, setOpen] = useState(false)",
          "const [lang, setLang] = useState(i18n.language as 'ru' | 'ky' | 'en')",
          "const [mode, setMode] = useState<ThemeMode>(getTheme())",
          "const langs = useMemo("
        ]
      },
      "content": "/**\n * QuickPrefsDock — плавающая панель предпочтений (язык и тема)\n * Компактный виджет справа снизу, не требует правок AppShell.\n */\n\nimport React, { useMemo, useState } from 'react'\nimport i18n from '../../i18n'\nimport { setTheme, getTheme, type ThemeMode } from '../../theme'\nimport { Settings, Globe, Sun, Moon, Monitor } from 'lucide-react'\n\n/** Элемент переключения */\nfunction SegButton({\n  active,\n  children,\n  onClick,\n  title,\n}: {\n  active: boolean\n  children: React.ReactNode\n  onClick: () => void\n  title?: string\n}) {\n  return (\n    <button\n      type=\"button\"\n      title={title}\n      onClick={onClick}\n      className={`px-2.5 py-1 rounded-md text-xs font-medium border transition-colors ${\n        active\n          ? 'bg-blue-600 text-white border-blue-600'\n          : 'bg-white/90 dark:bg-gray-900/80 text-gray-700 dark:text-gray-200 border-gray-300 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800'\n      }`}\n    >\n      {children}\n    </button>\n  )\n}\n\n/** Основной компонент док-панели */\nexport default function QuickPrefsDock(): React.ReactElement {\n  const [open, setOpen] = useState(false)\n  const [lang, setLang] = useState(i18n.language as 'ru' | 'ky' | 'en')\n  const [mode, setMode] = useState<ThemeMode>(getTheme())\n\n  /** Список языков */\n  const langs = useMemo(\n    () => ([\n      { key: 'ru', label: 'RU' },\n      { key: 'ky', label: 'KY' },\n      { key: 'en', label: 'EN' },\n    ] as const),\n    [],\n  )\n\n  /** Переключить язык */\n  const changeLanguage = async (lng: 'ru' | 'ky' | 'en') => {\n    await i18n.changeLanguage(lng)\n    try { localStorage.setItem('app_lang', lng) } catch {}\n    setLang(lng)\n  }\n\n  /** Переключить тему */\n  const changeTheme = (m: ThemeMode) => {\n    setTheme(m)\n    setMode(m)\n  }\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50\">\n      {/* Кнопка открытия */}\n      <button\n        type=\"button\"\n        onClick={() => setOpen(v => !v)}\n        aria-expanded={open}\n        className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 bg-white/90 dark:bg-gray-900/80 backdrop-blur text-gray-800 dark:text-gray-100\"\n        title=\"Предпочтения\"\n      >\n        <Settings size={16} />\n        <span className=\"text-sm font-medium\">Prefs</span>\n      </button>\n\n      {/* Панель */}\n      {open && (\n        <div className=\"mt-2 p-3 w-[280px] rounded-xl shadow-xl border border-gray-200 dark:border-gray-700 bg-white/95 dark:bg-gray-900/90 backdrop-blur space-y-3\">\n          <div className=\"text-xs font-semibold text-gray-700 dark:text-gray-200 flex items-center gap-2\">\n            <Globe size={14} /> Язык\n          </div>\n          <div className=\"flex items-center gap-1\">\n            {langs.map(l => (\n              <SegButton\n                key={l.key}\n                active={lang.startsWith(l.key)}\n                onClick={() => changeLanguage(l.key)}\n                title={l.label}\n              >\n                {l.label}\n              </SegButton>\n            ))}\n          </div>\n\n          <div className=\"text-xs font-semibold text-gray-700 dark:text-gray-200 flex items-center gap-2 mt-2\">\n            Тема\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <SegButton active={mode === 'light'} onClick={() => changeTheme('light')} title=\"Светлая\">\n              <Sun size={12} />&nbsp;Light\n            </SegButton>\n            <SegButton active={mode === 'dark'} onClick={() => changeTheme('dark')} title=\"Тёмная\">\n              <Moon size={12} />&nbsp;Dark\n            </SegButton>\n            <SegButton active={mode === 'system'} onClick={() => changeTheme('system')} title=\"Системная\">\n              <Monitor size={12} />&nbsp;System\n            </SegButton>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n",
      "lines": 120,
      "size": 4049,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3624040+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/radio-group.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const RadioGroup = React.forwardRef<",
          "const RadioGroupItem = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 2,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"",
          "import { Circle } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { RadioGroup, RadioGroupItem }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
      "lines": 45,
      "size": 1424,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2665948+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/select.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Select = SelectPrimitive.Root",
          "const SelectGroup = SelectPrimitive.Group",
          "const SelectValue = SelectPrimitive.Value",
          "const SelectTrigger = React.forwardRef<",
          "const SelectScrollUpButton = React.forwardRef<",
          "const SelectScrollDownButton = React.forwardRef<",
          "const SelectContent = React.forwardRef<",
          "const SelectLabel = React.forwardRef<",
          "const SelectItem = React.forwardRef<",
          "const SelectSeparator = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 10,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as SelectPrimitive from \"@radix-ui/react-select\"",
          "import { Check, ChevronDown, ChevronUp } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export {"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
      "lines": 160,
      "size": 5745,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2725885+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/hooks/use-toast.ts": {
      "analysis": {
        "types": [
          "type ToasterToast = ToastProps & {",
          "type ActionType = typeof actionTypes",
          "type Action =",
          "type Toast = Omit<ToasterToast, \"id\">"
        ],
        "classes": [],
        "components": [
          "const TOAST_LIMIT = 1",
          "const TOAST_REMOVE_DELAY = 1000000",
          "const actionTypes = {",
          "function genId() {",
          "const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()",
          "const addToRemoveQueue = (toastId: string) => {",
          "const timeout = setTimeout(() => {",
          "export const reducer = (state: State, action: Action): State => {",
          "function dispatch(action: Action) {",
          "function toast({ ...props }: Toast) {",
          "const id = genId()",
          "const update = (props: ToasterToast) =>",
          "const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })",
          "function useToast() {",
          "const index = listeners.indexOf(setState)"
        ],
        "interfaces": [
          "interface State {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 15,
          "typesCount": 4,
          "hooksCount": 4,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 7
        },
        "imports": [
          "import * as React from \"react\"",
          "import type {"
        ],
        "hasTypeScript": true,
        "functions": [
          "function genId() {",
          "const addToRemoveQueue = (toastId: string) => {",
          "function dispatch(action: Action) {",
          "function toast({ ...props }: Toast) {",
          "const update = (props: ToasterToast) =>",
          "const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })",
          "function useToast() {"
        ],
        "exports": [
          "export const reducer = (state: State, action: Action): State => {",
          "export { useToast, toast }"
        ],
        "hooks": [
          "function useToast() {",
          "const [state, setState] = React.useState<State>(memoryState)",
          "React.useEffect(() => {",
          "export { useToast, toast }"
        ]
      },
      "content": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
      "lines": 195,
      "size": 3948,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.3769463+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/services/materialsSync.ts": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export const MATERIALS_LS_KEY = 'wasser_materials'",
          "export function readLocalMaterials(): MaterialLocal[] {",
          "const raw = localStorage.getItem(MATERIALS_LS_KEY)",
          "const val = raw ? JSON.parse(raw) : []",
          "export function writeLocalMaterials(items: MaterialLocal[]): void {",
          "function rowToLocal(r: MaterialRow): MaterialLocal {",
          "const now = new Date().toISOString()",
          "const tags =",
          "function localToRow(m: MaterialLocal): MaterialRow {",
          "function client(): SupabaseClient | null {",
          "export async function pullMaterialsToLocal(): Promise<number> {",
          "const c = client()",
          "const list = (data || []).map(rowToLocal)",
          "export async function upsertMaterial(item: MaterialLocal): Promise<void> {",
          "const c = client()",
          "const row = localToRow({ ...item, updatedAt: new Date().toISOString(), version: (item.version || 1) + 1 })",
          "export async function upsertMaterialsBatch(items: MaterialLocal[]): Promise<void> {",
          "const c = client()",
          "const rows = items.map((m) => localToRow({ ...m, updatedAt: new Date().toISOString(), version: (m.version || 1) + 1 }))",
          "export async function deleteMaterial(id: string): Promise<void> {",
          "const c = client()",
          "export function subscribeMaterialsChanges(onChange: () => void): () => void {",
          "const c = client()",
          "const channel = c"
        ],
        "interfaces": [
          "export interface MaterialRow {",
          "export interface MaterialLocal {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 24,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 2,
          "exportsCount": 10,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 3
        },
        "imports": [
          "import type { SupabaseClient } from '@supabase/supabase-js'",
          "import { getSupabase, isSupabaseEnabled } from './supabase'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function rowToLocal(r: MaterialRow): MaterialLocal {",
          "function localToRow(m: MaterialLocal): MaterialRow {",
          "function client(): SupabaseClient | null {"
        ],
        "exports": [
          "export const MATERIALS_LS_KEY = 'wasser_materials'",
          "export interface MaterialRow {",
          "export interface MaterialLocal {",
          "export function readLocalMaterials(): MaterialLocal[] {",
          "export function writeLocalMaterials(items: MaterialLocal[]): void {",
          "export async function pullMaterialsToLocal(): Promise<number> {",
          "export async function upsertMaterial(item: MaterialLocal): Promise<void> {",
          "export async function upsertMaterialsBatch(items: MaterialLocal[]): Promise<void> {",
          "export async function deleteMaterial(id: string): Promise<void> {",
          "export function subscribeMaterialsChanges(onChange: () => void): () => void {"
        ],
        "hooks": []
      },
      "content": "/**\n * Адаптер синхронизации материалов с Supabase.\n * Содержит pull (из БД в localStorage), upsert/delete (в БД), realtime-подписку.\n */\n\nimport type { SupabaseClient } from '@supabase/supabase-js'\nimport { getSupabase, isSupabaseEnabled } from './supabase'\n\n/** Ключ localStorage, совместимый со страницей Materials и прайс-листом */\nexport const MATERIALS_LS_KEY = 'wasser_materials'\n\n/** Тип строки в БД (минимально необходимый) */\nexport interface MaterialRow {\n  id: string\n  name: string\n  article: string\n  category: string | null\n  unit: string | null\n  price: number | null\n  supplier?: string | null\n  description?: string | null\n  tags?: string[] | string | null\n  is_active?: boolean | null\n  created_at?: string | null\n  updated_at?: string | null\n  version?: number | null\n}\n\n/** Локальная модель в UI страницы Materials (расширенная) */\nexport interface MaterialLocal {\n  id: string\n  name: string\n  article: string\n  category: string\n  unit: string\n  price: number\n  supplier?: string\n  description?: string\n  tags: string[]\n  isActive: boolean\n  createdAt: string\n  updatedAt: string\n  version: number\n}\n\n/** Прочитать локальные материалы */\nexport function readLocalMaterials(): MaterialLocal[] {\n  try {\n    const raw = localStorage.getItem(MATERIALS_LS_KEY)\n    const val = raw ? JSON.parse(raw) : []\n    return Array.isArray(val) ? val : val && typeof val === 'object' ? Object.values(val) : []\n  } catch {\n    return []\n  }\n}\n\n/** Сохранить локальные материалы */\nexport function writeLocalMaterials(items: MaterialLocal[]): void {\n  try {\n    localStorage.setItem(MATERIALS_LS_KEY, JSON.stringify(items))\n  } catch {\n    /* noop */\n  }\n}\n\n/** Row -> Local */\nfunction rowToLocal(r: MaterialRow): MaterialLocal {\n  const now = new Date().toISOString()\n  const tags =\n    Array.isArray(r.tags) ? (r.tags as string[]).filter(Boolean)\n      : typeof r.tags === 'string' ? r.tags.split(/[,;]\\s*/).filter(Boolean)\n      : []\n  return {\n    id: String(r.id),\n    name: r.name || '',\n    article: r.article || '',\n    category: r.category || '',\n    unit: r.unit || 'шт',\n    price: Number(r.price || 0),\n    supplier: r.supplier || undefined,\n    description: r.description || undefined,\n    tags,\n    isActive: r.is_active !== false,\n    createdAt: r.created_at || now,\n    updatedAt: r.updated_at || now,\n    version: r.version || 1,\n  }\n}\n\n/** Local -> Row */\nfunction localToRow(m: MaterialLocal): MaterialRow {\n  return {\n    id: m.id,\n    name: m.name,\n    article: m.article,\n    category: m.category,\n    unit: m.unit,\n    price: m.price,\n    supplier: m.supplier ?? null,\n    description: m.description ?? null,\n    tags: m.tags,\n    is_active: m.isActive,\n    created_at: m.createdAt,\n    updated_at: m.updatedAt,\n    version: m.version,\n  }\n}\n\n/** Получить клиент (гарантированно либо SupabaseClient, либо null) */\nfunction client(): SupabaseClient | null {\n  return getSupabase()\n}\n\n/** Забрать материалы из Supabase в localStorage. Возвращает количество записей. */\nexport async function pullMaterialsToLocal(): Promise<number> {\n  if (!isSupabaseEnabled()) return 0\n  const c = client()\n  if (!c) return 0\n  const { data, error } = await c.from('materials').select('*').order('updated_at', { ascending: false })\n  if (error) throw error\n  const list = (data || []).map(rowToLocal)\n  writeLocalMaterials(list)\n  return list.length\n}\n\n/** Upsert одного материала в Supabase */\nexport async function upsertMaterial(item: MaterialLocal): Promise<void> {\n  if (!isSupabaseEnabled()) return\n  const c = client()\n  if (!c) return\n  const row = localToRow({ ...item, updatedAt: new Date().toISOString(), version: (item.version || 1) + 1 })\n  const { error } = await c.from('materials').upsert([row], { onConflict: 'id' })\n  if (error) throw error\n}\n\n/** Пакетный upsert материалов */\nexport async function upsertMaterialsBatch(items: MaterialLocal[]): Promise<void> {\n  if (!isSupabaseEnabled() || items.length === 0) return\n  const c = client()\n  if (!c) return\n  const rows = items.map((m) => localToRow({ ...m, updatedAt: new Date().toISOString(), version: (m.version || 1) + 1 }))\n  const { error } = await c.from('materials').upsert(rows, { onConflict: 'id' })\n  if (error) throw error\n}\n\n/** Удалить материал в Supabase */\nexport async function deleteMaterial(id: string): Promise<void> {\n  if (!isSupabaseEnabled()) return\n  const c = client()\n  if (!c) return\n  const { error } = await c.from('materials').delete().eq('id', id)\n  if (error) throw error\n}\n\n/** Подписка на realtime-изменения таблицы materials. Возвращает функцию отписки. */\nexport function subscribeMaterialsChanges(onChange: () => void): () => void {\n  const c = client()\n  if (!isSupabaseEnabled() || !c) return () => {}\n  // Канал Postgres Changes\n  const channel = c\n    .channel('public:materials')\n    .on('postgres_changes', { event: '*', schema: 'public', table: 'materials' }, () => {\n      // Любое изменение — перетянем данные локально\n      onChange()\n    })\n    .subscribe()\n  return () => {\n    try {\n      c.removeChannel(channel)\n    } catch {\n      /* noop */\n    }\n  }\n}",
      "lines": 174,
      "size": 5529,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.4306209+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/home/WeatherCard.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const BISHKEK = { lat: 42.8746, lon: 74.5698, label: 'Бишкек' }",
          "const LS_KEY = 'wasser_weather_current'",
          "const CACHE_TTL = 20 * 60 * 1000",
          "function weatherMeta(code?: number): { icon: React.ReactNode; label: string } {",
          "function readCache(): WeatherState | null {",
          "const raw = localStorage.getItem(LS_KEY)",
          "const data = JSON.parse(raw) as WeatherState",
          "function writeCache(state: WeatherState): void {",
          "export default function WeatherCard(): React.ReactElement {",
          "async function loadByCoords(lat: number, lon: number, placeLabel: string) {",
          "const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&timezone=auto`",
          "const resp = await fetch(url, { cache: 'no-store' })",
          "const json = await resp.json()",
          "const cw = json?.current_weather",
          "const cached = readCache()",
          "const meta = useMemo(() => weatherMeta(state.weathercode), [state.weathercode])"
        ],
        "interfaces": [
          "interface WeatherState {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 16,
          "typesCount": 0,
          "hooksCount": 4,
          "interfacesCount": 1,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 3
        },
        "imports": [
          "import React, { useEffect, useMemo, useState } from 'react'",
          "import Card from '../common/Card'",
          "import { MapPin, Sun, Cloud, CloudRain, Snowflake, Wind, RefreshCw } from 'lucide-react'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function weatherMeta(code?: number): { icon: React.ReactNode; label: string } {",
          "function readCache(): WeatherState | null {",
          "function writeCache(state: WeatherState): void {"
        ],
        "exports": [
          "export default function WeatherCard(): React.ReactElement {"
        ],
        "hooks": [
          "import React, { useEffect, useMemo, useState } from 'react'",
          "const [state, setState] = useState<WeatherState>({ loading: true, place: BISHKEK.label })",
          "useEffect(() => {",
          "const meta = useMemo(() => weatherMeta(state.weathercode), [state.weathercode])"
        ]
      },
      "content": "/**\n * WeatherCard — карточка с текущей погодой.\n * Источник: open-meteo.com (без ключа). Геолокация пользователя с фолбэком на Бишкек.\n */\n\nimport React, { useEffect, useMemo, useState } from 'react'\nimport Card from '../common/Card'\nimport { MapPin, Sun, Cloud, CloudRain, Snowflake, Wind, RefreshCw } from 'lucide-react'\n\n/** Состояние погоды */\ninterface WeatherState {\n  loading: boolean\n  error?: string\n  /** Город/метка местоположения для отображения */ place: string\n  /** Температура, °C */ temperature?: number\n  /** Скорость ветра, м/с */ windspeed?: number\n  /** Код погоды по Open-Meteo */ weathercode?: number\n  /** Обновлено */ updatedAt?: number\n}\n\n/** Бишкек — фолбэк координат */\nconst BISHKEK = { lat: 42.8746, lon: 74.5698, label: 'Бишкек' }\n\n/** Ключ для лёгкого кэша */\nconst LS_KEY = 'wasser_weather_current'\n/** TTL кэша (мс) — 20 минут */\nconst CACHE_TTL = 20 * 60 * 1000\n\n/** Подбор иконки и описания по коду погоды Open-Meteo */\nfunction weatherMeta(code?: number): { icon: React.ReactNode; label: string } {\n  if (code == null) return { icon: <Cloud size={16} />, label: '—' }\n  if (code === 0) return { icon: <Sun size={16} className=\"text-amber-500\" />, label: 'Ясно' }\n  if ([1, 2, 3].includes(code)) return { icon: <Sun size={16} className=\"text-amber-500\" />, label: 'Переменная облачность' }\n  if ([45, 48].includes(code)) return { icon: <Cloud size={16} />, label: 'Туман' }\n  if ([51, 53, 55, 56, 57].includes(code)) return { icon: <CloudRain size={16} className=\"text-blue-600\" />, label: 'Морось' }\n  if ([61, 63, 65, 80, 81, 82].includes(code)) return { icon: <CloudRain size={16} className=\"text-blue-600\" />, label: 'Дождь' }\n  if ([66, 67].includes(code)) return { icon: <CloudRain size={16} className=\"text-blue-600\" />, label: 'Ледяной дождь' }\n  if ([71, 73, 75, 77, 85, 86].includes(code)) return { icon: <Snowflake size={16} className=\"text-sky-600\" />, label: 'Снег' }\n  if (code === 95) return { icon: <CloudRain size={16} className=\"text-blue-600\" />, label: 'Гроза' }\n  if ([96, 97].includes(code)) return { icon: <CloudRain size={16} className=\"text-blue-600\" />, label: 'Гроза, град' }\n  return { icon: <Cloud size={16} />, label: 'Облачно' }\n}\n\n/** Прочитать кэш */\nfunction readCache(): WeatherState | null {\n  try {\n    const raw = localStorage.getItem(LS_KEY)\n    if (!raw) return null\n    const data = JSON.parse(raw) as WeatherState\n    if (data.updatedAt && Date.now() - data.updatedAt < CACHE_TTL) return data\n  } catch {\n    /* noop */\n  }\n  return null\n}\n\n/** Сохранить кэш */\nfunction writeCache(state: WeatherState): void {\n  try {\n    localStorage.setItem(LS_KEY, JSON.stringify(state))\n  } catch {\n    /* noop */\n  }\n}\n\n/** Компонент карточки погоды */\nexport default function WeatherCard(): React.ReactElement {\n  const [state, setState] = useState<WeatherState>({ loading: true, place: BISHKEK.label })\n\n  /** Загрузка погоды для координат */\n  async function loadByCoords(lat: number, lon: number, placeLabel: string) {\n    setState((s) => ({ ...s, loading: true, error: undefined, place: placeLabel }))\n    try {\n      const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&timezone=auto`\n      const resp = await fetch(url, { cache: 'no-store' })\n      if (!resp.ok) throw new Error('Сервис погоды недоступен')\n      const json = await resp.json()\n      const cw = json?.current_weather\n      const next: WeatherState = {\n        loading: false,\n        place: placeLabel,\n        temperature: typeof cw?.temperature === 'number' ? cw.temperature : undefined,\n        windspeed: typeof cw?.windspeed === 'number' ? cw.windspeed : undefined,\n        weathercode: typeof cw?.weathercode === 'number' ? cw.weathercode : undefined,\n        updatedAt: Date.now(),\n      }\n      setState(next)\n      writeCache(next)\n    } catch (e: any) {\n      setState((s) => ({ ...s, loading: false, error: e?.message || 'Не удалось получить погоду' }))\n    }\n  }\n\n  /** Инициализация: кэш -> геолокация -> фолбэк Бишкек */\n  useEffect(() => {\n    const cached = readCache()\n    if (cached) {\n      setState({ ...cached, loading: false })\n      return\n    }\n\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        (pos) => {\n          const { latitude, longitude } = pos.coords\n          loadByCoords(latitude, longitude, 'Ваше местоположение')\n        },\n        () => {\n          loadByCoords(BISHKEK.lat, BISHKEK.lon, BISHKEK.label)\n        },\n        { enableHighAccuracy: false, timeout: 8000, maximumAge: 5 * 60 * 1000 },\n      )\n    } else {\n      loadByCoords(BISHKEK.lat, BISHKEK.lon, BISHKEK.label)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const meta = useMemo(() => weatherMeta(state.weathercode), [state.weathercode])\n\n  return (\n    <Card className=\"p-4\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"inline-flex items-center gap-2\">\n          <span className=\"text-sm font-semibold text-gray-900\">Погода</span>\n          <span className=\"inline-flex items-center gap-1 text-xs text-gray-500\">\n            <MapPin size={12} />\n            {state.place}\n          </span>\n        </div>\n        <button\n          type=\"button\"\n          onClick={() => loadByCoords(BISHKEK.lat, BISHKEK.lon, state.place || BISHKEK.label)}\n          className=\"inline-flex items-center justify-center w-8 h-8 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-700\"\n          title=\"Обновить\"\n          aria-label=\"Обновить\"\n        >\n          <RefreshCw size={14} />\n        </button>\n      </div>\n\n      {state.loading ? (\n        <div className=\"animate-pulse space-y-2\">\n          <div className=\"h-8 bg-gray-100 rounded\" />\n          <div className=\"h-4 bg-gray-100 rounded\" />\n        </div>\n      ) : state.error ? (\n        <div className=\"text-sm text-red-600 bg-red-50 border border-red-200 rounded p-2\">{state.error}</div>\n      ) : (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-3xl font-extrabold text-gray-900\">\n            {typeof state.temperature === 'number' ? `${Math.round(state.temperature)}°C` : '—'}\n          </div>\n          <div className=\"text-sm text-gray-700 inline-flex items-center gap-2\">\n            {meta.icon}\n            <span>{meta.label}</span>\n            <span className=\"inline-flex items-center gap-1 text-gray-500 ml-3\">\n              <Wind size={14} />\n              {typeof state.windspeed === 'number' ? `${Math.round(state.windspeed)} м/с` : '—'}\n            </span>\n          </div>\n        </div>\n      )}\n      <div className=\"mt-2 text-xs text-gray-500\">\n        {state.updatedAt ? `Обновлено: ${new Date(state.updatedAt).toLocaleString('ru-RU', { dateStyle: 'medium', timeStyle: 'short' })}` : '—'}\n      </div>\n    </Card>\n  )\n}\n",
      "lines": 170,
      "size": 7430,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3318247+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/common/Card.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Card = memo(function Card({"
        ],
        "interfaces": [
          "export interface CardProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React, { memo } from 'react'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface CardProps {",
          "export default Card"
        ],
        "hooks": []
      },
      "content": "/**\n * Карточка-контейнер\n * Универсальный блок с рамкой и скруглением\n */\n\nimport React, { memo } from 'react'\n\n/**\n * Пропсы карточки\n */\nexport interface CardProps {\n  /** Внутреннее содержимое */\n  children: React.ReactNode\n  /** Класс оформления */\n  className?: string\n  /** Включить hover-анимацию */\n  hover?: boolean\n  /** Убрать паддинги */\n  noPadding?: boolean\n}\n\n/**\n * Card — переиспользуемая карточка\n */\nconst Card = memo(function Card({\n  children,\n  className = '',\n  hover = false,\n  noPadding = false,\n}: CardProps): React.ReactElement {\n  return (\n    <div\n      className={`bg-white border border-gray-200 rounded-xl ${hover ? 'hover:shadow-md hover:-translate-y-0.5 transition-all' : ''} ${\n        noPadding ? '' : 'p-5'\n      } ${className}`}\n    >\n      {children}\n    </div>\n  )\n})\n\nexport default Card\n",
      "lines": 43,
      "size": 988,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3513813+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/pages/PriceList.tsx": {
      "analysis": {
        "types": [
          "type Orientation = 'portrait' | 'landscape'",
          "type GroupBy = 'none' | 'productType' | 'collection'",
          "type ThemeKey = 'gradientModern' | 'minimalNordic' | 'executiveBlue'",
          "type Density = 'normal' | 'compact'",
          "type RGB = [number, number, number]"
        ],
        "classes": [],
        "components": [
          "const formatCurrency = (amount: number, currency = 'KGS', locale = 'ru-RU') =>",
          "const formatDate = (d: string | Date) =>",
          "function getLS<T>(key: string, fallback: T): T {",
          "const raw = localStorage.getItem(`wasser_${key}`)",
          "function calcPrice(product: Product, materials: Material[], settings: PriceSettings) {",
          "const materialCost = techCardArr.reduce((sum: number, it: any) => {",
          "const m = materials.find((mm) => mm.id === it.materialId)",
          "const pt = settings.productTypes.find((p) => p.id === product.product_type_id)",
          "const workCost = pt?.workCost || 0",
          "const basePrice = materialCost + workCost",
          "const afterType = basePrice * (1 + (pt?.markup || 0) / 100)",
          "const ft = settings.finishTypes.find((f) => f.id === product.finish_type_id)",
          "const finalPrice = afterType * (1 + (ft?.markup || 0) / 100)",
          "const loadedFonts = new Set<string>()",
          "function arrayBufferToBinaryString(buffer: ArrayBuffer): string {",
          "const bytes = new Uint8Array(buffer)",
          "const CHUNK = 0x8000",
          "const sub = bytes.subarray(i, i + CHUNK)",
          "function arrayBufferToBase64(buffer: ArrayBuffer): string {",
          "const bytes = new Uint8Array(buffer)",
          "const chunk = 0x8000",
          "const sub = bytes.subarray(i, i + chunk)",
          "function hexToRgb(hex: string): RGB {",
          "const m = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex.trim())",
          "function toRGB(color: string | number[] | undefined, fallback: RGB = [0, 0, 0]): RGB {",
          "function buildColumns(options: PriceListOptions): Array<{ header: string; key: string }> {",
          "export default function PriceListPage(): React.ReactElement {",
          "const normalizeArr = (v: any) =>",
          "const rawMaterials = getLS<any>('materials', [])",
          "const rawProducts = getLS<any>('products', [])",
          "const rawPS = getLS<any>('price_settings', { productTypes: [], finishTypes: [] })",
          "const computed = useMemo(() => {",
          "const rows = products.map((p) => {",
          "const prices = calcPrice(p, materials, priceSettings)",
          "const typeName = priceSettings.productTypes.find((t) => t.id === p.product_type_id)?.name || ''",
          "const finishName = priceSettings.finishTypes.find((t) => t.id === p.finish_type_id)?.name || ''",
          "const groups = useMemo(() => {",
          "const map = new Map<string, any[]>()",
          "const key = row.productType || 'Без типа'",
          "const map = new Map<string, any[]>()",
          "const key = row.collectionId || 'Без коллекции'",
          "const updateOption = useCallback((patch: Partial<PriceListOptions>) => setOptions((prev) => ({ ...prev, ...patch })), [])",
          "const colsForPrint = useMemo(() => buildColumns(options), [options])",
          "const getActiveTheme = useCallback(",
          "const base = THEMES[options.styleKey]",
          "const primary = overridePrimary || options.brandColor || base.colors.primary",
          "const drawHeaderFooter = useCallback(",
          "const w = doc.internal.pageSize.getWidth()",
          "const h = doc.internal.pageSize.getHeight()",
          "const bandRGB = toRGB(theme.colors.primary, [37, 99, 235])",
          "const lineRGB = toRGB(theme.colors.primary, [37, 99, 235])",
          "const brandRGB = toRGB(theme.colors.primary, [37, 99, 235])",
          "const brandY = theme.header.topBand ? Math.max(14, theme.header.bandHeight - 6) : margin",
          "const subRGB = toRGB('#111111', [17, 17, 17])",
          "const footRGB = toRGB('#6b7280', [107, 114, 128])",
          "const imgW = 36",
          "const imgH = 18",
          "const handleFontFile = useCallback(async (file: File | null) => {",
          "const buf = await file.arrayBuffer()",
          "const binary = arrayBufferToBinaryString(buf)",
          "const base = file.name.replace(/\\.[^.]+$/, '').replace(/[^A-Za-z0-9_]+/g, '_') || 'LocalFont'",
          "const uniqueName = `${base}_${Date.now()}`",
          "async function imageUrlToDataUrl(url: string): Promise<{ dataUrl: string; imgType: 'PNG' | 'JPEG' } | null> {",
          "const resp = await fetch(url, { cache: 'no-store' })",
          "const blob = await resp.blob()",
          "const buffer = await blob.arrayBuffer()",
          "const base64 = arrayBufferToBase64(buffer)",
          "const mime = blob.type || 'image/png'",
          "const isPng = /png/i.test(mime)",
          "const isJpg = /jpe?g/i.test(mime)",
          "const dataUrl = `data:${mime};base64,${base64}`",
          "const registerFont = useCallback(",
          "const candidates = [",
          "const resp = await fetch(candidate, { cache: 'no-store', mode: 'cors' as RequestMode })",
          "const buffer = await resp.arrayBuffer()",
          "const binary = arrayBufferToBinaryString(buffer)",
          "const handleGeneratePdf = useCallback(async () => {",
          "const JsPdfCtor = getJsPdfCtor()",
          "const theme = getActiveTheme()",
          "const doc = new JsPdfCtor({",
          "const fontOK = await registerFont(doc, options.fontUrl, options.fontName)",
          "const baseFontSize = options.density === 'compact' ? 9 : 10",
          "const fetched = await imageUrlToDataUrl(options.logoUrl)",
          "const w = doc.internal.pageSize.getWidth()",
          "const bandRGB = toRGB(theme.colors.primary, [37, 99, 235])",
          "const bandHeight = theme.header.topBand ? Math.max(120, theme.header.bandHeight * 6) : 160",
          "const fetched = footerLogo || (await imageUrlToDataUrl(options.logoUrl))",
          "const dateRGB = toRGB('#111111', [17, 17, 17])",
          "const autoTable = (doc as any).autoTable?.bind(doc)",
          "const tableHeadBg = toRGB(theme.colors.table.headBg as any, hexToRgb('#ffffff'))",
          "const tableHeadText = toRGB(theme.colors.table.headText as any, hexToRgb('#111111'))",
          "const tableBorder = toRGB(theme.colors.table.border as any, hexToRgb('#e5e7eb'))",
          "const tableRowStripe = theme.colors.table.rowStripe ? toRGB(theme.colors.table.rowStripe as any, hexToRgb('#f1f5f9')) : null",
          "const textRGB = toRGB(theme.colors.text, hexToRgb('#111111'))",
          "const primaryRGB = toRGB(theme.colors.primary, hexToRgb('#2563eb'))",
          "const cols = buildColumns(options)",
          "const priceColIdx = cols.findIndex((c) => c.key === 'finalPrice')",
          "const imageCache = new Map<string, { dataUrl: string; imgType: 'PNG' | 'JPEG' }>()",
          "const urls = new Set<string>()",
          "const fetched = await imageUrlToDataUrl(url)",
          "const firstStartY = options.includeCover ? 60 : 40",
          "const headerY = (doc as any).lastAutoTable?.finalY ? (doc as any).lastAutoTable.finalY + 24 : nextStartY",
          "const rowsForPdf = group.items.map((row: any) => {",
          "const groupTotal = group.items.reduce((sum: number, r: any) => sum + (Number(r.finalPrice) || 0), 0)",
          "const footRow =",
          "const cellPadding = options.density === 'compact' ? 4 : 6",
          "const pageNumber = doc.internal.getCurrentPageInfo",
          "const pageCount = doc.internal.getNumberOfPages()",
          "const colIdx = data.column.index",
          "const key = cols[colIdx]?.key",
          "const colIdx = data.column.index",
          "const key = cols[colIdx]?.key",
          "const url = data.cell.raw as string",
          "const padding = 2",
          "const x = data.cell.x + padding",
          "const y = data.cell.y + padding",
          "const w = Math.max(16, data.cell.width - padding * 2)",
          "const h = Math.max(16, data.cell.height - padding * 2)",
          "const targetW = Math.min(56, w)",
          "const targetH = Math.min(40, h)",
          "const grandTotal = computed.reduce((sum, r: any) => sum + (Number(r.finalPrice) || 0), 0)",
          "const lastY = (doc as any).lastAutoTable?.finalY",
          "const startY = lastY ? lastY + 24 : (options.includeCover ? 60 : 40)",
          "const summaryRow = cols.map((_c, i) => {",
          "const pageNumber = doc.internal.getCurrentPageInfo",
          "const pageCount = doc.internal.getNumberOfPages()",
          "const filename = `PriceList_${new Date().toISOString().slice(0, 10)}.pdf`",
          "const handlePrintHtml = useCallback(() => {",
          "const handleNordicDemo = useCallback(async (): Promise<void> => {",
          "const themeForPrint = useMemo(() => getActiveTheme(), [getActiveTheme])",
          "const revokeTestUrl = useCallback(() => {",
          "const handleCheckPdf = useCallback(async () => {",
          "const JsPdfCtor = getJsPdfCtor()",
          "const doc = new JsPdfCtor({ unit: 'pt', format: 'a4', orientation: 'portrait' })",
          "const autoTableFn = (doc as any).autoTable?.bind(doc)",
          "const autoTableOk = Boolean(autoTableFn)",
          "const fontOk = await registerFont(doc, options.fontUrl, options.fontName).catch(() => false)",
          "const url = URL.createObjectURL(blob)",
          "const demo = {",
          "const toast = document.createElement('div')",
          "function StylePreviewBar({ styleKey, brandColor }: { styleKey: ThemeKey; brandColor: string }) {",
          "const getPreview = (key: ThemeKey) => {",
          "const c = brandColor || (THEMES[key].colors.primary as string)",
          "function PrintStyles({ orientation, theme }: { orientation: Orientation; theme: PdfTheme }) {",
          "const brand = toRGB(theme.colors.primary, [37, 99, 235])",
          "const headBg = toRGB(theme.colors.table.headBg as any, [255, 255, 255])",
          "const headText = toRGB(theme.colors.table.headText as any, [17, 17, 17])",
          "const rowStripe = theme.colors.table.rowStripe ? toRGB(theme.colors.table.rowStripe as any, [241, 245, 249]) : null",
          "const border = toRGB(theme.colors.table.border as any, [229, 231, 235])",
          "const text = toRGB(theme.colors.text as any, [17, 17, 17])",
          "const css = `",
          "function PrintPreviewHtml(props: {",
          "const renderCell = (row: any, key: string) => {",
          "const img = e.currentTarget as HTMLImageElement",
          "const priceIdx = columns.findIndex((c) => c.key === 'finalPrice')",
          "const grandTotal = useMemo(() => {",
          "const img = e.currentTarget as HTMLImageElement",
          "const groupTotal = g.items.reduce((sum, r: any) => sum + (Number(r.finalPrice) || 0), 0)"
        ],
        "interfaces": [
          "interface Material {",
          "interface TechCardItem {",
          "interface Product {",
          "interface PriceType {",
          "interface FinishType {",
          "interface PriceSettings {",
          "interface PriceListOptions {",
          "interface PdfTheme {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 158,
          "typesCount": 5,
          "hooksCount": 32,
          "interfacesCount": 8,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 15
        },
        "imports": [
          "import React, { useCallback, useEffect, useMemo, useState } from 'react'",
          "import { ensureJsPdf, getJsPdfCtor } from '../lib/pdf/loader'",
          "import { generateNordicSamplePdf } from '../lib/pdf/examples/nordicExample'"
        ],
        "hasTypeScript": true,
        "functions": [
          "const formatCurrency = (amount: number, currency = 'KGS', locale = 'ru-RU') =>",
          "const formatDate = (d: string | Date) =>",
          "function getLS<T>(key: string, fallback: T): T {",
          "function calcPrice(product: Product, materials: Material[], settings: PriceSettings) {",
          "function arrayBufferToBinaryString(buffer: ArrayBuffer): string {",
          "function arrayBufferToBase64(buffer: ArrayBuffer): string {",
          "function hexToRgb(hex: string): RGB {",
          "function toRGB(color: string | number[] | undefined, fallback: RGB = [0, 0, 0]): RGB {",
          "function buildColumns(options: PriceListOptions): Array<{ header: string; key: string }> {",
          "const normalizeArr = (v: any) =>",
          "function StylePreviewBar({ styleKey, brandColor }: { styleKey: ThemeKey; brandColor: string }) {",
          "const getPreview = (key: ThemeKey) => {",
          "function PrintStyles({ orientation, theme }: { orientation: Orientation; theme: PdfTheme }) {",
          "function PrintPreviewHtml(props: {",
          "const renderCell = (row: any, key: string) => {"
        ],
        "exports": [
          "export default function PriceListPage(): React.ReactElement {"
        ],
        "hooks": [
          "import React, { useCallback, useEffect, useMemo, useState } from 'react'",
          "url: 'https://raw.githubusercontent.com/google/fonts/main/ofl/notosans/NotoSans-Regular.ttf',",
          "url: 'https://raw.githubusercontent.com/google/fonts/main/ofl/ptsans/PTSans-Regular.ttf',",
          "url: 'https://raw.githubusercontent.com/google/fonts/main/apache/roboto/Roboto-Regular.ttf',",
          "const [options, setOptions] = useState<PriceListOptions>({",
          "const [loadingPdf, setLoadingPdf] = useState(false)",
          "const [loadingNordicDemo, setLoadingNordicDemo] = useState(false)",
          "const [error, setError] = useState<string | null>(null)",
          "const [fontWarning, setFontWarning] = useState<string | null>(null)",
          "const [fontInfo, setFontInfo] = useState<string | null>(null)",
          "const [pdfDiag, setPdfDiag] = useState<{",
          "const computed = useMemo(() => {",
          "const groups = useMemo(() => {",
          "useEffect(() => {",
          "const updateOption = useCallback((patch: Partial<PriceListOptions>) => setOptions((prev) => ({ ...prev, ...patch })), [])",
          "const colsForPrint = useMemo(() => buildColumns(options), [options])",
          "const getActiveTheme = useCallback(",
          "const drawHeaderFooter = useCallback(",
          "const handleFontFile = useCallback(async (file: File | null) => {",
          "const registerFont = useCallback(",
          "'https://raw.githubusercontent.com/google/fonts/main/apache/roboto/Roboto-Regular.ttf',",
          "'https://raw.githubusercontent.com/google/fonts/main/ofl/ptsans/PTSans-Regular.ttf',",
          "'https://raw.githubusercontent.com/google/fonts/main/ofl/notosans/NotoSans-Regular.ttf',",
          "const handleGeneratePdf = useCallback(async () => {",
          "const handlePrintHtml = useCallback(() => {",
          "const handleNordicDemo = useCallback(async (): Promise<void> => {",
          "const themeForPrint = useMemo(() => getActiveTheme(), [getActiveTheme])",
          "const revokeTestUrl = useCallback(() => {",
          "const handleCheckPdf = useCallback(async () => {",
          "useEffect(() => {",
          "placeholder=\"https://raw.githubusercontent.com/google/fonts/main/ofl/notosans/NotoSans-Regular.ttf\"",
          "const grandTotal = useMemo(() => {"
        ]
      },
      "content": "/**\r\n * Страница \"Прайс-лист\" — генерация PDF и печать HTML с 3 шаблонами под A4.\r\n * Функции:\r\n * - Фото-миниатюры в PDF (префетч + отрисовка в ячейке)\r\n * - Итоги по группе (PDF foot / HTML tfoot)\r\n * - Разрыв между группами (PDF)\r\n * - Диагностика PDF окружения (jsPDF, autoTable, шрифт) + тестовый PDF\r\n * - Общий итог по всем товарам (PDF/HTML)\r\n * - Логотип в футере каждой PDF-страницы\r\n * - Миниатюры в HTML печати\r\n */\r\n\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport { ensureJsPdf, getJsPdfCtor } from '../lib/pdf/loader'\r\nimport { generateNordicSamplePdf } from '../lib/pdf/examples/nordicExample'\r\n\r\n/**\r\n * Интерфейсы данных (моки из localStorage)\r\n */\r\ninterface Material {\r\n  id: string\r\n  name: string\r\n  article: string\r\n  unit: string\r\n  price: number\r\n  created_at: string\r\n  updated_at: string\r\n}\r\ninterface TechCardItem {\r\n  materialId: string\r\n  quantity: number\r\n  _techCardId: string\r\n}\r\ninterface Product {\r\n  id: string\r\n  name: string\r\n  article: string\r\n  tech_card: TechCardItem[]\r\n  collection_id?: string | null\r\n  product_type_id?: string\r\n  finish_type_id?: string\r\n  image_url?: string | null\r\n  created_at: string\r\n  updated_at: string\r\n}\r\ninterface PriceType {\r\n  id: string\r\n  name: string\r\n  markup: number\r\n  workCost: number\r\n}\r\ninterface FinishType {\r\n  id: string\r\n  name: string\r\n  markup: number\r\n  workCost?: number\r\n}\r\ninterface PriceSettings {\r\n  productTypes: PriceType[]\r\n  finishTypes: FinishType[]\r\n}\r\n\r\n/**\r\n * Утилиты форматирования\r\n */\r\nconst formatCurrency = (amount: number, currency = 'KGS', locale = 'ru-RU') =>\r\n  new Intl.NumberFormat(locale, {\r\n    style: 'currency',\r\n    currency,\r\n    minimumFractionDigits: 2,\r\n  }).format(amount || 0)\r\n\r\nconst formatDate = (d: string | Date) =>\r\n  new Intl.DateTimeFormat('ru-RU', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  }).format(new Date(d))\r\n\r\n/**\r\n * Получить значения из localStorage с безопасным парсингом\r\n */\r\nfunction getLS<T>(key: string, fallback: T): T {\r\n  try {\r\n    const raw = localStorage.getItem(`wasser_${key}`)\r\n    return raw ? (JSON.parse(raw) as T) : fallback\r\n  } catch {\r\n    return fallback\r\n  }\r\n}\r\n\r\n/**\r\n * Расчет цен изделия по текущим настройкам\r\n */\r\nfunction calcPrice(product: Product, materials: Material[], settings: PriceSettings) {\r\n  const tcRaw: any = (product as any)?.tech_card\r\n  const techCardArr: any[] = Array.isArray(tcRaw)\r\n    ? tcRaw\r\n    : tcRaw && typeof tcRaw === 'object'\r\n      ? Object.values(tcRaw)\r\n      : []\r\n\r\n  if (techCardArr.length === 0) {\r\n    return { materialCost: 0, workCost: 0, basePrice: 0, finalPrice: 0 }\r\n  }\r\n\r\n  const materialCost = techCardArr.reduce((sum: number, it: any) => {\r\n    const m = materials.find((mm) => mm.id === it.materialId)\r\n    return sum + (Number(it.quantity) || 0) * (m?.price || 0)\r\n  }, 0)\r\n  const pt = settings.productTypes.find((p) => p.id === product.product_type_id)\r\n  const workCost = pt?.workCost || 0\r\n  const basePrice = materialCost + workCost\r\n  const afterType = basePrice * (1 + (pt?.markup || 0) / 100)\r\n  const ft = settings.finishTypes.find((f) => f.id === product.finish_type_id)\r\n  const finalPrice = afterType * (1 + (ft?.markup || 0) / 100)\r\n  return { materialCost, workCost, basePrice, finalPrice }\r\n}\r\n\r\n/**\r\n * Типы настроек страницы прайс-листа\r\n */\r\ntype Orientation = 'portrait' | 'landscape'\r\ntype GroupBy = 'none' | 'productType' | 'collection'\r\ntype ThemeKey = 'gradientModern' | 'minimalNordic' | 'executiveBlue'\r\ntype Density = 'normal' | 'compact'\r\n\r\n/**\r\n * Опции прайс-листа\r\n */\r\ninterface PriceListOptions {\r\n  brandName: string\r\n  brandColor: string\r\n  brandSub: string\r\n  logoUrl: string\r\n  includeCover: boolean\r\n  orientation: Orientation\r\n  margin: number\r\n  columns: {\r\n    image: boolean\r\n    article: boolean\r\n    name: boolean\r\n    productType: boolean\r\n    finishType: boolean\r\n    basePrice: boolean\r\n    finalPrice: boolean\r\n  }\r\n  groupBy: GroupBy\r\n  currency: string\r\n  locale: string\r\n  fontUrl: string\r\n  fontName: string\r\n  /** Локально загруженный TTF как бинарная строка (офлайн) */\r\n  fontBinary: string | null\r\n  /** Имя локального файла (для отображения пользователю) */\r\n  fontFileName: string | null\r\n  showFooter: boolean\r\n  /** Стиль шаблона PDF/печати */\r\n  styleKey: ThemeKey\r\n  /** Плотность строк таблицы */\r\n  density: Density\r\n  /** Итоги по группе */\r\n  showGroupTotals: boolean\r\n  /** Разрыв страниц между группами (PDF) */\r\n  pageBreakBetweenGroups: boolean\r\n  /** Общий итог по всем товарам (PDF/HTML) */\r\n  showGrandTotal: boolean\r\n}\r\n\r\n/**\r\n * Предустановленные шрифты (URL) — применяются для HTML-печати/превью\r\n */\r\nconst PRESET_FONTS: Array<{ label: string; url: string }> = [\r\n  {\r\n    label: 'Noto Sans (Cyrillic)',\r\n    url: 'https://raw.githubusercontent.com/google/fonts/main/ofl/notosans/NotoSans-Regular.ttf',\r\n  },\r\n  {\r\n    label: 'PT Sans (Cyrillic)',\r\n    url: 'https://raw.githubusercontent.com/google/fonts/main/ofl/ptsans/PTSans-Regular.ttf',\r\n  },\r\n  {\r\n    label: 'Roboto (Cyrillic)',\r\n    url: 'https://raw.githubusercontent.com/google/fonts/main/apache/roboto/Roboto-Regular.ttf',\r\n  },\r\n]\r\n\r\n/**\r\n * Тема PDF/печати: цвета и оформление (для HTML-print)\r\n */\r\ninterface PdfTheme {\r\n  key: ThemeKey\r\n  label: string\r\n  description: string\r\n  colors: {\r\n    primary: string\r\n    text: string\r\n    headerText: string\r\n    table: {\r\n      headBg: string | number[]\r\n      headText: string | number[]\r\n      rowStripe?: string | number[]\r\n      border?: string | number[]\r\n    }\r\n  }\r\n  header: {\r\n    topBand: boolean\r\n    bandHeight: number\r\n    underline: boolean\r\n  }\r\n  tableTheme: 'striped' | 'grid' | 'plain'\r\n}\r\n\r\n/**\r\n * Набор тем: 3 новые профессиональные шаблоны\r\n */\r\nconst THEMES: Record<ThemeKey, PdfTheme> = {\r\n  gradientModern: {\r\n    key: 'gradientModern',\r\n    label: 'Gradient Modern',\r\n    description: 'Современный акцент с верхней полосой и мягкой полосатой таблицей',\r\n    colors: {\r\n      primary: '#2563eb',\r\n      text: '#111111',\r\n      headerText: '#ffffff',\r\n      table: {\r\n        headBg: '#2563eb',\r\n        headText: [255, 255, 255],\r\n        rowStripe: '#f1f5f9',\r\n        border: '#e5e7eb',\r\n      },\r\n    },\r\n    header: {\r\n      topBand: true,\r\n      bandHeight: 24,\r\n      underline: false,\r\n    },\r\n    tableTheme: 'striped',\r\n  },\r\n  minimalNordic: {\r\n    key: 'minimalNordic',\r\n    label: 'Minimal Nordic',\r\n    description: 'Воздух и тонкие линии, без заливки заголовка',\r\n    colors: {\r\n      primary: '#0f172a',\r\n      text: '#111111',\r\n      headerText: '#111111',\r\n      table: {\r\n        headBg: '#ffffff',\r\n        headText: [17, 17, 17],\r\n        rowStripe: '#fafafa',\r\n        border: '#e5e7eb',\r\n      },\r\n    },\r\n    header: {\r\n      topBand: false,\r\n      bandHeight: 0,\r\n      underline: true,\r\n    },\r\n    tableTheme: 'plain',\r\n  },\r\n  executiveBlue: {\r\n    key: 'executiveBlue',\r\n    label: 'Executive Blue',\r\n    description: 'Строгая корпоративная сетка с четкими линиями',\r\n    colors: {\r\n      primary: '#1d4ed8',\r\n      text: '#111111',\r\n      headerText: '#ffffff',\r\n      table: {\r\n        headBg: '#1d4ed8',\r\n        headText: [255, 255, 255],\r\n        rowStripe: '#eef2ff',\r\n        border: '#c7d2fe',\r\n      },\r\n    },\r\n    header: {\r\n      topBand: false,\r\n      bandHeight: 0,\r\n      underline: true,\r\n    },\r\n    tableTheme: 'grid',\r\n  },\r\n}\r\n\r\n/**\r\n * Кэш подключенных шрифтов (для PDF)\r\n */\r\nconst loadedFonts = new Set<string>()\r\n\r\n/**\r\n * Утилита: ArrayBuffer -> бинарная строка (chunk-ами)\r\n */\r\nfunction arrayBufferToBinaryString(buffer: ArrayBuffer): string {\r\n  const bytes = new Uint8Array(buffer)\r\n  let binary = ''\r\n  const CHUNK = 0x8000\r\n  for (let i = 0; i < bytes.byteLength; i += CHUNK) {\r\n    const sub = bytes.subarray(i, i + CHUNK)\r\n    binary += String.fromCharCode.apply(null, Array.from(sub) as any)\r\n  }\r\n  return binary\r\n}\r\n\r\n/**\r\n * ArrayBuffer -> base64\r\n */\r\nfunction arrayBufferToBase64(buffer: ArrayBuffer): string {\r\n  let binary = ''\r\n  const bytes = new Uint8Array(buffer)\r\n  const chunk = 0x8000\r\n  for (let i = 0; i < bytes.length; i += chunk) {\r\n    const sub = bytes.subarray(i, i + chunk)\r\n    binary += String.fromCharCode.apply(null, Array.from(sub) as any)\r\n  }\r\n  return btoa(binary)\r\n}\r\n\r\n/**\r\n * Цветовые утилиты\r\n */\r\ntype RGB = [number, number, number]\r\nfunction hexToRgb(hex: string): RGB {\r\n  const m = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex.trim())\r\n  if (!m) return [0, 0, 0]\r\n  return [parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16)]\r\n}\r\nfunction toRGB(color: string | number[] | undefined, fallback: RGB = [0, 0, 0]): RGB {\r\n  if (!color) return fallback\r\n  if (Array.isArray(color) && color.length >= 3) {\r\n    return [Number(color[0]) || 0, Number(color[1]) || 0, Number(color[2]) || 0]\r\n  }\r\n  if (typeof color === 'string') {\r\n    return hexToRgb(color)\r\n  }\r\n  return fallback\r\n}\r\n\r\n/**\r\n * Построить список колонок из опций (общая функция для PDF и печати)\r\n */\r\nfunction buildColumns(options: PriceListOptions): Array<{ header: string; key: string }> {\r\n  const cols: { header: string; key: string }[] = []\r\n  if (options.columns.image) cols.push({ header: 'Фото', key: 'image' })\r\n  if (options.columns.article) cols.push({ header: 'Артикул', key: 'article' })\r\n  if (options.columns.name) cols.push({ header: 'Наименование', key: 'name' })\r\n  if (options.columns.productType) cols.push({ header: 'Тип', key: 'productType' })\r\n  if (options.columns.finishType) cols.push({ header: 'Отделка', key: 'finishType' })\r\n  if (options.columns.basePrice) cols.push({ header: 'Себестоимость', key: 'basePrice' })\r\n  if (options.columns.finalPrice) cols.push({ header: 'Цена', key: 'finalPrice' })\r\n  return cols\r\n}\r\n\r\n/**\r\n * Компонент страницы прайс-листа\r\n */\r\nexport default function PriceListPage(): React.ReactElement {\r\n  // Нормализация структур из localStorage\r\n  const normalizeArr = (v: any) =>\r\n    Array.isArray(v) ? v : v && typeof v === 'object' ? Object.values(v) : []\r\n\r\n  // Данные из localStorage\r\n  const rawMaterials = getLS<any>('materials', [])\r\n  const rawProducts = getLS<any>('products', [])\r\n  const rawPS = getLS<any>('price_settings', { productTypes: [], finishTypes: [] })\r\n\r\n  const materials: Material[] = normalizeArr(rawMaterials)\r\n  const products: Product[] = normalizeArr(rawProducts)\r\n  const priceSettings: PriceSettings = {\r\n    productTypes: normalizeArr(rawPS.productTypes),\r\n    finishTypes: normalizeArr(rawPS.finishTypes),\r\n  }\r\n\r\n  const [options, setOptions] = useState<PriceListOptions>({\r\n    brandName: 'WASSER PRO',\r\n    brandSub: 'Прайс-лист на продукцию',\r\n    brandColor: '#2563eb',\r\n    logoUrl: '',\r\n    includeCover: true,\r\n    orientation: 'portrait',\r\n    margin: 16,\r\n    columns: {\r\n      image: false,\r\n      article: true,\r\n      name: true,\r\n      productType: true,\r\n      finishType: true,\r\n      basePrice: false,\r\n      finalPrice: true,\r\n    },\r\n    groupBy: 'productType',\r\n    currency: 'KGS',\r\n    locale: 'ru-RU',\r\n    fontUrl: PRESET_FONTS[0].url,\r\n    fontName: 'CustomFont',\r\n    fontBinary: null,\r\n    fontFileName: null,\r\n    showFooter: true,\r\n    styleKey: 'gradientModern',\r\n    density: 'normal',\r\n    showGroupTotals: true,\r\n    pageBreakBetweenGroups: false,\r\n    showGrandTotal: true,\r\n  })\r\n\r\n  const [loadingPdf, setLoadingPdf] = useState(false)\r\n  const [loadingNordicDemo, setLoadingNordicDemo] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [fontWarning, setFontWarning] = useState<string | null>(null)\r\n  const [fontInfo, setFontInfo] = useState<string | null>(null)\r\n\r\n  /**\r\n   * Состояние диагностики PDF окружения\r\n   */\r\n  const [pdfDiag, setPdfDiag] = useState<{\r\n    jsPdf: boolean\r\n    autoTable: boolean\r\n    fontReady: boolean | null\r\n    lastError: string | null\r\n    testUrl: string | null\r\n  }>({ jsPdf: false, autoTable: false, fontReady: null, lastError: null, testUrl: null })\r\n\r\n  // Предпросчет данных таблицы\r\n  const computed = useMemo(() => {\r\n    const rows = products.map((p) => {\r\n      const prices = calcPrice(p, materials, priceSettings)\r\n      const typeName = priceSettings.productTypes.find((t) => t.id === p.product_type_id)?.name || ''\r\n      const finishName = priceSettings.finishTypes.find((t) => t.id === p.finish_type_id)?.name || ''\r\n      return {\r\n        id: p.id,\r\n        name: p.name,\r\n        article: p.article,\r\n        productType: typeName,\r\n        finishType: finishName,\r\n        basePrice: prices.basePrice,\r\n        finalPrice: prices.finalPrice,\r\n        imageUrl: p.image_url || '',\r\n        collectionId: p.collection_id || null,\r\n      }\r\n    })\r\n    return rows\r\n  }, [products, materials, priceSettings])\r\n\r\n  // Группы\r\n  const groups = useMemo(() => {\r\n    if (options.groupBy === 'none') {\r\n      return [{ key: 'Все товары', items: computed }]\r\n    }\r\n    if (options.groupBy === 'productType') {\r\n      const map = new Map<string, any[]>()\r\n      for (const row of computed) {\r\n        const key = row.productType || 'Без типа'\r\n        if (!map.has(key)) map.set(key, [])\r\n        map.get(key)!.push(row)\r\n      }\r\n      return Array.from(map.entries()).map(([key, items]) => ({ key, items }))\r\n    }\r\n    if (options.groupBy === 'collection') {\r\n      const map = new Map<string, any[]>()\r\n      for (const row of computed) {\r\n        const key = row.collectionId || 'Без коллекции'\r\n        if (!map.has(key)) map.set(key, [])\r\n        map.get(key)!.push(row)\r\n      }\r\n      return Array.from(map.entries()).map(([key, items]) => ({ key, items }))\r\n    }\r\n    return [{ key: 'Все товары', items: computed }]\r\n  }, [computed, options.groupBy])\r\n\r\n  /** Ленивая загрузка jsPDF UMD */\r\n  useEffect(() => {\r\n    ensureJsPdf().catch(() => {\r\n      // отложим до клика\r\n    })\r\n  }, [])\r\n\r\n  /** Обновить часть опций */\r\n  const updateOption = useCallback((patch: Partial<PriceListOptions>) => setOptions((prev) => ({ ...prev, ...patch })), [])\r\n\r\n  /** Список колонок под текущие опции */\r\n  const colsForPrint = useMemo(() => buildColumns(options), [options])\r\n\r\n  /**\r\n   * Получить активную тему PDF/печати (ЕДИНСТВЕННАЯ РЕАЛИЗАЦИЯ)\r\n   */\r\n  const getActiveTheme = useCallback(\r\n    (overridePrimary?: string): PdfTheme & { colors: PdfTheme['colors'] } => {\r\n      const base = THEMES[options.styleKey]\r\n      const primary = overridePrimary || options.brandColor || base.colors.primary\r\n      return {\r\n        ...base,\r\n        colors: {\r\n          ...base.colors,\r\n          primary,\r\n          table: {\r\n            ...base.colors.table,\r\n            headBg: base.key === 'minimalNordic' ? '#ffffff' : base.colors.table.headBg,\r\n          },\r\n        },\r\n      }\r\n    },\r\n    [options.styleKey, options.brandColor],\r\n  )\r\n\r\n  /**\r\n   * Рисование шапки и футера на каждой странице PDF\r\n   * Дополнено: компактный логотип в футере справа (если задан и showFooter=true)\r\n   */\r\n  const drawHeaderFooter = useCallback(\r\n    (\r\n      doc: any,\r\n      pageNumber: number,\r\n      pageCount: number,\r\n      theme: PdfTheme,\r\n      margin: number,\r\n      logo?: { dataUrl: string; imgType: 'PNG' | 'JPEG' } | null,\r\n    ) => {\r\n      const w = doc.internal.pageSize.getWidth()\r\n      const h = doc.internal.pageSize.getHeight()\r\n\r\n      if (theme.header.topBand) {\r\n        const bandRGB = toRGB(theme.colors.primary, [37, 99, 235])\r\n        doc.setFillColor(bandRGB[0], bandRGB[1], bandRGB[2])\r\n        doc.rect(0, 0, w, theme.header.bandHeight, 'F')\r\n      }\r\n      if (theme.header.underline) {\r\n        const lineRGB = toRGB(theme.colors.primary, [37, 99, 235])\r\n        doc.setDrawColor(lineRGB[0], lineRGB[1], lineRGB[2])\r\n        doc.setLineWidth(theme.key === 'minimalNordic' ? 0.5 : 0.8)\r\n        doc.line(margin, margin - 4, w - margin, margin - 4)\r\n      }\r\n\r\n      if (theme.header.topBand) {\r\n        doc.setTextColor(255, 255, 255)\r\n      } else {\r\n        const brandRGB = toRGB(theme.colors.primary, [37, 99, 235])\r\n        doc.setTextColor(brandRGB[0], brandRGB[1], brandRGB[2])\r\n      }\r\n      doc.setFontSize(12)\r\n      const brandY = theme.header.topBand ? Math.max(14, theme.header.bandHeight - 6) : margin\r\n      doc.text(options.brandName, margin, brandY)\r\n\r\n      // Подзаголовок\r\n      const subRGB = toRGB('#111111', [17, 17, 17])\r\n      doc.setTextColor(subRGB[0], subRGB[1], subRGB[2])\r\n      doc.setFontSize(9)\r\n      doc.text(options.brandSub, margin, brandY + 8)\r\n\r\n      // Футер (нумерация + логотип)\r\n      if (options.showFooter) {\r\n        doc.setFontSize(9)\r\n        const footRGB = toRGB('#6b7280', [107, 114, 128])\r\n        doc.setTextColor(footRGB[0], footRGB[1], footRGB[2])\r\n        // Текст справа\r\n        doc.text(`Стр. ${pageNumber} из ${pageCount}`, w - margin, h - 10, {\r\n          align: 'right',\r\n        })\r\n        // Маленький логотип внизу слева (если есть)\r\n        if (logo?.dataUrl) {\r\n          try {\r\n            // 18x10 pt иконка, чтобы не перегружать футер\r\n            const imgW = 36\r\n            const imgH = 18\r\n            doc.addImage(logo.dataUrl, logo.imgType, margin, h - imgH - 14, imgW, imgH)\r\n          } catch {\r\n            // игнорируем\r\n          }\r\n        }\r\n      }\r\n    },\r\n    [options],\r\n  )\r\n\r\n  /**\r\n   * Обработчик: загрузка локального TTF (информативно для HTML-печати)\r\n   */\r\n  const handleFontFile = useCallback(async (file: File | null) => {\r\n    setFontWarning(null)\r\n    setFontInfo(null)\r\n    if (!file) {\r\n      setOptions((prev) => ({\r\n        ...prev,\r\n        fontBinary: null,\r\n        fontFileName: null,\r\n        fontName: 'CustomFont',\r\n      }))\r\n      return\r\n    }\r\n    try {\r\n      const buf = await file.arrayBuffer()\r\n      const binary = arrayBufferToBinaryString(buf)\r\n      const base = file.name.replace(/\\.[^.]+$/, '').replace(/[^A-Za-z0-9_]+/g, '_') || 'LocalFont'\r\n      const uniqueName = `${base}_${Date.now()}`\r\n      setOptions((prev) => ({\r\n        ...prev,\r\n        fontBinary: binary,\r\n        fontFileName: file.name,\r\n        fontName: uniqueName,\r\n      }))\r\n      setFontInfo(`Локальный шрифт загружен: ${file.name}`)\r\n    } catch (e: any) {\r\n      setFontWarning(`Не удалось прочитать файл шрифта: ${e?.message || 'ошибка файла'}`)\r\n    }\r\n  }, [])\r\n\r\n  /**\r\n   * Помощник: загрузить URL изображения в dataURL (для PDF addImage)\r\n   */\r\n  async function imageUrlToDataUrl(url: string): Promise<{ dataUrl: string; imgType: 'PNG' | 'JPEG' } | null> {\r\n    try {\r\n      const resp = await fetch(url, { cache: 'no-store' })\r\n      if (!resp.ok) return null\r\n      const blob = await resp.blob()\r\n      const buffer = await blob.arrayBuffer()\r\n      const base64 = arrayBufferToBase64(buffer)\r\n      const mime = blob.type || 'image/png'\r\n      const isPng = /png/i.test(mime)\r\n      const isJpg = /jpe?g/i.test(mime)\r\n      const imgType: 'PNG' | 'JPEG' = isPng ? 'PNG' : isJpg ? 'JPEG' : 'PNG'\r\n      const dataUrl = `data:${mime};base64,${base64}`\r\n      return { dataUrl, imgType }\r\n    } catch {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Регистрация шрифта для PDF\r\n   */\r\n  const registerFont = useCallback(\r\n    async (doc: any, url: string, fontName: string): Promise<boolean> => {\r\n      if (options.fontBinary) {\r\n        try {\r\n          if (!loadedFonts.has(fontName)) {\r\n            doc.addFileToVFS(`${fontName}.ttf`, options.fontBinary)\r\n            doc.addFont(`${fontName}.ttf`, fontName, 'normal')\r\n            loadedFonts.add(fontName)\r\n          }\r\n          doc.setFont(fontName, 'normal')\r\n          setFontInfo(`Используется локальный шрифт${options.fontFileName ? `: ${options.fontFileName}` : ''}.`)\r\n          return true\r\n        } catch {\r\n          // перейдём к сетевому\r\n        }\r\n      }\r\n\r\n      const candidates = [\r\n        url?.trim(),\r\n        'https://raw.githubusercontent.com/google/fonts/main/apache/roboto/Roboto-Regular.ttf',\r\n        'https://raw.githubusercontent.com/google/fonts/main/ofl/ptsans/PTSans-Regular.ttf',\r\n        'https://raw.githubusercontent.com/google/fonts/main/ofl/notosans/NotoSans-Regular.ttf',\r\n        'https://cdn.jsdelivr.net/gh/google/fonts@main/apache/roboto/Roboto-Regular.ttf',\r\n        'https://cdn.jsdelivr.net/gh/google/fonts@main/ofl/ptsans/PTSans-Regular.ttf',\r\n        'https://cdn.jsdelivr.net/gh/google/fonts@main/ofl/notosans/NotoSans-Regular.ttf',\r\n      ].filter(Boolean) as string[]\r\n\r\n      for (const candidate of candidates) {\r\n        try {\r\n          const resp = await fetch(candidate, { cache: 'no-store', mode: 'cors' as RequestMode })\r\n          if (!resp.ok) continue\r\n          const buffer = await resp.arrayBuffer()\r\n          const binary = arrayBufferToBinaryString(buffer)\r\n\r\n          if (!loadedFonts.has(fontName)) {\r\n            doc.addFileToVFS(`${fontName}.ttf`, binary)\r\n            doc.addFont(`${fontName}.ttf`, fontName, 'normal')\r\n            loadedFonts.add(fontName)\r\n          }\r\n          doc.setFont(fontName, 'normal')\r\n          setFontInfo(`Загружен шрифт по сети: ${candidate}`)\r\n          return true\r\n        } catch {\r\n          // пробуем следующий\r\n        }\r\n      }\r\n      return false\r\n    },\r\n    [options.fontBinary, options.fontFileName],\r\n  )\r\n\r\n  /**\r\n   * Генерация PDF с миниатюрами, итогами и межгрупповым разрывом\r\n   * Дополнено: общий итог в конце; логотип в футере\r\n   */\r\n  const handleGeneratePdf = useCallback(async () => {\r\n    setError(null)\r\n    setFontWarning(null)\r\n    setFontInfo(null)\r\n    setLoadingPdf(true)\r\n    try {\r\n      await ensureJsPdf()\r\n      const JsPdfCtor = getJsPdfCtor()\r\n      if (!JsPdfCtor) throw new Error('jsPDF не доступен')\r\n\r\n      const theme = getActiveTheme()\r\n      const doc = new JsPdfCtor({\r\n        orientation: options.orientation,\r\n        unit: 'pt',\r\n        format: 'a4',\r\n        compress: true,\r\n      })\r\n\r\n      // Подключаем кириллицу (если не удалось — Helvetica)\r\n      const fontOK = await registerFont(doc, options.fontUrl, options.fontName)\r\n      if (!fontOK) {\r\n        setFontWarning('Не удалось загрузить кириллический шрифт. Используем Helvetica — кириллица может отображаться некорректно.')\r\n        doc.setFont('helvetica', 'normal')\r\n      } else {\r\n        doc.setFont(options.fontName, 'normal')\r\n      }\r\n\r\n      const baseFontSize = options.density === 'compact' ? 9 : 10\r\n      doc.setFontSize(baseFontSize)\r\n\r\n      // Лого для футера (предзагрузка)\r\n      let footerLogo: { dataUrl: string; imgType: 'PNG' | 'JPEG' } | null = null\r\n      if (options.logoUrl) {\r\n        try {\r\n          const fetched = await imageUrlToDataUrl(options.logoUrl)\r\n          if (fetched) footerLogo = fetched\r\n        } catch {\r\n          // ignore\r\n        }\r\n      }\r\n\r\n      // Обложка (опционально)\r\n      if (options.includeCover) {\r\n        const w = doc.internal.pageSize.getWidth()\r\n        const bandRGB = toRGB(theme.colors.primary, [37, 99, 235])\r\n        doc.setFillColor(bandRGB[0], bandRGB[1], bandRGB[2])\r\n        const bandHeight = theme.header.topBand ? Math.max(120, theme.header.bandHeight * 6) : 160\r\n        doc.rect(0, 0, w, bandHeight, 'F')\r\n        doc.setTextColor(255, 255, 255)\r\n\r\n        doc.setFontSize(26)\r\n        doc.text(options.brandName, 40, 70)\r\n        doc.setFontSize(14)\r\n        doc.text(options.brandSub, 40, 100)\r\n\r\n        // Лого на обложке\r\n        if (options.logoUrl) {\r\n          try {\r\n            const fetched = footerLogo || (await imageUrlToDataUrl(options.logoUrl))\r\n            if (fetched) {\r\n              doc.addImage(fetched.dataUrl, fetched.imgType, w - 180, 40, 120, 60)\r\n            }\r\n          } catch {\r\n            // игнорируем\r\n          }\r\n        }\r\n\r\n        const dateRGB = toRGB('#111111', [17, 17, 17])\r\n        doc.setTextColor(dateRGB[0], dateRGB[1], dateRGB[2])\r\n        doc.setFontSize(10)\r\n        doc.text(`Дата: ${formatDate(new Date())}`, 40, 200)\r\n        doc.addPage()\r\n      }\r\n\r\n      // autoTable\r\n      const autoTable = (doc as any).autoTable?.bind(doc)\r\n      if (!autoTable) throw new Error('autoTable не подключен')\r\n\r\n      // Цвета для таблицы\r\n      const tableHeadBg = toRGB(theme.colors.table.headBg as any, hexToRgb('#ffffff'))\r\n      const tableHeadText = toRGB(theme.colors.table.headText as any, hexToRgb('#111111'))\r\n      const tableBorder = toRGB(theme.colors.table.border as any, hexToRgb('#e5e7eb'))\r\n      const tableRowStripe = theme.colors.table.rowStripe ? toRGB(theme.colors.table.rowStripe as any, hexToRgb('#f1f5f9')) : null\r\n      const textRGB = toRGB(theme.colors.text, hexToRgb('#111111'))\r\n      const primaryRGB = toRGB(theme.colors.primary, hexToRgb('#2563eb'))\r\n\r\n      // Колонки\r\n      const cols = buildColumns(options)\r\n      const priceColIdx = cols.findIndex((c) => c.key === 'finalPrice')\r\n\r\n      // Предзагрузка изображений для столбца \"Фото\"\r\n      const imageCache = new Map<string, { dataUrl: string; imgType: 'PNG' | 'JPEG' }>()\r\n      if (cols.some((c) => c.key === 'image')) {\r\n        const urls = new Set<string>()\r\n        for (const g of groups) {\r\n          for (const row of g.items) {\r\n            if (row.imageUrl) urls.add(row.imageUrl)\r\n          }\r\n        }\r\n        for (const url of urls) {\r\n          try {\r\n            const fetched = await imageUrlToDataUrl(url)\r\n            if (fetched) imageCache.set(url, fetched)\r\n          } catch {\r\n            // игнорируем ошибки отдельных картинок\r\n          }\r\n        }\r\n      }\r\n\r\n      // Базовый старт Y\r\n      const firstStartY = options.includeCover ? 60 : 40\r\n      let nextStartY: number | undefined = firstStartY\r\n\r\n      // Рендер групп\r\n      groups.forEach((group, idx) => {\r\n        // Заголовок группы\r\n        const headerY = (doc as any).lastAutoTable?.finalY ? (doc as any).lastAutoTable.finalY + 24 : nextStartY\r\n        doc.setTextColor(primaryRGB[0], primaryRGB[1], primaryRGB[2])\r\n        doc.setFontSize(14)\r\n        doc.text(group.key, options.margin, headerY - 8)\r\n        doc.setFontSize(baseFontSize)\r\n        doc.setTextColor(textRGB[0], textRGB[1], textRGB[2])\r\n\r\n        // Данные строк\r\n        const rowsForPdf = group.items.map((row: any) => {\r\n          const res: Record<string, any> = {}\r\n          for (const c of cols) {\r\n            if (c.key === 'image') {\r\n              res[c.key] = row.imageUrl || ''\r\n            } else if (c.key === 'basePrice' || c.key === 'finalPrice') {\r\n              res[c.key] = formatCurrency(c.key === 'basePrice' ? row.basePrice : row.finalPrice, options.currency, options.locale)\r\n            } else {\r\n              res[c.key] = (row as any)[c.key] ?? ''\r\n            }\r\n          }\r\n          return res\r\n        })\r\n\r\n        // Итоги по группе\r\n        const groupTotal = group.items.reduce((sum: number, r: any) => sum + (Number(r.finalPrice) || 0), 0)\r\n        const footRow =\r\n          options.showGroupTotals && priceColIdx >= 0\r\n            ? cols.map((_c, i) => {\r\n                if (i === Math.max(0, priceColIdx - 1)) return 'Итого группы'\r\n                if (i === priceColIdx) return formatCurrency(groupTotal, options.currency, options.locale)\r\n                return ''\r\n              })\r\n            : undefined\r\n\r\n        // Плотность\r\n        const cellPadding = options.density === 'compact' ? 4 : 6\r\n\r\n        // columnStyles — задаём только если колонка 0 = image\r\n        const columnStyles: Record<number, any> = {}\r\n        if (cols[0]?.key === 'image') columnStyles[0] = { cellWidth: 60 }\r\n\r\n        autoTable({\r\n          startY: headerY,\r\n          head: [cols.map((c) => c.header)],\r\n          body: rowsForPdf.map((r) => cols.map((c) => r[c.key])),\r\n          ...(footRow ? { foot: [footRow] } : {}),\r\n          margin: options.margin,\r\n          theme: theme.tableTheme,\r\n          styles: {\r\n            font: (doc.getFont && doc.getFont().fontName) || undefined,\r\n            fontStyle: 'normal',\r\n            fontSize: options.density === 'compact' ? baseFontSize - 1 : baseFontSize,\r\n            cellPadding,\r\n            textColor: textRGB,\r\n            lineColor: tableBorder,\r\n            lineWidth: theme.key === 'minimalNordic' ? 0 : 0.2,\r\n            overflow: 'linebreak',\r\n          },\r\n          headStyles: {\r\n            fillColor: theme.key === 'minimalNordic' ? [255, 255, 255] : tableHeadBg,\r\n            textColor: tableHeadText,\r\n            halign: 'left',\r\n            lineColor: tableBorder,\r\n            lineWidth: theme.key === 'minimalNordic' ? 0 : 0.2,\r\n            fontStyle: theme.key === 'minimalNordic' ? 'bold' : 'normal',\r\n          },\r\n          footStyles: {\r\n            fillColor: theme.key === 'minimalNordic' ? [255, 255, 255] : [245, 245, 245],\r\n            textColor: [17, 17, 17],\r\n            fontStyle: 'bold',\r\n          },\r\n          alternateRowStyles:\r\n            theme.tableTheme !== 'plain' && tableRowStripe\r\n              ? {\r\n                  fillColor: tableRowStripe,\r\n                }\r\n              : undefined,\r\n          didDrawPage: () => {\r\n            const pageNumber = doc.internal.getCurrentPageInfo\r\n              ? doc.internal.getCurrentPageInfo().pageNumber\r\n              : doc.internal.getNumberOfPages()\r\n            const pageCount = doc.internal.getNumberOfPages()\r\n            drawHeaderFooter(doc, pageNumber, pageCount, theme, options.margin, footerLogo)\r\n          },\r\n          didParseCell: (data: any) => {\r\n            if (data.section === 'head') return\r\n            const colIdx = data.column.index\r\n            const key = cols[colIdx]?.key\r\n            if (key === 'image') {\r\n              data.cell.styles.halign = 'center'\r\n              data.cell.minCellHeight = Math.max(28, (data.cell.minCellHeight as number) || 0)\r\n            }\r\n            if (data.section === 'foot') {\r\n              // Выровнять сумму вправо\r\n              if (colIdx === priceColIdx) {\r\n                data.cell.styles.halign = 'right'\r\n              }\r\n            }\r\n          },\r\n          didDrawCell: (data: any) => {\r\n            // Отрисовка миниатюр в ячейке \"Фото\"\r\n            if (data.section === 'body') {\r\n              const colIdx = data.column.index\r\n              const key = cols[colIdx]?.key\r\n              if (key === 'image') {\r\n                const url = data.cell.raw as string\r\n                if (url && imageCache.has(url)) {\r\n                  const { dataUrl, imgType } = imageCache.get(url)!\r\n                  const padding = 2\r\n                  const x = data.cell.x + padding\r\n                  const y = data.cell.y + padding\r\n                  const w = Math.max(16, data.cell.width - padding * 2)\r\n                  const h = Math.max(16, data.cell.height - padding * 2)\r\n                  const targetW = Math.min(56, w)\r\n                  const targetH = Math.min(40, h)\r\n                  doc.addImage(dataUrl, imgType, x + (w - targetW) / 2, y + (h - targetH) / 2, targetW, targetH)\r\n                  data.cell.text = []\r\n                }\r\n              }\r\n            }\r\n          },\r\n          ...(Object.keys(columnStyles).length ? { columnStyles } : {}),\r\n        } as any)\r\n\r\n        // Межгрупповой разрыв (опционально)\r\n        if (options.pageBreakBetweenGroups && idx < groups.length - 1) {\r\n          doc.addPage()\r\n          nextStartY = options.margin + (theme.header.topBand ? theme.header.bandHeight + 18 : 40)\r\n        }\r\n      })\r\n\r\n      // Общий итог по всем товарам (PDF)\r\n      if (options.showGrandTotal && cols.length > 0 && priceColIdx >= 0) {\r\n        const grandTotal = computed.reduce((sum, r: any) => sum + (Number(r.finalPrice) || 0), 0)\r\n        const lastY = (doc as any).lastAutoTable?.finalY\r\n        const startY = lastY ? lastY + 24 : (options.includeCover ? 60 : 40)\r\n\r\n        const summaryRow = cols.map((_c, i) => {\r\n          if (i === Math.max(0, priceColIdx - 1)) return 'Итого по всем товарам'\r\n          if (i === priceColIdx) return formatCurrency(grandTotal, options.currency, options.locale)\r\n          return ''\r\n        })\r\n\r\n        autoTable({\r\n          startY,\r\n          head: undefined,\r\n          body: [summaryRow],\r\n          margin: options.margin,\r\n          theme: 'plain',\r\n          styles: {\r\n            font: (doc.getFont && doc.getFont().fontName) || undefined,\r\n            fontStyle: 'bold',\r\n            fontSize: baseFontSize,\r\n            cellPadding: 6,\r\n            textColor: textRGB,\r\n            lineColor: tableBorder,\r\n          },\r\n          didDrawPage: () => {\r\n            const pageNumber = doc.internal.getCurrentPageInfo\r\n              ? doc.internal.getCurrentPageInfo().pageNumber\r\n              : doc.internal.getNumberOfPages()\r\n            const pageCount = doc.internal.getNumberOfPages()\r\n            drawHeaderFooter(doc, pageNumber, pageCount, theme, options.margin, footerLogo)\r\n          },\r\n          didParseCell: (data: any) => {\r\n            if (data.column.index === priceColIdx) data.cell.styles.halign = 'right'\r\n          },\r\n        } as any)\r\n      }\r\n\r\n      // Итоговый файл\r\n      const filename = `PriceList_${new Date().toISOString().slice(0, 10)}.pdf`\r\n      doc.save(filename)\r\n    } catch (e: any) {\r\n      setError(e?.message || 'Не удалось сформировать PDF')\r\n    } finally {\r\n      setLoadingPdf(false)\r\n    }\r\n  }, [groups, computed, options, registerFont, drawHeaderFooter, getActiveTheme])\r\n\r\n  /**\r\n   * HTML печать: открыть окно печати с особыми стилями\r\n   */\r\n  const handlePrintHtml = useCallback(() => {\r\n    window.print()\r\n  }, [])\r\n\r\n  /**\r\n   * Демо: генерация Nordic PDF из готового примера\r\n   */\r\n  const handleNordicDemo = useCallback(async (): Promise<void> => {\r\n    setError(null)\r\n    setLoadingNordicDemo(true)\r\n    try {\r\n      await generateNordicSamplePdf()\r\n    } catch (e: any) {\r\n      setError(e?.message || 'Не удалось сгенерировать демо PDF')\r\n    } finally {\r\n      setLoadingNordicDemo(false)\r\n    }\r\n  }, [])\r\n\r\n  const themeForPrint = useMemo(() => getActiveTheme(), [getActiveTheme])\r\n\r\n  /**\r\n   * Освободить blob URL тестового PDF\r\n   */\r\n  const revokeTestUrl = useCallback(() => {\r\n    if (pdfDiag.testUrl) {\r\n      try {\r\n        URL.revokeObjectURL(pdfDiag.testUrl)\r\n      } catch {\r\n        // ignore\r\n      }\r\n    }\r\n  }, [pdfDiag.testUrl])\r\n\r\n  /**\r\n   * Проверка окружения PDF + генерация тестового PDF в память\r\n   */\r\n  const handleCheckPdf = useCallback(async () => {\r\n    setError(null)\r\n    setFontWarning(null)\r\n    setFontInfo(null)\r\n    // Чистим предыдущий тестовый URL\r\n    revokeTestUrl()\r\n    setPdfDiag({ jsPdf: false, autoTable: false, fontReady: null, lastError: null, testUrl: null })\r\n    try {\r\n      await ensureJsPdf()\r\n      const JsPdfCtor = getJsPdfCtor()\r\n      if (!JsPdfCtor) throw new Error('jsPDF не доступен')\r\n\r\n      // Флаг jsPDF\r\n      let jsPdfOk = true\r\n      // Создаём документ\r\n      const doc = new JsPdfCtor({ unit: 'pt', format: 'a4', orientation: 'portrait' })\r\n      // Проверяем autoTable\r\n      const autoTableFn = (doc as any).autoTable?.bind(doc)\r\n      const autoTableOk = Boolean(autoTableFn)\r\n      if (!autoTableOk) throw new Error('Плагин autoTable не найден')\r\n\r\n      // Пробуем шрифт\r\n      const fontOk = await registerFont(doc, options.fontUrl, options.fontName).catch(() => false)\r\n\r\n      // Рисуем простую тестовую таблицу\r\n      doc.setFontSize(12)\r\n      doc.text('Тестовый PDF (проверка окружения)', 40, 40)\r\n      autoTableFn({\r\n        startY: 60,\r\n        head: [['Колонка A', 'Колонка B']],\r\n        body: [['Значение 1', 'Значение 2']],\r\n        margin: 36,\r\n        theme: 'grid',\r\n        styles: { font: (doc.getFont && doc.getFont().fontName) || undefined, fontSize: 10 },\r\n      })\r\n\r\n      // Генерируем blob\r\n      const blob: Blob = doc.output('blob')\r\n      const url = URL.createObjectURL(blob)\r\n\r\n      setPdfDiag({\r\n        jsPdf: jsPdfOk,\r\n        autoTable: autoTableOk,\r\n        fontReady: fontOk as boolean,\r\n        lastError: null,\r\n        testUrl: url,\r\n      })\r\n    } catch (e: any) {\r\n      setPdfDiag({\r\n        jsPdf: false,\r\n        autoTable: false,\r\n        fontReady: null,\r\n        lastError: e?.message || 'Не удалось выполнить проверку PDF',\r\n        testUrl: null,\r\n      })\r\n    }\r\n  }, [options.fontUrl, options.fontName, registerFont, revokeTestUrl])\r\n\r\n  // Чистим testUrl при размонтировании\r\n  useEffect(() => {\r\n    return () => {\r\n      revokeTestUrl()\r\n    }\r\n  }, [revokeTestUrl])\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Печатные стили (внедряются единожды) */}\r\n      <PrintStyles\r\n        orientation={options.orientation}\r\n        theme={themeForPrint}\r\n      />\r\n\r\n      <div className=\"flex flex-col xl:flex-row gap-6 no-print\">\r\n        {/* Панель настроек */}\r\n        <div className=\"w-full xl:w-96\">\r\n          <div className=\"bg-white rounded-xl border border-gray-200 p-5 space-y-4\">\r\n            {/* Стартовый блок */}\r\n            <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\r\n              <h3 className=\"text-base font-semibold text-blue-800\">Начните отсюда</h3>\r\n              <p className=\"text-sm text-blue-700 mt-1\">\r\n                Если у вас пустой прайс-лист, загрузите демонстрационные данные, чтобы увидеть все функции в действии.\r\n              </p>\r\n              <div className=\"mt-3 grid grid-cols-1 gap-2\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    try {\r\n                      const demo = {\r\n                        materials: [\r\n                          { id: 'm1', name: 'ЛДСП Белый', article: 'LDSP-W', unit: 'м²', price: 850, created_at: new Date().toISOString(), updated_at: new Date().toISOString() },\r\n                          { id: 'm2', name: 'Кромка ПВХ 2мм', article: 'PVH-2', unit: 'м.п.', price: 45, created_at: new Date().toISOString(), updated_at: new Date().toISOString() },\r\n                        ],\r\n                        products: [\r\n                          {\r\n                            id: 'p1',\r\n                            name: 'Тумба подвесная 600 Белая',\r\n                            article: 'TUB-POD-WHITE-600',\r\n                            tech_card: [\r\n                              { materialId: 'm1', quantity: 1.5, _techCardId: 'tc1-1' },\r\n                              { materialId: 'm2', quantity: 4, _techCardId: 'tc1-2' },\r\n                            ],\r\n                            collection_id: 'col1',\r\n                            product_type_id: 'pt1',\r\n                            finish_type_id: 'ft1',\r\n                            image_url: 'https://placehold.co/400x300/e2e8f0/64748b?text=Тумба',\r\n                            created_at: new Date().toISOString(),\r\n                            updated_at: new Date().toISOString(),\r\n                          },\r\n                        ],\r\n                        price_settings: {\r\n                          productTypes: [{ id: 'pt1', name: 'Тумбы', markup: 30, workCost: 1500 }],\r\n                          finishTypes: [{ id: 'ft1', name: 'Стандарт', markup: 0 }],\r\n                        },\r\n                      }\r\n                      localStorage.setItem('wasser_materials', JSON.stringify(demo.materials))\r\n                      localStorage.setItem('wasser_products', JSON.stringify(demo.products))\r\n                      localStorage.setItem('wasser_price_settings', JSON.stringify(demo.price_settings))\r\n                      const toast = document.createElement('div')\r\n                      toast.style.cssText =\r\n                        'position: fixed; top: 20px; left: 50%; transform: translateX(-50%); background: #16a34a; color: white; padding: 10px 14px; border-radius: 8px; z-index: 1000; box-shadow: 0 4px 14px rgba(0,0,0,0.2); font-family: system-ui, sans-serif; font-size: 14px;'\r\n                      toast.textContent = 'Демо-данные загружены. Обновите таблицу/настройки.'\r\n                      document.body.appendChild(toast)\r\n                      setTimeout(() => document.body.removeChild(toast), 2600)\r\n                    } catch {\r\n                      // ignore\r\n                    }\r\n                  }}\r\n                  className=\"w-full inline-flex items-center justify-center gap-2 px-4 py-2 rounded-lg text-white bg-blue-600 hover:bg-blue-700\"\r\n                >\r\n                  Загрузить демо-данные\r\n                </button>\r\n\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={handleNordicDemo}\r\n                  disabled={loadingNordicDemo}\r\n                  className={`w-full inline-flex items-center justify-center gap-2 px-4 py-2 rounded-lg text-white ${loadingNordicDemo ? 'bg-gray-400 cursor-not-allowed' : 'bg-gray-900 hover:bg-black'}`}\r\n                  title=\"Скачать демонстрационный PDF в стиле Nordic\"\r\n                  aria-label=\"Скачать Nordic PDF демо\"\r\n                >\r\n                  {loadingNordicDemo ? 'Генерация…' : 'Скачать Nordic PDF (демо)'}\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <h2 className=\"text-lg font-semibold text-gray-900\">Настройки прайс-листа</h2>\r\n\r\n            <div className=\"grid grid-cols-1 gap-3\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Бренд</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={options.brandName}\r\n                  onChange={(e) => updateOption({ brandName: e.target.value })}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                  placeholder=\"WASSER PRO\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Подзаголовок</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={options.brandSub}\r\n                  onChange={(e) => updateOption({ brandSub: e.target.value })}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                  placeholder=\"Прайс-лист на продукцию\"\r\n                />\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Цвет бренда</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={options.brandColor}\r\n                    onChange={(e) => updateOption({ brandColor: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                    placeholder=\"#2563eb\"\r\n                  />\r\n                </div>\r\n                <input\r\n                  type=\"color\"\r\n                  value={options.brandColor}\r\n                  onChange={(e) => updateOption({ brandColor: e.target.value })}\r\n                  className=\"h-10 w-12 border border-gray-300 rounded\"\r\n                  title=\"Выбрать цвет\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Логотип (URL)</label>\r\n                <input\r\n                  type=\"url\"\r\n                  value={options.logoUrl}\r\n                  onChange={(e) => updateOption({ logoUrl: e.target.value })}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                  placeholder=\"https://example.com/logo.png\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 gap-3\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Ориентация</label>\r\n                  <select\r\n                    value={options.orientation}\r\n                    onChange={(e) => updateOption({ orientation: e.target.value as Orientation })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg\"\r\n                  >\r\n                    <option value=\"portrait\">Книжная</option>\r\n                    <option value=\"landscape\">Альбомная</option>\r\n                  </select>\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Поля (pt)</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    min={10}\r\n                    max={40}\r\n                    value={options.margin}\r\n                    onChange={(e) => updateOption({ margin: parseInt(e.target.value || '16', 10) })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              {/* Стиль шаблона */}\r\n              <div className=\"grid grid-cols-2 gap-3\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Стиль шаблона</label>\r\n                  <select\r\n                    value={options.styleKey}\r\n                    onChange={(e) => updateOption({ styleKey: e.target.value as ThemeKey })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg\"\r\n                  >\r\n                    <option value=\"gradientModern\">Gradient Modern</option>\r\n                    <option value=\"minimalNordic\">Minimal Nordic</option>\r\n                    <option value=\"executiveBlue\">Executive Blue</option>\r\n                  </select>\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Плотность таблицы</label>\r\n                  <select\r\n                    value={options.density}\r\n                    onChange={(e) => updateOption({ density: e.target.value as Density })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg\"\r\n                  >\r\n                    <option value=\"normal\">Обычная</option>\r\n                    <option value=\"compact\">Компактная</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Группировка</label>\r\n                <select\r\n                  value={options.groupBy}\r\n                  onChange={(e) => updateOption({ groupBy: e.target.value as GroupBy })}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg\"\r\n                >\r\n                  <option value=\"none\">Без группировки</option>\r\n                  <option value=\"productType\">По типу изделия</option>\r\n                  <option value=\"collection\">По коллекции</option>\r\n                </select>\r\n              </div>\r\n\r\n              {/* ВЫБОР КОЛОНОК */}\r\n              <div className=\"grid grid-cols-2 gap-2\">\r\n                {[\r\n                  ['image', 'Фото'],\r\n                  ['article', 'Артикул'],\r\n                  ['name', 'Наименование'],\r\n                  ['productType', 'Тип'],\r\n                  ['finishType', 'Отделка'],\r\n                  ['basePrice', 'Себестоимость'],\r\n                  ['finalPrice', 'Цена'],\r\n                ].map(([key, label]) => (\r\n                  <label key={key} className=\"flex items-center gap-2 text-sm text-gray-700\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={(options.columns as any)[key]}\r\n                      onChange={(e) =>\r\n                        setOptions((prev) => ({\r\n                          ...prev,\r\n                          columns: { ...prev.columns, [key]: e.target.checked },\r\n                        }))\r\n                      }\r\n                    />\r\n                    {label}\r\n                  </label>\r\n                ))}\r\n              </div>\r\n\r\n              {/* ВАЛЮТА/ЛОКАЛЬ */}\r\n              <div className=\"grid grid-cols-2 gap-3\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Валюта</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={options.currency}\r\n                    onChange={(e) => updateOption({ currency: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg\"\r\n                    placeholder=\"KGS\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Локаль</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={options.locale}\r\n                    onChange={(e) => updateOption({ locale: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg\"\r\n                    placeholder=\"ru-RU\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              {/* ПРЕДУСТАНОВЛЕННЫЕ ШРИФТЫ */}\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Предустановленный шрифт (URL)</label>\r\n                <select\r\n                  value={options.fontUrl}\r\n                  onChange={(e) => updateOption({ fontUrl: e.target.value })}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg\"\r\n                >\r\n                  {PRESET_FONTS.map((f) => (\r\n                    <option key={f.url} value={f.url}>\r\n                      {f.label}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n                <p className=\"text-xs text-gray-500 mt-1\">\r\n                  В PDF применяются встроенные шрифты темы; эти настройки актуальны для HTML-печати.\r\n                </p>\r\n              </div>\r\n\r\n              {/* ПРОИЗВОЛЬНЫЙ URL ШРИФТА */}\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Шрифт (TTF, URL)</label>\r\n                <input\r\n                  type=\"url\"\r\n                  value={options.fontUrl}\r\n                  onChange={(e) => updateOption({ fontUrl: e.target.value })}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg\"\r\n                  placeholder=\"https://raw.githubusercontent.com/google/fonts/main/ofl/notosans/NotoSans-Regular.ttf\"\r\n                />\r\n              </div>\r\n\r\n              {/* ЛОКАЛЬНЫЙ ФАЙЛ ШРИФТА */}\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Загрузить TTF-файл (офлайн)</label>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <input\r\n                    type=\"file\"\r\n                    accept=\".ttf\"\r\n                    onChange={(e) => handleFontFile(e.target.files?.[0] || null)}\r\n                    className=\"block w-full text-sm text-gray-700 file:mr-3 file:py-2 file:px-3 file:rounded-lg file:border file:border-gray-300 file:bg-white hover:file:bg-gray-50\"\r\n                  />\r\n                  {options.fontBinary && (\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => handleFontFile(null)}\r\n                      className=\"px-3 py-2 text-sm rounded-lg border border-gray-300 bg-white hover:bg-gray-50\"\r\n                      title=\"Сбросить локальный шрифт\"\r\n                    >\r\n                      Сбросить\r\n                    </button>\r\n                  )}\r\n                </div>\r\n                <p className=\"text-xs text-gray-500 mt-1\">\r\n                  Для PDF шрифты шаблонов подгружаются автоматически; локальные шрифты полезны для HTML-печати.\r\n                </p>\r\n                {options.fontFileName && <p className=\"text-xs text-green-700 mt-1\">Загружен: {options.fontFileName}</p>}\r\n              </div>\r\n\r\n              {/* ПРОЧЕЕ */}\r\n              <div className=\"flex flex-wrap items-center gap-4\">\r\n                <label className=\"flex items-center gap-2 text-sm text-gray-700\">\r\n                  <input type=\"checkbox\" checked={options.includeCover} onChange={(e) => updateOption({ includeCover: e.target.checked })} />\r\n                  Обложка (PDF)\r\n                </label>\r\n                <label className=\"flex items-center gap-2 text-sm text-gray-700\">\r\n                  <input type=\"checkbox\" checked={options.showFooter} onChange={(e) => updateOption({ showFooter: e.target.checked })} />\r\n                  Нумерация (PDF)\r\n                </label>\r\n                <label className=\"flex items-center gap-2 text-sm text-gray-700\">\r\n                  <input type=\"checkbox\" checked={options.pageBreakBetweenGroups} onChange={(e) => updateOption({ pageBreakBetweenGroups: e.target.checked })} />\r\n                  Разрыв между группами (PDF)\r\n                </label>\r\n                <label className=\"flex items-center gap-2 text-sm text-gray-700\">\r\n                  <input type=\"checkbox\" checked={options.showGroupTotals} onChange={(e) => updateOption({ showGroupTotals: e.target.checked })} />\r\n                  Итоги по группе\r\n                </label>\r\n                <label className=\"flex items-center gap-2 text-sm text-gray-700\">\r\n                  <input type=\"checkbox\" checked={options.showGrandTotal} onChange={(e) => updateOption({ showGrandTotal: e.target.checked })} />\r\n                  Общий итог\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 gap-3\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={handleGeneratePdf}\r\n                  disabled={loadingPdf}\r\n                  className={`inline-flex items-center justify-center gap-2 px-4 py-2 rounded-lg text-white ${\r\n                    loadingPdf ? 'bg-blue-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'\r\n                  }`}\r\n                >\r\n                  {loadingPdf ? 'Формирование…' : 'Скачать PDF'}\r\n                </button>\r\n\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={handlePrintHtml}\r\n                  className=\"inline-flex items-center justify-center gap-2 px-4 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-800\"\r\n                  title=\"Печать HTML-версии с особыми стилями печати\"\r\n                >\r\n                  Печать (HTML)\r\n                </button>\r\n              </div>\r\n\r\n              {/* Сообщения/предупреждения */}\r\n              {error && <div className=\"text-sm text-red-600 bg-red-50 border border-red-200 rounded p-2\">{error}</div>}\r\n              {fontWarning && <div className=\"text-sm text-amber-700 bg-amber-50 border border-amber-200 rounded p-2\">{fontWarning}</div>}\r\n              {fontInfo && <div className=\"text-sm text-green-700 bg-green-50 border border-green-200 rounded p-2\">{fontInfo}</div>}\r\n\r\n              {/* Диагностика PDF */}\r\n              <div className=\"mt-2 border-t border-gray-200 pt-3\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <h4 className=\"text-sm font-medium text-gray-900\">Проверка PDF</h4>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span className={`text-xs px-2 py-1 rounded ${pdfDiag.jsPdf ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-600'}`}>\r\n                      jsPDF {pdfDiag.jsPdf ? 'OK' : '—'}\r\n                    </span>\r\n                    <span className={`text-xs px-2 py-1 rounded ${pdfDiag.autoTable ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-600'}`}>\r\n                      autoTable {pdfDiag.autoTable ? 'OK' : '—'}\r\n                    </span>\r\n                    <span className={`text-xs px-2 py-1 rounded ${\r\n                      pdfDiag.fontReady === true ? 'bg-green-100 text-green-700' :\r\n                      pdfDiag.fontReady === false ? 'bg-amber-100 text-amber-700' : 'bg-gray-100 text-gray-600'\r\n                    }`}>\r\n                      Шрифт {pdfDiag.fontReady === null ? '—' : pdfDiag.fontReady ? 'OK' : 'fallback'}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"mt-2 flex gap-2\">\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={handleCheckPdf}\r\n                    className=\"inline-flex items-center justify-center gap-2 px-3 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-800\"\r\n                  >\r\n                    Проверить PDF\r\n                  </button>\r\n                  {pdfDiag.testUrl && (\r\n                    <a\r\n                      href={pdfDiag.testUrl}\r\n                      download=\"PriceList_Test.pdf\"\r\n                      className=\"inline-flex items-center justify-center gap-2 px-3 py-2 rounded-lg bg-green-600 hover:bg-green-700 text-white\"\r\n                    >\r\n                      Скачать тестовый PDF\r\n                    </a>\r\n                  )}\r\n                </div>\r\n\r\n                {pdfDiag.lastError && (\r\n                  <div className=\"mt-2 text-xs text-red-700 bg-red-50 border border-red-200 rounded p-2\">\r\n                    {pdfDiag.lastError}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Превью сведений */}\r\n        <div className=\"flex-1\">\r\n          <div className=\"bg-white rounded-xl border border-gray-200 p-5\">\r\n            <h3 className=\"text-base font-semibold text-gray-900 mb-3\">Предпросмотр данных</h3>\r\n            <div className=\"text-sm text-gray-600 mb-3\">\r\n              Товаров: <span className=\"font-medium text-gray-900\">{computed.length}</span> • Групп:{' '}\r\n              <span className=\"font-medium text-gray-900\">{groups.length}</span> • Колонок:{' '}\r\n              <span className=\"font-medium text-gray-900\">{Object.values(options.columns).filter(Boolean).length}</span>\r\n            </div>\r\n\r\n            {/* Маленькая превью-лента стиля */}\r\n            <StylePreviewBar styleKey={options.styleKey} brandColor={options.brandColor} />\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-3 mt-3\">\r\n              {groups.slice(0, 3).map((g) => (\r\n                <div key={g.key} className=\"border border-gray-200 rounded-lg p-3\">\r\n                  <div className=\"font-medium text-gray-900 mb-2\">{g.key}</div>\r\n                  <ul className=\"space-y-1 text-sm text-gray-700 max-h-48 overflow-auto\">\r\n                    {g.items.slice(0, 6).map((it: any) => (\r\n                      <li key={it.id} className=\"flex items-center justify-between\">\r\n                        <span className=\"truncate mr-2\">{it.name}</span>\r\n                        <span className=\"font-mono text-xs text-gray-500\">{it.article}</span>\r\n                      </li>\r\n                    ))}\r\n                    {g.items.length > 6 && <li className=\"text-xs text-gray-400\">… и ещё {g.items.length - 6}</li>}\r\n                  </ul>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            {groups.length === 0 && <div className=\"text-sm text-gray-500\">Нет данных для отображения</div>}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* ПЕЧАТНАЯ ОБЛАСТЬ — ВИДНА ТОЛЬКО ПРИ ПЕЧАТИ */}\r\n      <div id=\"price-print-root\" className=\"print-only\">\r\n        <PrintPreviewHtml\r\n          brandName={options.brandName}\r\n          brandSub={options.brandSub}\r\n          brandColor={options.brandColor}\r\n          groups={groups}\r\n          columns={colsForPrint}\r\n          currency={options.currency}\r\n          locale={options.locale}\r\n          theme={themeForPrint}\r\n          logoUrl={options.logoUrl}\r\n          showGroupTotals={options.showGroupTotals}\r\n          showGrandTotal={options.showGrandTotal}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Полоска-превью стиля темы (экран)\r\n */\r\nfunction StylePreviewBar({ styleKey, brandColor }: { styleKey: ThemeKey; brandColor: string }) {\r\n  /** Возврат inline превью по теме */\r\n  const getPreview = (key: ThemeKey) => {\r\n    const c = brandColor || (THEMES[key].colors.primary as string)\r\n    if (key === 'gradientModern') {\r\n      return (\r\n        <div className=\"mt-1\">\r\n          <div className=\"h-2 rounded-full\" style={{ background: c }} />\r\n          <div className=\"mt-2 grid grid-cols-12 gap-[1px] bg-blue-100 p-[1px] rounded\">\r\n            {Array.from({ length: 12 }).map((_, i) => (\r\n              <div key={i} className={`h-2 ${i % 2 ? 'bg-white/70' : 'bg-white'}`} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    if (key === 'minimalNordic') {\r\n      return (\r\n        <div className=\"mt-1\">\r\n          <div className=\"h-[2px] rounded-full bg-gray-300\" />\r\n          <div className=\"mt-2 grid grid-cols-12 gap-[1px] p-[1px] rounded\">\r\n            {Array.from({ length: 12 }).map((_, i) => (\r\n              <div key={i} className={`h-2 ${i % 2 ? 'bg-gray-100' : 'bg-white'}`} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    // executiveBlue\r\n    return (\r\n      <div className=\"mt-1\">\r\n        <div className=\"h-[2px] rounded-full\" style={{ background: c }} />\r\n        <div className=\"mt-2 grid grid-cols-12 gap-[1px] bg-indigo-100 p-[1px] rounded\">\r\n          {Array.from({ length: 12 }).map((_, i) => (\r\n            <div key={i} className={`h-2 ${i % 2 ? 'bg-indigo-50' : 'bg-white'}`} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"border border-gray-200 rounded-lg p-3\">\r\n      <div className=\"text-xs text-gray-500 mb-1\">Предпросмотр стиля</div>\r\n      {getPreview(styleKey)}\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Компонент: стили печати. Инжектит @media print, @page, цветовые переменные.\r\n * Дополнено: стили для миниатюр .thumb\r\n */\r\nfunction PrintStyles({ orientation, theme }: { orientation: Orientation; theme: PdfTheme }) {\r\n  // Нормализуем цвета в rgb(r,g,b)\r\n  const brand = toRGB(theme.colors.primary, [37, 99, 235])\r\n  const headBg = toRGB(theme.colors.table.headBg as any, [255, 255, 255])\r\n  const headText = toRGB(theme.colors.table.headText as any, [17, 17, 17])\r\n  const rowStripe = theme.colors.table.rowStripe ? toRGB(theme.colors.table.rowStripe as any, [241, 245, 249]) : null\r\n  const border = toRGB(theme.colors.table.border as any, [229, 231, 235])\r\n  const text = toRGB(theme.colors.text as any, [17, 17, 17])\r\n\r\n  const css = `\r\n    @media screen {\r\n      .print-only { display: none !important; }\r\n      .no-print { display: block !important; }\r\n    }\r\n    @media print {\r\n      @page {\r\n        size: A4 ${orientation === 'landscape' ? 'landscape' : 'portrait'};\r\n        margin: 12mm;\r\n      }\r\n      html, body {\r\n        -webkit-print-color-adjust: exact;\r\n        print-color-adjust: exact;\r\n      }\r\n      .no-print { display: none !important; }\r\n      .print-only { display: block !important; }\r\n    }\r\n    #price-print-root {\r\n      --brand: rgb(${brand[0]}, ${brand[1]}, ${brand[2]});\r\n      --text: rgb(${text[0]}, ${text[1]}, ${text[2]});\r\n      --head-bg: rgb(${headBg[0]}, ${headBg[1]}, ${headBg[2]});\r\n      --head-text: rgb(${headText[0]}, ${headText[1]}, ${headText[2]});\r\n      --row-stripe: ${rowStripe ? `rgb(${rowStripe[0]}, ${rowStripe[1]}, ${rowStripe[2]})` : 'transparent'};\r\n      --border: rgb(${border[0]}, ${border[1]}, ${border[2]});\r\n      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, 'Noto Sans', Arial, sans-serif;\r\n      color: var(--text);\r\n    }\r\n    #price-print-root .brand-band {\r\n      height: ${theme.header.topBand ? '18mm' : '0'};\r\n      background: var(--brand);\r\n      color: white;\r\n    }\r\n    #price-print-root .brand-title {\r\n      font-size: 16pt;\r\n      font-weight: 700;\r\n    }\r\n    #price-print-root .brand-sub {\r\n      font-size: 10pt;\r\n      opacity: 0.95;\r\n    }\r\n    #price-print-root .group-title {\r\n      color: var(--brand);\r\n      font-weight: 700;\r\n      font-size: 12pt;\r\n      margin: 8mm 0 3mm 0;\r\n    }\r\n    #price-print-root table {\r\n      width: 100%;\r\n      border-collapse: collapse;\r\n      font-size: 9.5pt;\r\n      page-break-inside: auto;\r\n    }\r\n    #price-print-root thead {\r\n      background: ${theme.key === 'minimalNordic' ? 'transparent' : 'var(--head-bg)'};\r\n      color: var(--head-text);\r\n    }\r\n    #price-print-root th, #price-print-root td {\r\n      border: ${theme.tableTheme === 'grid' ? '0.4pt solid var(--border)' : theme.tableTheme === 'plain' ? '0.4pt solid transparent' : '0.4pt solid var(--border)'};\r\n      padding: ${theme.key === 'executiveBlue' ? '6pt 6pt' : '6pt 8pt'};\r\n      vertical-align: top;\r\n      word-break: break-word;\r\n    }\r\n    #price-print-root th {\r\n      text-align: left;\r\n      font-weight: ${theme.key === 'minimalNordic' ? 700 : 600};\r\n    }\r\n    #price-print-root tbody tr:nth-child(even) {\r\n      background: ${theme.tableTheme !== 'plain' && rowStripe ? 'var(--row-stripe)' : 'transparent'};\r\n    }\r\n    #price-print-root .price {\r\n      font-weight: 700;\r\n      color: var(--brand);\r\n      white-space: nowrap;\r\n    }\r\n    #price-print-root tfoot td {\r\n      font-weight: 700;\r\n      background: #f5f5f5;\r\n    }\r\n    #price-print-root .footer {\r\n      margin-top: 6mm;\r\n      font-size: 9pt;\r\n      color: #6b7280;\r\n      text-align: right;\r\n    }\r\n    #price-print-root .group {\r\n      page-break-inside: avoid;\r\n      margin-bottom: 6mm;\r\n    }\r\n    #price-print-root td .thumb {\r\n      width: 24mm;\r\n      height: 16mm;\r\n      object-fit: cover;\r\n      border-radius: 2mm;\r\n      border: 0.3pt solid var(--border);\r\n      display: block;\r\n    }\r\n  `\r\n  return <style data-print-styles dangerouslySetInnerHTML={{ __html: css }} />\r\n}\r\n\r\n/**\r\n * Компонент печати HTML: формирует разметку из групп и колонок под активную тему\r\n * Дополнено: миниатюры для image; общий итог\r\n */\r\nfunction PrintPreviewHtml(props: {\r\n  brandName: string\r\n  brandSub: string\r\n  brandColor: string\r\n  groups: Array<{ key: string; items: any[] }>\r\n  columns: Array<{ header: string; key: string }>\r\n  currency: string\r\n  locale: string\r\n  theme: PdfTheme\r\n  logoUrl?: string\r\n  showGroupTotals?: boolean\r\n  showGrandTotal?: boolean\r\n}) {\r\n  const { brandName, brandSub, groups, columns, currency, locale, theme, logoUrl, showGroupTotals, showGrandTotal } = props\r\n\r\n  /** Форматирование ячеек печати */\r\n  const renderCell = (row: any, key: string) => {\r\n    if (key === 'image') {\r\n      return row.imageUrl ? (\r\n        <img\r\n          src={row.imageUrl}\r\n          className=\"thumb object-cover\"\r\n          onError={(e) => {\r\n            const img = e.currentTarget as HTMLImageElement\r\n            img.style.display = 'none'\r\n          }}\r\n        />\r\n      ) : ''\r\n    }\r\n    if (key === 'basePrice') {\r\n      return formatCurrency(row.basePrice, currency, locale)\r\n    }\r\n    if (key === 'finalPrice') {\r\n      return <span className=\"price\">{formatCurrency(row.finalPrice, currency, locale)}</span>\r\n    }\r\n    return (row as any)[key] ?? ''\r\n  }\r\n\r\n  const priceIdx = columns.findIndex((c) => c.key === 'finalPrice')\r\n\r\n  // Общий итог (HTML)\r\n  const grandTotal = useMemo(() => {\r\n    return groups.reduce((sum, g) => sum + g.items.reduce((s, r: any) => s + (Number(r.finalPrice) || 0), 0), 0)\r\n  }, [groups])\r\n\r\n  return (\r\n    <div>\r\n      {/* Верхняя полоса (если у темы есть) */}\r\n      {theme.header.topBand && <div className=\"brand-band\" />}\r\n\r\n      {/* Шапка */}\r\n      <div style={{ display: 'flex', alignItems: 'center', gap: '8mm', margin: '6mm 0 4mm 0' }}>\r\n        <div style={{ flex: 1 }}>\r\n          <div className=\"brand-title\">{brandName}</div>\r\n          <div className=\"brand-sub\">{brandSub}</div>\r\n          <div style={{ fontSize: '8.5pt', color: '#6b7280', marginTop: '1.5mm' }}>\r\n            Дата: {formatDate(new Date())}\r\n          </div>\r\n        </div>\r\n        {logoUrl ? (\r\n          <img\r\n            src={logoUrl}\r\n            alt=\"Logo\"\r\n            style={{ width: '28mm', height: 'auto', objectFit: 'contain' }}\r\n            onError={(e) => {\r\n              const img = e.currentTarget as HTMLImageElement\r\n              img.style.display = 'none'\r\n            }}\r\n          />\r\n        ) : null}\r\n      </div>\r\n\r\n      {/* Разделительная линия (для тем с underline) */}\r\n      {theme.header.underline && (\r\n        <div style={{ height: '1pt', background: 'var(--brand)', opacity: 0.9, marginBottom: '4mm' }} />\r\n      )}\r\n\r\n      {/* Группы */}\r\n      {groups.map((g) => {\r\n        const groupTotal = g.items.reduce((sum, r: any) => sum + (Number(r.finalPrice) || 0), 0)\r\n        return (\r\n          <div className=\"group\" key={g.key}>\r\n            <div className=\"group-title\">{g.key}</div>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  {columns.map((c) => (\r\n                    <th key={c.key}>{c.header}</th>\r\n                  ))}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {g.items.map((row) => (\r\n                  <tr key={row.id}>\r\n                    {columns.map((c) => (\r\n                      <td key={c.key}>{renderCell(row, c.key)}</td>\r\n                    ))}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n              {showGroupTotals && priceIdx >= 0 && (\r\n                <tfoot>\r\n                  <tr>\r\n                    {columns.map((c, i) => {\r\n                      if (i === Math.max(0, priceIdx - 1)) return <td key={c.key}>Итого группы</td>\r\n                      if (i === priceIdx) return <td key={c.key} style={{ textAlign: 'right' }}>{formatCurrency(groupTotal, currency, locale)}</td>\r\n                      return <td key={c.key}></td>\r\n                    })}\r\n                  </tr>\r\n                </tfoot>\r\n              )}\r\n            </table>\r\n          </div>\r\n        )\r\n      })}\r\n\r\n      {/* Общий итог по всем товарам */}\r\n      {showGrandTotal && priceIdx >= 0 && (\r\n        <div style={{ marginTop: '6mm', fontSize: '10pt' }}>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                {columns.map((c, i) => {\r\n                  if (i === Math.max(0, priceIdx - 1)) return <td key={c.key} style={{ fontWeight: 700 }}>Итого по всем товарам</td>\r\n                  if (i === priceIdx) return <td key={c.key} style={{ textAlign: 'right', fontWeight: 700 }}>{formatCurrency(grandTotal, currency, locale)}</td>\r\n                  return <td key={c.key}></td>\r\n                })}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n\r\n      {/* Низ */}\r\n      <div className=\"footer\">Сформировано: {formatDate(new Date())}</div>\r\n    </div>\r\n  )\r\n}\r\n",
      "lines": 1854,
      "size": 74896,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.4155112+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/services/seed.ts": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export function generateProducts(): SimpleProduct[] {",
          "const now = new Date().toISOString()",
          "const id = StorageService.id",
          "export function generateCollections(productIds: string[]): SimpleCollection[] {",
          "const now = new Date().toISOString()",
          "const id = StorageService.id",
          "const half = Math.ceil(productIds.length / 2)",
          "export function seedDemoData(): { products: SimpleProduct[]; collections: SimpleCollection[] } {",
          "const products = generateProducts()",
          "const collections = generateCollections(products.map((p) => p.id))"
        ],
        "interfaces": [],
        "hasJSX": false,
        "stats": {
          "componentsCount": 10,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 3,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import { StorageService, type SimpleCollection, type SimpleProduct } from './storage'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export function generateProducts(): SimpleProduct[] {",
          "export function generateCollections(productIds: string[]): SimpleCollection[] {",
          "export function seedDemoData(): { products: SimpleProduct[]; collections: SimpleCollection[] } {"
        ],
        "hooks": []
      },
      "content": "/**\n * SeedDataService — генерация демонстрационных данных совместимых со страницей «Коллекции».\n */\n\nimport { StorageService, type SimpleCollection, type SimpleProduct } from './storage'\n\n/**\n * Сгенерировать товары для демонстрации\n */\nexport function generateProducts(): SimpleProduct[] {\n  const now = new Date().toISOString()\n  const id = StorageService.id\n  return [\n    { id: id(), name: 'Тумба 600 Белая', article: 'TB-600-WHT', imageKeyword: 'bathroom furniture', created_at: now, updated_at: now },\n    { id: id(), name: 'Тумба 800 Дуб', article: 'TB-800-OAK', imageKeyword: 'modern cabinet', created_at: now, updated_at: now },\n    { id: id(), name: 'Пенал узкий', article: 'PENAL-NARROW', imageKeyword: 'tall cabinet', created_at: now, updated_at: now },\n    { id: id(), name: 'Зеркало 600', article: 'MIR-600', imageKeyword: 'mirror', created_at: now, updated_at: now },\n    { id: id(), name: 'Полка настенная', article: 'SHELF-600', imageKeyword: 'shelf', created_at: now, updated_at: now },\n    { id: id(), name: 'Тумба 1000 Глянец', article: 'TB-1000-GL', imageKeyword: 'gloss furniture', created_at: now, updated_at: now },\n  ]\n}\n\n/**\n * Сгенерировать коллекции на базе переданных товаров\n */\nexport function generateCollections(productIds: string[]): SimpleCollection[] {\n  const now = new Date().toISOString()\n  const id = StorageService.id\n  const half = Math.ceil(productIds.length / 2)\n  return [\n    {\n      id: id(),\n      name: '2025 Весна',\n      description: 'Светлая и лаконичная коллекция',\n      group: '2025 Весна',\n      is_archived: false,\n      pinned: true,\n      product_order: productIds.slice(0, half),\n      created_at: now,\n      updated_at: now,\n    },\n    {\n      id: id(),\n      name: '2025 Осень',\n      description: 'Тёплые тона и натуральные фактуры',\n      group: '2025 Осень',\n      is_archived: false,\n      pinned: false,\n      product_order: productIds.slice(half),\n      created_at: now,\n      updated_at: now,\n    },\n  ]\n}\n\n/**\n * Выполнить загрузку демо-данных и записать событие в аудит\n */\nexport function seedDemoData(): { products: SimpleProduct[]; collections: SimpleCollection[] } {\n  const products = generateProducts()\n  const collections = generateCollections(products.map((p) => p.id))\n  StorageService.saveProducts(products)\n  StorageService.saveCollections(collections)\n  StorageService.pushAudit({\n    action: 'seed',\n    entity: 'system',\n    details: { products: products.length, collections: collections.length },\n  })\n  return { products, collections }\n}\n",
      "lines": 71,
      "size": 2856,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.4271140+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/toggle.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const toggleVariants = cva(",
          "const Toggle = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 2,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as TogglePrimitive from \"@radix-ui/react-toggle\"",
          "import { cva, type VariantProps } from \"class-variance-authority\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Toggle, toggleVariants }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n",
      "lines": 46,
      "size": 1500,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3017684+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/collections/CollectionCard.tsx": {
      "analysis": {
        "types": [
          "type FurnitureKind = 'tumbas' | 'penals' | 'mirrors' | 'other' | 'all'"
        ],
        "classes": [],
        "components": [
          "function classifyProduct(p: { name: string; article: string }): Exclude<FurnitureKind, 'all'> {",
          "const n = (p.name || '').toLowerCase()",
          "const a = (p.article || '').toLowerCase()",
          "function KindBadge({ product }: { product: IProduct }) {",
          "const kind = classifyProduct(product)",
          "const classes =",
          "const label =",
          "export default function CollectionCard({",
          "const count = collection.product_order.length",
          "const inCollection = useMemo(",
          "const availableAll = useMemo(() => {",
          "const all = Array.from(productMap.values())",
          "const set = new Set(collection.product_order)",
          "const available = useMemo(() => {",
          "const COVER_WEBP =",
          "const COVER_FALLBACK =",
          "const PREVIEW_WEBP =",
          "const PREVIEW_FALLBACK =",
          "const active = typeFilter === key"
        ],
        "interfaces": [
          "export interface IProduct {",
          "export interface ICollection {",
          "export interface CollectionCardProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 19,
          "typesCount": 1,
          "hooksCount": 6,
          "interfacesCount": 3,
          "exportsCount": 4,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 2
        },
        "imports": [
          "import React, { useMemo, useState } from 'react'",
          "import { FolderOpen, Archive, ArchiveRestore, Edit2, GripVertical, Trash2, Star, StarOff, Plus } from 'lucide-react'",
          "import ProgressiveImage from '../common/ProgressiveImage'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function classifyProduct(p: { name: string; article: string }): Exclude<FurnitureKind, 'all'> {",
          "function KindBadge({ product }: { product: IProduct }) {"
        ],
        "exports": [
          "export interface IProduct {",
          "export interface ICollection {",
          "export interface CollectionCardProps {",
          "export default function CollectionCard({"
        ],
        "hooks": [
          "import React, { useMemo, useState } from 'react'",
          "const inCollection = useMemo(",
          "const availableAll = useMemo(() => {",
          "const [typeFilter, setTypeFilter] = useState<FurnitureKind>('all')",
          "const available = useMemo(() => {",
          "const [selectedProduct, setSelectedProduct] = useState<string>('')"
        ]
      },
      "content": "/**\n * CollectionCard — карточка одной коллекции\n * Включает: обложку коллекции, заголовок, группа/архив/закреп, краткое описание, превью товаров,\n * быстрые действия, фильтр по типам мебели (Тумбы/Пеналы/Зеркала/Прочее) для быстрого добавления.\n * Дополнено: клик по товару открывает карточку товара (через onOpenProduct).\n */\n\nimport React, { useMemo, useState } from 'react'\nimport { FolderOpen, Archive, ArchiveRestore, Edit2, GripVertical, Trash2, Star, StarOff, Plus } from 'lucide-react'\nimport ProgressiveImage from '../common/ProgressiveImage'\n\n/**\n * Мини-интерфейсы для изоляции компонента\n */\nexport interface IProduct {\n  id: string\n  name: string\n  article: string\n  imageKeyword?: string\n}\n\n/**\n * Интерфейс коллекции (локальный для карточки)\n */\nexport interface ICollection {\n  id: string\n  name: string\n  description?: string\n  group?: string\n  is_archived?: boolean\n  pinned?: boolean\n  product_order: string[]\n  /** URL обложки коллекции (опционально) */\n  cover_url?: string\n  updated_at: string\n}\n\n/**\n * Пропсы карточки коллекции\n */\nexport interface CollectionCardProps {\n  /** Данные коллекции */\n  collection: ICollection\n  /** Отображение максимум N превью товаров */\n  previewLimit?: number\n  /** Map для получения данных изделия по id */\n  productMap: Map<string, IProduct>\n  /** Обработчики действий */\n  onEdit: (c: ICollection) => void\n  onOpenEditor: (c: ICollection) => void\n  onToggleArchive: (c: ICollection) => void\n  onDelete: (c: ICollection) => void\n  onTogglePin: (c: ICollection) => void\n  onQuickAddProduct: (collectionId: string, productId: string) => void\n  /** Открыть карточку товара по клику по превью */\n  onOpenProduct: (productId: string) => void\n}\n\n/** Типы мебели для фильтра в карточке */\ntype FurnitureKind = 'tumbas' | 'penals' | 'mirrors' | 'other' | 'all'\n\n/**\n * Классификация изделия по эвристикам (название/артикул)\n */\nfunction classifyProduct(p: { name: string; article: string }): Exclude<FurnitureKind, 'all'> {\n  const n = (p.name || '').toLowerCase()\n  const a = (p.article || '').toLowerCase()\n  if (n.includes('тумб') || a.includes('tumb') || a.includes('tb-')) return 'tumbas'\n  if (n.includes('пенал') || a.includes('penal')) return 'penals'\n  if (n.includes('зеркал') || a.includes('mir')) return 'mirrors'\n  return 'other'\n}\n\n/**\n * Маленький бейдж с типом изделия\n */\nfunction KindBadge({ product }: { product: IProduct }) {\n  const kind = classifyProduct(product)\n  const classes =\n    kind === 'tumbas'\n      ? 'bg-blue-50 text-blue-800 border-blue-200'\n      : kind === 'penals'\n      ? 'bg-emerald-50 text-emerald-800 border-emerald-200'\n      : kind === 'mirrors'\n      ? 'bg-violet-50 text-violet-800 border-violet-200'\n      : 'bg-gray-50 text-gray-700 border-gray-200'\n  const label =\n    kind === 'tumbas' ? 'Тумбы' : kind === 'penals' ? 'Пеналы' : kind === 'mirrors' ? 'Зеркала' : 'Прочее'\n  return <span className={`text-[10px] px-2 py-0.5 rounded border ${classes}`}>{label}</span>\n}\n\n/**\n * Компонент карточки коллекции с обложкой и быстрыми действиями\n */\nexport default function CollectionCard({\n  collection,\n  previewLimit = 6,\n  productMap,\n  onEdit,\n  onOpenEditor,\n  onToggleArchive,\n  onDelete,\n  onTogglePin,\n  onQuickAddProduct,\n  onOpenProduct,\n}: CollectionCardProps): React.ReactElement {\n  const count = collection.product_order.length\n\n  // Список изделий в коллекции (для превью)\n  const inCollection = useMemo(\n    () => collection.product_order.map((id) => productMap.get(id)).filter(Boolean) as IProduct[],\n    [collection.product_order, productMap],\n  )\n\n  // Доступные изделия (не в коллекции) — для быстрого добавления\n  const availableAll = useMemo(() => {\n    const all = Array.from(productMap.values())\n    const set = new Set(collection.product_order)\n    return all.filter((p) => !set.has(p.id))\n  }, [collection.product_order, productMap])\n\n  /** Локальный фильтр по типу для быстрого добавления */\n  const [typeFilter, setTypeFilter] = useState<FurnitureKind>('all')\n\n  /** Доступные с учётом фильтра */\n  const available = useMemo(() => {\n    if (typeFilter === 'all') return availableAll\n    return availableAll.filter((p) => classifyProduct(p) === typeFilter)\n  }, [availableAll, typeFilter])\n\n  const [selectedProduct, setSelectedProduct] = useState<string>('')\n\n  // Дефолтные источники изображений (с WebP) для обложки и превью\n  const COVER_WEBP =\n    'https://images.unsplash.com/photo-1586023492125-27b2c045efd7?auto=format&fm=webp&q=75&w=1600'\n  const COVER_FALLBACK =\n    'https://images.unsplash.com/photo-1586023492125-27b2c045efd7?auto=format&q=80&w=1600'\n  const PREVIEW_WEBP =\n    'https://images.unsplash.com/photo-1586023492125-27b2c045efd7?auto=format&fm=webp&q=70&w=160&h=160&fit=crop&crop=faces,center'\n  const PREVIEW_FALLBACK =\n    'https://images.unsplash.com/photo-1586023492125-27b2c045efd7?auto=format&q=75&w=160&h=160&fit=crop&crop=faces,center'\n\n  return (\n    <div className=\"bg-white border border-gray-200 rounded-xl p-5\">\n      {/* Обложка коллекции */}\n      <div className=\"mb-4 rounded-xl overflow-hidden border border-gray-200 aspect-[16/5] bg-gray-100\">\n        {collection.cover_url ? (\n          <ProgressiveImage\n            alt={collection.name}\n            src={collection.cover_url}\n            className=\"w-full h-full\"\n            imgClassName=\"object-cover w-full h-full\"\n            loading=\"lazy\"\n            decoding=\"async\"\n          />\n        ) : (\n          <ProgressiveImage\n            alt={collection.name}\n            src={COVER_FALLBACK}\n            webpSrc={COVER_WEBP}\n            className=\"w-full h-full\"\n            imgClassName=\"object-cover w-full h-full\"\n            loading=\"lazy\"\n            decoding=\"async\"\n          />\n        )}\n      </div>\n\n      {/* Шапка коллекции */}\n      <div className=\"flex flex-col md:flex-row md:items-center gap-4 justify-between\">\n        <div className=\"flex items-start gap-3\">\n          <FolderOpen size={22} className=\"text-blue-600 mt-0.5\" />\n          <div className=\"min-w-0\">\n            <div className=\"flex items-center gap-2 flex-wrap\">\n              <h3 className=\"text-lg font-semibold text-gray-900 truncate\">{collection.name}</h3>\n\n              {collection.group && (\n                <span className=\"text-xs px-2 py-1 rounded bg-blue-50 text-blue-700 border border-blue-200\">\n                  {collection.group}\n                </span>\n              )}\n\n              {collection.is_archived && (\n                <span className=\"text-xs px-2 py-1 rounded bg-gray-100 text-gray-600 border border-gray-200\">\n                  Архив\n                </span>\n              )}\n\n              {collection.pinned && (\n                <span className=\"text-xs px-2 py-1 rounded bg-amber-50 text-amber-800 border border-amber-200\">\n                  Закреплено\n                </span>\n              )}\n            </div>\n\n            {collection.description && <p className=\"text-gray-600 mt-1\">{collection.description}</p>}\n\n            <div className=\"text-xs text-gray-500 mt-1\">\n              Обновлено:{' '}\n              {new Date(collection.updated_at).toLocaleString('ru-RU', {\n                dateStyle: 'medium',\n                timeStyle: 'short',\n              })}{' '}\n              • Товаров: {count}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex gap-2 flex-wrap\">\n          <button\n            className=\"px-3 py-2 rounded-lg font-medium bg-white border border-gray-300 hover:bg-gray-50 text-gray-700\"\n            onClick={() => onEdit(collection)}\n            title=\"Редактировать\"\n          >\n            <Edit2 size={16} className=\"inline mr-1\" />\n            Редактировать\n          </button>\n          <button\n            className=\"px-3 py-2 rounded-lg font-medium bg-white border border-gray-300 hover:bg-gray-50 text-gray-700\"\n            onClick={() => onOpenEditor(collection)}\n            title=\"Редактор (DnD)\"\n          >\n            <GripVertical size={16} className=\"inline mr-1\" />\n            Редактор\n          </button>\n          <button\n            className=\"px-3 py-2 rounded-lg font-medium bg-white border border-gray-300 hover:bg-gray-50 text-gray-700\"\n            onClick={() => onTogglePin(collection)}\n            title={collection.pinned ? 'Снять закрепление' : 'Закрепить'}\n          >\n            {collection.pinned ? (\n              <Star size={16} className=\"inline mr-1 text-amber-500\" />\n            ) : (\n              <StarOff size={16} className=\"inline mr-1\" />\n            )}\n            {collection.pinned ? 'Открепить' : 'Закрепить'}\n          </button>\n          <button\n            className=\"px-3 py-2 rounded-lg font-medium bg-white border border-gray-300 hover:bg-gray-50 text-gray-700\"\n            onClick={() => onToggleArchive(collection)}\n            title={collection.is_archived ? 'Разархивировать' : 'Архивировать'}\n          >\n            {collection.is_archived ? (\n              <>\n                <ArchiveRestore size={16} className=\"inline mr-1\" /> Разархив\n              </>\n            ) : (\n              <>\n                <Archive size={16} className=\"inline mr-1\" /> Архив\n              </>\n            )}\n          </button>\n          <button\n            className=\"px-3 py-2 rounded-lg font-medium bg-red-600 hover:bg-red-700 text-white\"\n            onClick={() => onDelete(collection)}\n            title=\"Удалить\"\n          >\n            <Trash2 size={16} className=\"inline mr-1\" />\n            Удалить\n          </button>\n        </div>\n      </div>\n\n      {/* Превью товаров */}\n      {count > 0 && (\n        <div className=\"mt-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3\">\n          {inCollection.slice(0, previewLimit).map((p) => (\n            <div\n              key={p.id}\n              className=\"border border-gray-200 rounded-lg p-3 bg-gray-50 hover:shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 cursor-pointer\"\n              onClick={() => onOpenProduct(p.id)}\n              role=\"button\"\n              tabIndex={0}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                  e.preventDefault()\n                  onOpenProduct(p.id)\n                }\n              }}\n              title=\"Открыть карточку товара\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 rounded bg-white overflow-hidden border border-gray-200 flex-shrink-0\">\n                  <ProgressiveImage\n                    alt={p.name}\n                    src={PREVIEW_FALLBACK}\n                    webpSrc={PREVIEW_WEBP}\n                    className=\"w-full h-full\"\n                    imgClassName=\"object-cover w-full h-full\"\n                    loading=\"lazy\"\n                    decoding=\"async\"\n                  />\n                </div>\n                <div className=\"min-w-0\">\n                  <div className=\"text-sm font-medium text-gray-900 truncate flex items-center gap-2\">\n                    {p.name}\n                    <KindBadge product={p} />\n                  </div>\n                  <div className=\"text-xs text-gray-500 font-mono\">{p.article}</div>\n                </div>\n              </div>\n            </div>\n          ))}\n          {count > previewLimit && (\n            <div className=\"flex items-center justify-center text-sm text-gray-500 border border-dashed border-gray-300 rounded-lg\">\n              и ещё {count - previewLimit}…\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Быстрое добавление изделия */}\n      <div className=\"mt-4 space-y-2\">\n        {/* Фильтр по типу */}\n        <div className=\"flex items-center gap-1.5 flex-wrap\">\n          {(\n            [\n              ['all', 'Все'],\n              ['tumbas', 'Тумбы'],\n              ['penals', 'Пеналы'],\n              ['mirrors', 'Зеркала'],\n              ['other', 'Прочее'],\n            ] as Array<[FurnitureKind, string]>\n          ).map(([key, label]) => {\n            const active = typeFilter === key\n            return (\n              <button\n                key={key}\n                className={`px-2.5 py-1 text-xs rounded-full border ${\n                  active\n                    ? 'bg-blue-600 text-white border-blue-600'\n                    : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'\n                }`}\n                onClick={() => setTypeFilter(key)}\n              >\n                {label}\n              </button>\n            )\n          })}\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <select\n            className=\"px-3 py-2 border border-gray-300 rounded-lg bg-white\"\n            value={selectedProduct}\n            onChange={(e) => setSelectedProduct(e.target.value)}\n          >\n            <option value=\"\">Добавить изделие…</option>\n            {available.slice(0, 100).map((p) => (\n              <option key={p.id} value={p.id}>\n                {p.name} ({p.article})\n              </option>\n            ))}\n          </select>\n          <button\n            className=\"px-3 py-2 rounded-lg font-medium bg-blue-600 hover:bg-blue-700 text-white disabled:opacity-50\"\n            disabled={!selectedProduct}\n            onClick={() => {\n              if (!selectedProduct) return\n              onQuickAddProduct(collection.id, selectedProduct)\n              setSelectedProduct('')\n            }}\n            title=\"Добавить выбранное изделие в эту коллекцию\"\n          >\n            <Plus size={16} className=\"inline mr-1\" />\n            Добавить\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "lines": 373,
      "size": 14831,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3142902+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/context-menu.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const ContextMenu = ContextMenuPrimitive.Root",
          "const ContextMenuTrigger = ContextMenuPrimitive.Trigger",
          "const ContextMenuGroup = ContextMenuPrimitive.Group",
          "const ContextMenuPortal = ContextMenuPrimitive.Portal",
          "const ContextMenuSub = ContextMenuPrimitive.Sub",
          "const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup",
          "const ContextMenuSubTrigger = React.forwardRef<",
          "const ContextMenuSubContent = React.forwardRef<",
          "const ContextMenuContent = React.forwardRef<",
          "const ContextMenuItem = React.forwardRef<",
          "const ContextMenuCheckboxItem = React.forwardRef<",
          "const ContextMenuRadioItem = React.forwardRef<",
          "const ContextMenuLabel = React.forwardRef<",
          "const ContextMenuSeparator = React.forwardRef<",
          "const ContextMenuShortcut = ({"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 15,
          "typesCount": 0,
          "hooksCount": 3,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"",
          "import { Check, ChevronRight, Circle } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export {"
        ],
        "hooks": [
          "const ContextMenuSeparator = React.forwardRef<",
          "ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName",
          "ContextMenuSeparator,"
        ]
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
      "lines": 201,
      "size": 7420,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2390148+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/carousel.tsx": {
      "analysis": {
        "types": [
          "type UseEmblaCarouselType,",
          "type CarouselApi = UseEmblaCarouselType[1]",
          "type UseCarouselParameters = Parameters<typeof useEmblaCarousel>",
          "type CarouselOptions = UseCarouselParameters[0]",
          "type CarouselPlugin = UseCarouselParameters[1]",
          "type CarouselProps = {",
          "type CarouselContextProps = {",
          "type CarouselApi,"
        ],
        "classes": [],
        "components": [
          "const CarouselContext = React.createContext<CarouselContextProps | null>(null)",
          "function useCarousel() {",
          "const context = React.useContext(CarouselContext)",
          "const Carousel = React.forwardRef<",
          "const onSelect = React.useCallback((api: CarouselApi) => {",
          "const scrollPrev = React.useCallback(() => {",
          "const scrollNext = React.useCallback(() => {",
          "const handleKeyDown = React.useCallback(",
          "const CarouselContent = React.forwardRef<",
          "const CarouselItem = React.forwardRef<",
          "const CarouselPrevious = React.forwardRef<",
          "const CarouselNext = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 12,
          "typesCount": 8,
          "hooksCount": 54,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 5,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [
          "import * as React from \"react\"",
          "import useEmblaCarousel, {",
          "import { ArrowLeft, ArrowRight } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\"",
          "import { Button } from \"@/components/ui/button\""
        ],
        "hasTypeScript": true,
        "functions": [
          "function useCarousel() {"
        ],
        "exports": [
          "export {"
        ],
        "hooks": [
          "import useEmblaCarousel, {",
          "type UseEmblaCarouselType,",
          "} from \"embla-carousel-react\"",
          "type CarouselApi = UseEmblaCarouselType[1]",
          "type UseCarouselParameters = Parameters<typeof useEmblaCarousel>",
          "type CarouselOptions = UseCarouselParameters[0]",
          "type CarouselPlugin = UseCarouselParameters[1]",
          "type CarouselProps = {",
          "opts?: CarouselOptions",
          "plugins?: CarouselPlugin",
          "setApi?: (api: CarouselApi) => void",
          "type CarouselContextProps = {",
          "carouselRef: ReturnType<typeof useEmblaCarousel>[0]",
          "api: ReturnType<typeof useEmblaCarousel>[1]",
          "} & CarouselProps",
          "const CarouselContext = React.createContext<CarouselContextProps | null>(null)",
          "function useCarousel() {",
          "const context = React.useContext(CarouselContext)",
          "throw new Error(\"useCarousel must be used within a <Carousel />\")",
          "const Carousel = React.forwardRef<",
          "React.HTMLAttributes<HTMLDivElement> & CarouselProps",
          "const [carouselRef, api] = useEmblaCarousel(",
          "const [canScrollPrev, setCanScrollPrev] = React.useState(false)",
          "const [canScrollNext, setCanScrollNext] = React.useState(false)",
          "const onSelect = React.useCallback((api: CarouselApi) => {",
          "const scrollPrev = React.useCallback(() => {",
          "const scrollNext = React.useCallback(() => {",
          "const handleKeyDown = React.useCallback(",
          "React.useEffect(() => {",
          "React.useEffect(() => {",
          "<CarouselContext.Provider",
          "carouselRef,",
          "aria-roledescription=\"carousel\"",
          "</CarouselContext.Provider>",
          "Carousel.displayName = \"Carousel\"",
          "const CarouselContent = React.forwardRef<",
          "const { carouselRef, orientation } = useCarousel()",
          "<div ref={carouselRef} className=\"overflow-hidden\">",
          "CarouselContent.displayName = \"CarouselContent\"",
          "const CarouselItem = React.forwardRef<",
          "const { orientation } = useCarousel()",
          "CarouselItem.displayName = \"CarouselItem\"",
          "const CarouselPrevious = React.forwardRef<",
          "const { orientation, scrollPrev, canScrollPrev } = useCarousel()",
          "CarouselPrevious.displayName = \"CarouselPrevious\"",
          "const CarouselNext = React.forwardRef<",
          "const { orientation, scrollNext, canScrollNext } = useCarousel()",
          "CarouselNext.displayName = \"CarouselNext\"",
          "type CarouselApi,",
          "Carousel,",
          "CarouselContent,",
          "CarouselItem,",
          "CarouselPrevious,",
          "CarouselNext,"
        ]
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n",
      "lines": 263,
      "size": 6224,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2294767+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/drawer.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Drawer = ({",
          "const DrawerTrigger = DrawerPrimitive.Trigger",
          "const DrawerPortal = DrawerPrimitive.Portal",
          "const DrawerClose = DrawerPrimitive.Close",
          "const DrawerOverlay = React.forwardRef<",
          "const DrawerContent = React.forwardRef<",
          "const DrawerHeader = ({",
          "const DrawerFooter = ({",
          "const DrawerTitle = React.forwardRef<",
          "const DrawerDescription = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 10,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import { Drawer as DrawerPrimitive } from \"vaul\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export {"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
      "lines": 119,
      "size": 3021,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2430198+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/common/Modal.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Modal = memo(function Modal({",
          "const original = document.body.style.overflow"
        ],
        "interfaces": [
          "export interface ModalProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 2,
          "typesCount": 0,
          "hooksCount": 2,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React, { memo, useEffect } from 'react'",
          "import Button from './Button'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface ModalProps {",
          "export default Modal"
        ],
        "hooks": [
          "import React, { memo, useEffect } from 'react'",
          "useEffect(() => {"
        ]
      },
      "content": "/**\n * Модальное окно\n * Простая реализация оверлея и диалога без сторонних зависимостей\n */\n\nimport React, { memo, useEffect } from 'react'\nimport Button from './Button'\n\n/**\n * Пропсы модального окна\n */\nexport interface ModalProps {\n  /** Показать/скрыть модалку */\n  open: boolean\n  /** Заголовок окна */\n  title?: string\n  /** Закрыть модалку */\n  onClose: () => void\n  /** Контент */\n  children: React.ReactNode\n  /** Блокировать клик по оверлею */\n  lockOverlay?: boolean\n}\n\n/**\n * Modal — диалоговое окно\n */\nconst Modal = memo(function Modal({\n  open,\n  title,\n  onClose,\n  children,\n  lockOverlay = false,\n}: ModalProps): React.ReactElement | null {\n  /** Блокируем прокрутку под модалкой */\n  useEffect(() => {\n    if (!open) return\n    const original = document.body.style.overflow\n    document.body.style.overflow = 'hidden'\n    return () => {\n      document.body.style.overflow = original\n    }\n  }, [open])\n\n  if (!open) return null\n\n  return (\n    <div\n      className=\"fixed inset-0 z-50 flex items-center justify-center\"\n      aria-modal\n      role=\"dialog\"\n    >\n      <div\n        className=\"absolute inset-0 bg-black/50\"\n        onClick={() => {\n          if (!lockOverlay) onClose()\n        }}\n      />\n      <div className=\"relative w-[95vw] max-w-3xl max-h-[90vh] overflow-auto bg-white border border-gray-200 rounded-xl shadow-xl\">\n        <div className=\"flex items-center justify-between px-5 py-4 border-b border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">{title || 'Диалог'}</h3>\n          <Button variant=\"outline\" className=\"bg-transparent\" onClick={onClose}>\n            Закрыть\n          </Button>\n        </div>\n        <div className=\"p-5\">{children}</div>\n      </div>\n    </div>\n  )\n})\n\nexport default Modal\n",
      "lines": 73,
      "size": 2001,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3458647+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/menubar.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "function MenubarMenu({",
          "function MenubarGroup({",
          "function MenubarPortal({",
          "function MenubarRadioGroup({",
          "function MenubarSub({",
          "const Menubar = React.forwardRef<",
          "const MenubarTrigger = React.forwardRef<",
          "const MenubarSubTrigger = React.forwardRef<",
          "const MenubarSubContent = React.forwardRef<",
          "const MenubarContent = React.forwardRef<",
          "const MenubarItem = React.forwardRef<",
          "const MenubarCheckboxItem = React.forwardRef<",
          "const MenubarRadioItem = React.forwardRef<",
          "const MenubarLabel = React.forwardRef<",
          "const MenubarSeparator = React.forwardRef<",
          "const MenubarShortcut = ({"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 16,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 5
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as MenubarPrimitive from \"@radix-ui/react-menubar\"",
          "import { Check, ChevronRight, Circle } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [
          "function MenubarMenu({",
          "function MenubarGroup({",
          "function MenubarPortal({",
          "function MenubarRadioGroup({",
          "function MenubarSub({"
        ],
        "exports": [
          "export {"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
      "lines": 257,
      "size": 8622,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2560420+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/lib/pdf/examples/nordicExample.ts": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export async function generateNordicSamplePdf(): Promise<void> {",
          "const companyData = {",
          "const documentData = {",
          "const products = [",
          "const generator = new WasserPDFGenerator()"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 5,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import { WasserPDFGenerator, type PdfTemplate } from '../wasserPdfGenerator'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export async function generateNordicSamplePdf(): Promise<void> {"
        ],
        "hooks": []
      },
      "content": "/**\n * Пример использования WasserPDFGenerator с шаблоном 'nordic'\n * Даёт быстрый способ сгенерировать минималистичный PDF.\n */\n\nimport { WasserPDFGenerator, type PdfTemplate } from '../wasserPdfGenerator'\n\n/**\n * Сгенерировать демо PDF в стиле Nordic\n * Вызов: import { generateNordicSamplePdf } from 'src/lib/pdf/examples/nordicExample'\n *        await generateNordicSamplePdf()\n */\nexport async function generateNordicSamplePdf(): Promise<void> {\n  // 1) Данные компании и документа (обложка/метаданные)\n  const companyData = {\n    name: 'WASSER PRO',\n    tagline: 'Мебельная фабрика',\n    address: 'Кыргызстан, г. Бишкек, ул. Промышленная, 1',\n    phone: '+996 (312) 555-123',\n    email: 'sales@wasser.kg',\n    website: 'www.wasser.kg',\n    manager: {\n      name: 'Асанов Руслан',\n      phone: '+996 (555) 998-877',\n      email: 'r.asanov@wasser.kg',\n    },\n    // logoUrl: 'https://.../logo.png' // по желанию, PNG/JPEG с доступом по CORS\n  }\n\n  const documentData = {\n    title: 'ПРАЙС-ЛИСТ',\n    version: 'Demo',\n    date: new Date().toLocaleDateString('ru-RU'),\n    specialOffer: 'Специальные условия для оптовых клиентов',\n    orientation: 'portrait' as const,\n    includeCover: true,\n    brandColor: '#0f172a', // фирменный цвет темы Nordic\n  }\n\n  // 2) Демо‑серии и позиции (минимально необходимые поля)\n  const products = [\n    {\n      series: 'BERLIN',\n      seriesDesc: 'Современный минимализм, влагостойкие материалы',\n      items: [\n        { article: 'BL-V60', name: 'Тумба подвесная \"Berlin 60\"', type: 'TB', dimensions: '600×550×450', material: 'ЛДСП/МДФ', color: 'Белый глянец', price: 18500 },\n        { article: 'BL-MC60', name: 'Шкаф зеркальный \"Berlin 60\"', type: 'ШЗ', dimensions: '600×700×150', material: 'ЛДСП',        color: 'Белый глянец', price: 14800 },\n      ],\n    },\n    {\n      series: 'VIENNA',\n      seriesDesc: 'Классический стиль, фрезерованные фасады',\n      items: [\n        { article: 'VN-V75', name: 'Тумба с раковиной \"Vienna 75\"', type: 'ТР', dimensions: '750×850×480', material: 'МДФ',          color: 'Слоновая кость', price: 31000 },\n        { article: 'VN-M90', name: 'Зеркало \"Vienna 90\"',            type: 'ЗР', dimensions: '900×800×40',  material: 'МДФ',          color: 'Слоновая кость', price: 19200 },\n      ],\n    },\n    {\n      series: 'LOFT',\n      seriesDesc: 'Индустриальный дизайн, металлические элементы',\n      items: [\n        { article: 'LF-V100', name: 'Тумба \"Loft 100\"',   type: 'ТМ', dimensions: '1000×600×500', material: 'ЛДСП/Металл', color: 'Дуб крафт/Черный', price: 21000 },\n        { article: 'LF-SH40', name: 'Стеллаж \"Loft\"',     type: 'СТ', dimensions: '400×1600×350', material: 'ЛДСП/Металл', color: 'Дуб крафт/Черный', price: 18900 },\n      ],\n    },\n  ]\n\n  // 3) Генерация\n  const generator = new WasserPDFGenerator()\n  await generator.generateAndSave(\n    {\n      companyData,\n      documentData,\n      products,\n    },\n    'nordic' as PdfTemplate,\n    'Nordic_PriceList_Demo.pdf',\n  )\n}\n\n/**\n * Подсказка по внедрению в UI:\n * \n * import React from 'react'\n * import { generateNordicSamplePdf } from '@/lib/pdf/examples/nordicExample'\n * \n * export function ButtonNordicDemo() {\n *   return (\n *     <button\n *       onClick={() => generateNordicSamplePdf().catch(console.error)}\n *       className=\"px-4 py-2 rounded-lg bg-gray-900 text-white hover:bg-black\"\n *     >\n *       Скачать Nordic PDF (демо)\n *     </button>\n *   )\n * }\n */",
      "lines": 97,
      "size": 4104,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.3975073+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/scroll-area.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const ScrollArea = React.forwardRef<",
          "const ScrollBar = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 2,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { ScrollArea, ScrollBar }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
      "lines": 49,
      "size": 1656,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2705956+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/lib/pdf/priceList.ts": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "async function registerCyrillicFont(doc: jsPDF, fontUrl?: string, fontName = 'WasserSans'): Promise<void> {",
          "const url =",
          "const res = await fetch(url)",
          "const buffer = await res.arrayBuffer()",
          "const base64 = arrayBufferToBase64(buffer)",
          "function arrayBufferToBase64(buffer: ArrayBuffer): string {",
          "const bytes = new Uint8Array(buffer)",
          "const chunk = 0x8000",
          "const sub = bytes.subarray(i, i + chunk)",
          "function formatCurrency(amount: number, currency: string, decimals: number) {",
          "function calculateProductPrice(",
          "const materialCost = techCardArr.reduce((sum: number, it: any) => {",
          "const mat = materials.find((m) => m.id === it.materialId)",
          "const pt = priceSettings.productTypes.find((p) => p.id === product.product_type_id)",
          "const workCost = pt?.workCost || 0",
          "const basePrice = materialCost + workCost",
          "const priceWithType = basePrice * (1 + (pt?.markup || 0) / 100)",
          "const ft = priceSettings.finishTypes.find((f) => f.id === product.finish_type_id)",
          "const finalPrice = priceWithType * (1 + (ft?.markup || 0) / 100)",
          "const markup = basePrice > 0 ? ((finalPrice - basePrice) / basePrice) * 100 : 0",
          "export async function generatePriceListPDF(params: {",
          "const brand = options.brandColor || '#2563eb'",
          "const doc = new jsPDF({ unit: 'pt', format: 'a4', orientation: options.pageOrientation || 'p' })",
          "const brandRGB = hexToRgb(brand) || { r: 37, g: 99, b: 235 }",
          "const grayText = '#475569'",
          "const footer = (data?: any) => {",
          "const str = `Стр. ${doc.getCurrentPageInfo().pageNumber} из ${doc.getNumberOfPages()}`",
          "const imgData = await imageUrlToDataUrl(options.logoUrl)",
          "const w = 120",
          "const h = 40",
          "const header = () => {",
          "const collectionMap = new Map(collections.map((c) => [c.id, c.name]))",
          "const productTypeMap = new Map(priceSettings.productTypes.map((t) => [t.id, t.name]))",
          "const finishMap = new Map(priceSettings.finishTypes.map((t) => [t.id, t.name]))",
          "const groupKey = (p: Product) => {",
          "const key = groupKey(p)",
          "const groupNames = Object.keys(groups)",
          "const list = groups[gName]",
          "const pricing = calculateProductPrice(p, materials, priceSettings)",
          "const lastPage = doc.getCurrentPageInfo().pageNumber",
          "const text = options.footerNote",
          "const pageWidth = doc.internal.pageSize.getWidth()",
          "const y = doc.internal.pageSize.getHeight() - 28",
          "async function imageUrlToDataUrl(url: string): Promise<string | null> {",
          "const res = await fetch(url)",
          "const blob = await res.blob()",
          "const reader = new FileReader()",
          "function hexToRgb(hex: string): { r: number; g: number; b: number } | null {",
          "const r = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)"
        ],
        "interfaces": [
          "export interface PriceListOptions {",
          "export interface Material {",
          "export interface TechCardItem {",
          "export interface Product {",
          "export interface Collection {",
          "export interface PriceSettings {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 49,
          "typesCount": 0,
          "hooksCount": 1,
          "interfacesCount": 6,
          "exportsCount": 7,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 7
        },
        "imports": [
          "import { jsPDF } from 'jspdf'",
          "import autoTable, { RowInput } from 'jspdf-autotable'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function arrayBufferToBase64(buffer: ArrayBuffer): string {",
          "function formatCurrency(amount: number, currency: string, decimals: number) {",
          "function calculateProductPrice(",
          "const footer = (data?: any) => {",
          "const header = () => {",
          "const groupKey = (p: Product) => {",
          "function hexToRgb(hex: string): { r: number; g: number; b: number } | null {"
        ],
        "exports": [
          "export interface PriceListOptions {",
          "export interface Material {",
          "export interface TechCardItem {",
          "export interface Product {",
          "export interface Collection {",
          "export interface PriceSettings {",
          "export async function generatePriceListPDF(params: {"
        ],
        "hooks": [
          "'https://raw.githubusercontent.com/google/fonts/main/apache/roboto/Roboto-Regular.ttf'"
        ]
      },
      "content": "/**\n * PDF price list generator\n * Генератор прайс-листов PDF с поддержкой кириллицы и гибких настроек\n */\n\nimport { jsPDF } from 'jspdf'\nimport autoTable, { RowInput } from 'jspdf-autotable'\n\n/**\n * Интерфейс опций генерации прайса\n */\nexport interface PriceListOptions {\n  companyName: string\n  subtitle?: string\n  footerNote?: string\n  logoUrl?: string\n  fontUrl?: string\n  brandColor?: string\n  pageOrientation?: 'p' | 'l'\n  includeCover?: boolean\n  groupBy?: 'none' | 'collection' | 'type'\n  columns: {\n    article: boolean\n    name: boolean\n    collection: boolean\n    type: boolean\n    finish: boolean\n    materialCost: boolean\n    workCost: boolean\n    price: boolean\n    markup: boolean\n  }\n  currency: string\n  decimals: number\n}\n\n/**\n * Интерфейсы данных\n */\nexport interface Material {\n  id: string\n  name: string\n  article: string\n  unit: string\n  price: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface TechCardItem {\n  materialId: string\n  quantity: number\n  _techCardId?: string\n}\n\nexport interface Product {\n  id: string\n  name: string\n  article: string\n  tech_card: TechCardItem[]\n  collection_id?: string | null\n  product_type_id?: string | null\n  finish_type_id?: string | null\n  image_url?: string | null\n  created_at: string\n  updated_at: string\n}\n\nexport interface Collection {\n  id: string\n  name: string\n  description?: string\n  product_order?: string[]\n  created_at: string\n  updated_at: string\n}\n\nexport interface PriceSettings {\n  productTypes: { id: string; name: string; markup: number; workCost: number }[]\n  finishTypes: { id: string; name: string; markup: number; workCost: number }[]\n}\n\n/**\n * Загружаем TTF шрифт и регистрируем в jsPDF (кириллица поддерживается)\n */\nasync function registerCyrillicFont(doc: jsPDF, fontUrl?: string, fontName = 'WasserSans'): Promise<void> {\n  // По умолчанию используем Roboto Regular из репозитория Google Fonts (CORS-friendly)\n  const url =\n    fontUrl?.trim() ||\n    'https://raw.githubusercontent.com/google/fonts/main/apache/roboto/Roboto-Regular.ttf'\n\n  const res = await fetch(url)\n  if (!res.ok) throw new Error('Не удалось загрузить шрифт для PDF')\n  const buffer = await res.arrayBuffer()\n  // Преобразуем в base64\n  const base64 = arrayBufferToBase64(buffer)\n\n  // Регистрируем в jsPDF\n  doc.addFileToVFS(`${fontName}.ttf`, base64)\n  doc.addFont(`${fontName}.ttf`, fontName, 'normal')\n  doc.setFont(fontName, 'normal')\n}\n\n/**\n * Конвертация ArrayBuffer -> base64\n */\nfunction arrayBufferToBase64(buffer: ArrayBuffer): string {\n  let binary = ''\n  const bytes = new Uint8Array(buffer)\n  const chunk = 0x8000\n  for (let i = 0; i < bytes.length; i += chunk) {\n    const sub = bytes.subarray(i, i + chunk)\n    binary += String.fromCharCode.apply(null, Array.from(sub) as any)\n  }\n  return btoa(binary)\n}\n\n/**\n * Формат валюты\n */\nfunction formatCurrency(amount: number, currency: string, decimals: number) {\n  try {\n    return new Intl.NumberFormat('ru-RU', {\n      style: 'currency',\n      currency,\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals,\n    }).format(amount || 0)\n  } catch {\n    // На случай нестандартного кода валюты — простой форматтер\n    return `${amount.toFixed(decimals)} ${currency}`\n  }\n}\n\n/**\n * Расчет цены изделия согласно текущим настройкам\n */\nfunction calculateProductPrice(\n  product: Product,\n  materials: Material[],\n  priceSettings: PriceSettings,\n) {\n  // Нормализация техкарты к массиву\n  const tcRaw: any = (product as any)?.tech_card\n  const techCardArr: any[] = Array.isArray(tcRaw)\n    ? tcRaw\n    : tcRaw && typeof tcRaw === 'object'\n      ? Object.values(tcRaw)\n      : []\n\n  if (techCardArr.length === 0) {\n    return { materialCost: 0, workCost: 0, basePrice: 0, finalPrice: 0, markup: 0 }\n  }\n\n  const materialCost = techCardArr.reduce((sum: number, it: any) => {\n    const mat = materials.find((m) => m.id === it.materialId)\n    return sum + (Number(it.quantity) || 0) * (mat?.price || 0)\n  }, 0)\n\n  const pt = priceSettings.productTypes.find((p) => p.id === product.product_type_id)\n  const workCost = pt?.workCost || 0\n  const basePrice = materialCost + workCost\n  const priceWithType = basePrice * (1 + (pt?.markup || 0) / 100)\n  const ft = priceSettings.finishTypes.find((f) => f.id === product.finish_type_id)\n  const finalPrice = priceWithType * (1 + (ft?.markup || 0) / 100)\n  const markup = basePrice > 0 ? ((finalPrice - basePrice) / basePrice) * 100 : 0\n\n  return { materialCost, workCost, basePrice, finalPrice, markup }\n}\n\n/**\n * Генерация PDF прайс-листа\n */\nexport async function generatePriceListPDF(params: {\n  products: Product[]\n  materials: Material[]\n  collections: Collection[]\n  priceSettings: PriceSettings\n  options: PriceListOptions\n}): Promise<void> {\n  const { products, materials, collections, priceSettings, options } = params\n  const brand = options.brandColor || '#2563eb'\n  const doc = new jsPDF({ unit: 'pt', format: 'a4', orientation: options.pageOrientation || 'p' })\n\n  // Подключаем кириллицу\n  await registerCyrillicFont(doc, options.fontUrl)\n\n  // Цвета\n  const brandRGB = hexToRgb(brand) || { r: 37, g: 99, b: 235 }\n  const grayText = '#475569'\n\n  // Номера страниц, футер\n  const footer = (data?: any) => {\n    const str = `Стр. ${doc.getCurrentPageInfo().pageNumber} из ${doc.getNumberOfPages()}`\n    doc.setFontSize(9)\n    doc.setTextColor(120)\n    doc.text(str, doc.internal.pageSize.getWidth() - 40, doc.internal.pageSize.getHeight() - 20, { align: 'right' })\n  }\n\n  // Обложка (опционально)\n  if (options.includeCover) {\n    // Верхний цветной блок\n    doc.setFillColor(brandRGB.r, brandRGB.g, brandRGB.b)\n    doc.rect(0, 0, doc.internal.pageSize.getWidth(), 120, 'F')\n\n    doc.setTextColor(255)\n    doc.setFontSize(18)\n    doc.text(options.companyName || 'Прайс‑лист', 40, 60)\n\n    doc.setFontSize(12)\n    doc.text(options.subtitle || 'Актуальные цены на изделия', 40, 90)\n\n    // Дата\n    doc.setTextColor(255)\n    doc.setFontSize(10)\n    doc.text(new Intl.DateTimeFormat('ru-RU', { dateStyle: 'long' }).format(new Date()), 40, 110)\n\n    // Лого (если задано)\n    if (options.logoUrl) {\n      try {\n        const imgData = await imageUrlToDataUrl(options.logoUrl)\n        if (imgData) {\n          const w = 120\n          const h = 40\n          doc.addImage(imgData, 'PNG', doc.internal.pageSize.getWidth() - w - 40, 40, w, h)\n        }\n      } catch {\n        // игнорируем\n      }\n    }\n\n    footer()\n    doc.addPage()\n  }\n\n  // Header каждой страницы (company + линия)\n  const header = () => {\n    doc.setFillColor(brandRGB.r, brandRGB.g, brandRGB.b)\n    doc.rect(0, 0, doc.internal.pageSize.getWidth(), 6, 'F')\n    doc.setTextColor(brand)\n    doc.setFontSize(12)\n    doc.text(options.companyName || 'Прайс‑лист', 40, 28)\n    doc.setTextColor(grayText)\n    doc.setFontSize(10)\n    doc.text(options.subtitle || 'Актуальные цены', 40, 44)\n  }\n\n  // Данные для таблицы\n  const collectionMap = new Map(collections.map((c) => [c.id, c.name]))\n  const productTypeMap = new Map(priceSettings.productTypes.map((t) => [t.id, t.name]))\n  const finishMap = new Map(priceSettings.finishTypes.map((t) => [t.id, t.name]))\n\n  // Группировка\n  const groups: Record<string, Product[]> = {}\n  const groupKey = (p: Product) => {\n    switch (options.groupBy) {\n      case 'collection':\n        return p.collection_id ? `Коллекция: ${collectionMap.get(p.collection_id) || 'Без коллекции'}` : 'Коллекция: Без коллекции'\n      case 'type':\n        return p.product_type_id ? `Тип: ${productTypeMap.get(p.product_type_id) || 'Без типа'}` : 'Тип: Без типа'\n      default:\n        return 'Все изделия'\n    }\n  }\n  products.forEach((p) => {\n    const key = groupKey(p)\n    if (!groups[key]) groups[key] = []\n    groups[key].push(p)\n  })\n\n  // Заголовок таблицы согласно выбранным колонкам\n  const headRow: string[] = []\n  if (options.columns.article) headRow.push('Артикул')\n  if (options.columns.name) headRow.push('Наименование')\n  if (options.columns.collection) headRow.push('Коллекция')\n  if (options.columns.type) headRow.push('Тип')\n  if (options.columns.finish) headRow.push('Отделка')\n  if (options.columns.materialCost) headRow.push('Материалы')\n  if (options.columns.workCost) headRow.push('Работа')\n  if (options.columns.price) headRow.push('Цена')\n  if (options.columns.markup) headRow.push('Наценка')\n\n  // Рендер групп\n  const groupNames = Object.keys(groups)\n  groupNames.forEach((gName, idx) => {\n    const rows: RowInput[] = []\n    const list = groups[gName]\n\n    list.forEach((p) => {\n      const pricing = calculateProductPrice(p, materials, priceSettings)\n      const row: (string | number)[] = []\n\n      if (options.columns.article) row.push(p.article)\n      if (options.columns.name) row.push(p.name)\n      if (options.columns.collection) row.push(p.collection_id ? collectionMap.get(p.collection_id) || '—' : '—')\n      if (options.columns.type) row.push(p.product_type_id ? productTypeMap.get(p.product_type_id) || '—' : '—')\n      if (options.columns.finish) row.push(p.finish_type_id ? finishMap.get(p.finish_type_id) || '—' : '—')\n      if (options.columns.materialCost) row.push(formatCurrency(pricing.materialCost, options.currency, options.decimals))\n      if (options.columns.workCost) row.push(formatCurrency(pricing.workCost, options.currency, options.decimals))\n      if (options.columns.price) row.push(formatCurrency(pricing.finalPrice, options.currency, options.decimals))\n      if (options.columns.markup) row.push(`${pricing.markup.toFixed(1)}%`)\n\n      rows.push(row as RowInput)\n    })\n\n    // Заголовок группы\n    doc.setFontSize(13)\n    doc.setTextColor(brand)\n    doc.text(gName, 40, 72)\n    doc.setTextColor(0)\n\n    autoTable(doc, {\n      head: [headRow],\n      body: rows,\n      startY: 82,\n      styles: {\n        font: doc.getFont().fontName,\n        fontStyle: 'normal',\n        fontSize: 10,\n        textColor: 30,\n        cellPadding: 6,\n      },\n      headStyles: {\n        fillColor: brandRGB,\n        textColor: 255,\n        fontSize: 10.5,\n      },\n      alternateRowStyles: {\n        fillColor: [247, 249, 252],\n      },\n      didDrawPage: () => {\n        header()\n        footer()\n      },\n      margin: { left: 40, right: 40, top: 60, bottom: 40 },\n      theme: 'striped',\n      columnStyles: {\n        // Чуть уже артикул/наценка/работа, шире имя\n        0: { cellWidth: headRow[0] === 'Артикул' ? 90 : 'auto' },\n      } as any,\n    })\n\n    // Пробел между группами\n    if (idx < groupNames.length - 1) {\n      doc.addPage()\n    }\n  })\n\n  // Примечание внизу последней страницы\n  if (options.footerNote) {\n    const lastPage = doc.getCurrentPageInfo().pageNumber\n    doc.setPage(lastPage)\n    doc.setFontSize(9)\n    doc.setTextColor(100)\n    const text = options.footerNote\n    const pageWidth = doc.internal.pageSize.getWidth()\n    const y = doc.internal.pageSize.getHeight() - 28\n    doc.text(text, pageWidth / 2, y, { align: 'center', maxWidth: pageWidth - 120 })\n  }\n\n  doc.save(`PriceList_${new Date().toISOString().slice(0, 10)}.pdf`)\n}\n\n/**\n * Преобразуем URL изображения в dataURL (для логотипа)\n */\nasync function imageUrlToDataUrl(url: string): Promise<string | null> {\n  try {\n    const res = await fetch(url)\n    if (!res.ok) return null\n    const blob = await res.blob()\n    return await new Promise((resolve) => {\n      const reader = new FileReader()\n      reader.onload = () => resolve(reader.result as string)\n      reader.readAsDataURL(blob)\n    })\n  } catch {\n    return null\n  }\n}\n\n/**\n * HEX -> RGB\n */\nfunction hexToRgb(hex: string): { r: number; g: number; b: number } | null {\n  const r = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return r ? { r: parseInt(r[1], 16), g: parseInt(r[2], 16), b: parseInt(r[3], 16) } : null\n}\n",
      "lines": 389,
      "size": 12669,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.3919816+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/theme.ts": {
      "analysis": {
        "types": [
          "export type ThemeMode = 'light' | 'dark' | 'system'"
        ],
        "classes": [],
        "components": [
          "const THEME_KEY = 'app_theme'",
          "function apply(mode: ThemeMode) {",
          "const prefersDark = typeof window !== 'undefined'",
          "const isDark = mode === 'dark' || (mode === 'system' && prefersDark)",
          "const root = document.documentElement",
          "function onSystemChange() {",
          "function readSaved(): ThemeMode {",
          "const saved = localStorage.getItem(THEME_KEY) as ThemeMode | null",
          "export function setTheme(mode: ThemeMode) {",
          "export function getTheme(): ThemeMode {",
          "(function initTheme() {",
          "const initial = readSaved()"
        ],
        "interfaces": [],
        "hasJSX": false,
        "stats": {
          "componentsCount": 12,
          "typesCount": 1,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 3,
          "importsCount": 0,
          "classesCount": 0,
          "functionsCount": 3
        },
        "imports": [],
        "hasTypeScript": true,
        "functions": [
          "function apply(mode: ThemeMode) {",
          "function onSystemChange() {",
          "function readSaved(): ThemeMode {"
        ],
        "exports": [
          "export type ThemeMode = 'light' | 'dark' | 'system'",
          "export function setTheme(mode: ThemeMode) {",
          "export function getTheme(): ThemeMode {"
        ],
        "hooks": []
      },
      "content": "/**\n * theme — управление темой (light / dark / system)\n * Автоинициализация при импорте, сохранение в localStorage, реакция на смену системной темы.\n */\n\nexport type ThemeMode = 'light' | 'dark' | 'system'\nconst THEME_KEY = 'app_theme'\n\nlet currentMode: ThemeMode = 'system'\nlet media: MediaQueryList | null = null\n\n/** Применить класс темы к html */\nfunction apply(mode: ThemeMode) {\n  currentMode = mode\n  try {\n    localStorage.setItem(THEME_KEY, mode)\n  } catch {}\n\n  const prefersDark = typeof window !== 'undefined'\n    ? window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\n    : false\n\n  const isDark = mode === 'dark' || (mode === 'system' && prefersDark)\n  const root = document.documentElement\n  root.classList.toggle('dark', isDark)\n\n  // Слежение за системной темой только в режиме system\n  if (media) {\n    media.removeEventListener?.('change', onSystemChange)\n    media = null\n  }\n  if (mode === 'system' && typeof window !== 'undefined' && window.matchMedia) {\n    media = window.matchMedia('(prefers-color-scheme: dark)')\n    media.addEventListener?.('change', onSystemChange)\n  }\n}\n\n/** Обработчик изменения системной темы */\nfunction onSystemChange() {\n  apply(currentMode)\n}\n\n/** Получить режим из localStorage */\nfunction readSaved(): ThemeMode {\n  try {\n    const saved = localStorage.getItem(THEME_KEY) as ThemeMode | null\n    if (saved === 'light' || saved === 'dark' || saved === 'system') return saved\n  } catch {}\n  return 'system'\n}\n\n/** Публичные API */\nexport function setTheme(mode: ThemeMode) {\n  apply(mode)\n}\nexport function getTheme(): ThemeMode {\n  return currentMode\n}\n\n/** Автоинициализация */\n(function initTheme() {\n  const initial = readSaved()\n  apply(initial)\n})()\n",
      "lines": 65,
      "size": 1946,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.2043704+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/common/LoadingOverlay.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const LoadingOverlay = memo(function LoadingOverlay({ show }: LoadingOverlayProps): React.ReactElement | null {"
        ],
        "interfaces": [
          "export interface LoadingOverlayProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React, { memo } from 'react'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface LoadingOverlayProps {",
          "export default LoadingOverlay"
        ],
        "hooks": []
      },
      "content": "/**\n * LoadingOverlay — стартовый загрузчик \"как в файле\"\n * Показывает светлый оверлей со спиннером и брендом\n */\n\nimport React, { memo } from 'react'\n\n/**\n * Пропсы для LoadingOverlay\n */\nexport interface LoadingOverlayProps {\n  /** Показать/скрыть загрузчик */\n  show: boolean\n}\n\n/**\n * LoadingOverlay — полноэкранный блок со спиннером\n */\nconst LoadingOverlay = memo(function LoadingOverlay({ show }: LoadingOverlayProps): React.ReactElement | null {\n  if (!show) return null\n  return (\n    <div className=\"fixed inset-0 z-[60] bg-white/95 backdrop-blur-sm flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin mx-auto mb-4\" />\n        <h2 className=\"text-xl font-semibold text-gray-800 mb-1\">WASSER PRO</h2>\n        <p className=\"text-gray-600\">Загрузка системы управления…</p>\n        <div className=\"mt-4 w-48 bg-gray-200 rounded-full h-2 mx-auto overflow-hidden\">\n          <div className=\"bg-blue-600 h-2 rounded-full animate-pulse\" style={{ width: '62%' }} />\n        </div>\n      </div>\n    </div>\n  )\n})\n\nexport default LoadingOverlay\n",
      "lines": 36,
      "size": 1328,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3493739+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/dialog.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Dialog = DialogPrimitive.Root",
          "const DialogTrigger = DialogPrimitive.Trigger",
          "const DialogPortal = DialogPrimitive.Portal",
          "const DialogClose = DialogPrimitive.Close",
          "const DialogOverlay = React.forwardRef<",
          "const DialogContent = React.forwardRef<",
          "const DialogHeader = ({",
          "const DialogFooter = ({",
          "const DialogTitle = React.forwardRef<",
          "const DialogDescription = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 10,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as DialogPrimitive from \"@radix-ui/react-dialog\"",
          "import { X } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export {"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
      "lines": 123,
      "size": 3849,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2410199+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/resizable.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const ResizablePanelGroup = ({",
          "const ResizablePanel = ResizablePrimitive.Panel",
          "const ResizableHandle = ({"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 3,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import { GripVertical } from \"lucide-react\"",
          "import * as ResizablePrimitive from \"react-resizable-panels\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { ResizablePanelGroup, ResizablePanel, ResizableHandle }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n",
      "lines": 46,
      "size": 1723,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2685902+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/dropdown-menu.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const DropdownMenu = DropdownMenuPrimitive.Root",
          "const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger",
          "const DropdownMenuGroup = DropdownMenuPrimitive.Group",
          "const DropdownMenuPortal = DropdownMenuPrimitive.Portal",
          "const DropdownMenuSub = DropdownMenuPrimitive.Sub",
          "const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup",
          "const DropdownMenuSubTrigger = React.forwardRef<",
          "const DropdownMenuSubContent = React.forwardRef<",
          "const DropdownMenuContent = React.forwardRef<",
          "const DropdownMenuItem = React.forwardRef<",
          "const DropdownMenuCheckboxItem = React.forwardRef<",
          "const DropdownMenuRadioItem = React.forwardRef<",
          "const DropdownMenuLabel = React.forwardRef<",
          "const DropdownMenuSeparator = React.forwardRef<",
          "const DropdownMenuShortcut = ({"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 15,
          "typesCount": 0,
          "hooksCount": 3,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"",
          "import { Check, ChevronRight, Circle } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export {"
        ],
        "hooks": [
          "const DropdownMenuSeparator = React.forwardRef<",
          "DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName",
          "DropdownMenuSeparator,"
        ]
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
      "lines": 202,
      "size": 7606,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2445208+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/sheet.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Sheet = SheetPrimitive.Root",
          "const SheetTrigger = SheetPrimitive.Trigger",
          "const SheetClose = SheetPrimitive.Close",
          "const SheetPortal = SheetPrimitive.Portal",
          "const SheetOverlay = React.forwardRef<",
          "const sheetVariants = cva(",
          "const SheetContent = React.forwardRef<",
          "const SheetHeader = ({",
          "const SheetFooter = ({",
          "const SheetTitle = React.forwardRef<",
          "const SheetDescription = React.forwardRef<"
        ],
        "interfaces": [
          "interface SheetContentProps"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 11,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 1,
          "exportsCount": 1,
          "importsCount": 5,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as SheetPrimitive from \"@radix-ui/react-dialog\"",
          "import { cva, type VariantProps } from \"class-variance-authority\"",
          "import { X } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export {"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
      "lines": 141,
      "size": 4280,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2778869+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/toggle-group.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const ToggleGroupContext = React.createContext<",
          "const ToggleGroup = React.forwardRef<",
          "const ToggleGroupItem = React.forwardRef<",
          "const context = React.useContext(ToggleGroupContext)"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 4,
          "typesCount": 0,
          "hooksCount": 1,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 5,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"",
          "import { type VariantProps } from \"class-variance-authority\"",
          "import { cn } from \"@/lib/utils\"",
          "import { toggleVariants } from \"@/components/ui/toggle\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { ToggleGroup, ToggleGroupItem }"
        ],
        "hooks": [
          "const context = React.useContext(ToggleGroupContext)"
        ]
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n",
      "lines": 62,
      "size": 1753,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2997842+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/skeleton.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "function Skeleton({"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [
          "function Skeleton({"
        ],
        "exports": [
          "export { Skeleton }"
        ],
        "hooks": []
      },
      "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
      "lines": 16,
      "size": 266,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2818867+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/common/PriceMulti.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export default function PriceMulti(props: PriceMultiProps): React.ReactElement {",
          "const cfg = useCurrencyConfig()",
          "const extras = convertToExtras(amountBase || 0, cfg)"
        ],
        "interfaces": [
          "export interface PriceMultiProps {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 3,
          "typesCount": 0,
          "hooksCount": 4,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React from 'react'",
          "import { useCurrencyConfig, convertToExtras } from '../../services/currency'",
          "import { useLocaleFormat } from '../../hooks/useLocaleFormat'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface PriceMultiProps {",
          "export default function PriceMulti(props: PriceMultiProps): React.ReactElement {"
        ],
        "hooks": [
          "import { useCurrencyConfig, convertToExtras } from '../../services/currency'",
          "import { useLocaleFormat } from '../../hooks/useLocaleFormat'",
          "const cfg = useCurrencyConfig()",
          "const { formatCurrency } = useLocaleFormat(cfg.base || 'KGS')"
        ]
      },
      "content": "/**\n * PriceMulti — вывод суммы в базовой валюте и дублей в выбранных иностранных валютах.\n * Использует конфигурацию из services/currency и хук useLocaleFormat для корректного форматирования.\n */\n\nimport React from 'react'\nimport { useCurrencyConfig, convertToExtras } from '../../services/currency'\nimport { useLocaleFormat } from '../../hooks/useLocaleFormat'\n\n/**\n * Пропсы PriceMulti\n */\nexport interface PriceMultiProps {\n  /** Сумма в базовой валюте (из расчётов) */\n  amountBase: number\n  /** Класс контейнера */\n  className?: string\n  /** Точность для форматирования базовой суммы (по умолчанию 2) */\n  precision?: number\n  /** Показать подпись к дублям (например, \"≈\") */\n  showLabel?: boolean\n}\n\n/**\n * Компонент мультивалютного вывода цены\n */\nexport default function PriceMulti(props: PriceMultiProps): React.ReactElement {\n  const { amountBase, className, precision = 2, showLabel = false } = props\n  const cfg = useCurrencyConfig()\n  const { formatCurrency } = useLocaleFormat(cfg.base || 'KGS')\n\n  const extras = convertToExtras(amountBase || 0, cfg)\n\n  return (\n    <div className={['flex flex-wrap items-center gap-1', className || ''].join(' ')}>\n      <span className=\"font-bold text-blue-600\">\n        {formatCurrency(Number(amountBase || 0), cfg.base, { minimumFractionDigits: precision, maximumFractionDigits: precision })}\n      </span>\n      {extras.length > 0 && (\n        <>\n          {showLabel && <span className=\"text-xs text-gray-500 mx-1\">≈</span>}\n          {extras.map((e) => (\n            <span\n              key={e.code}\n              className=\"text-xs px-2 py-0.5 rounded border border-gray-200 bg-white text-gray-700\"\n              title={`Курс: 1 ${cfg.base} = ${cfg.rates?.[e.code] ?? 0} ${e.code}`}\n            >\n              {formatCurrency(e.amount, e.code, { minimumFractionDigits: precision, maximumFractionDigits: precision })}\n            </span>\n          ))}\n        </>\n      )}\n    </div>\n  )\n}\n",
      "lines": 56,
      "size": 2235,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3644143+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/lib/pdf/wasserPdfGenerator.ts": {
      "analysis": {
        "types": [
          "export type PdfTemplate = 'modern' | 'nordic' | 'executive'",
          "type CachedImage = { dataUrl: string; imgType: 'PNG' | 'JPEG' }"
        ],
        "classes": [
          "export class WasserPDFGenerator {"
        ],
        "components": [
          "const loadedFonts = new Set<string>()",
          "function hexToRgb(hex: string): [number, number, number] {",
          "const m = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec((hex || '').trim())",
          "function toRGB(color: string | number[] | undefined, fallback: [number, number, number] = [0, 0, 0]): [number, number, number] {",
          "function arrayBufferToBinaryString(buffer: ArrayBuffer): string {",
          "const bytes = new Uint8Array(buffer)",
          "const CHUNK = 0x8000",
          "const sub = bytes.subarray(i, i + CHUNK)",
          "function formatCurrency(amount: number, currency = 'KGS', locale = 'ru-RU'): string {",
          "async function registerFont(doc: any, url: string, fontName: string): Promise<boolean> {",
          "const resp = await fetch(url, { cache: 'no-store', mode: 'cors' as RequestMode })",
          "const buffer = await resp.arrayBuffer()",
          "const binary = arrayBufferToBinaryString(buffer)",
          "const doc = await this.generateDoc(input, template)",
          "const name = filename || `PriceList_${new Date().toISOString().slice(0, 10)}.pdf`",
          "const doc = await this.generateDoc(input, template)",
          "const JsPdfCtor = getJsPdfCtor()",
          "const base = THEMES[template]",
          "const overrideBrand = input.documentData.brandColor?.trim()",
          "const currency = input.documentData.currency || 'KGS'",
          "const locale = input.documentData.locale || 'ru-RU'",
          "const orientation = input.documentData.orientation || 'portrait'",
          "const doc = new JsPdfCtor({",
          "const margin = 36",
          "const autoTable = (doc as any).autoTable?.bind(doc)",
          "const headBg = toRGB(theme.table.headBg as any, [255, 255, 255])",
          "const headText = toRGB(theme.table.headText as any, [17, 17, 17])",
          "const border = toRGB(theme.table.border as any, [229, 231, 235])",
          "const rowStripe = theme.table.rowStripe ? toRGB(theme.table.rowStripe as any, [241, 245, 249]) : null",
          "const text = toRGB(theme.text, [17, 17, 17])",
          "const brand = toRGB(theme.brand, [37, 99, 235])",
          "const cols = ['Артикул', 'Наименование', 'Вид', 'Габариты', 'Материал', 'Цвет', `Цена (${currency})`]",
          "const priceColIdx = cols.length - 1",
          "const lastY = (doc as any).lastAutoTable?.finalY",
          "const headerY = lastY ? lastY + 24 : nextStartY",
          "const body = series.items.map((it) => [",
          "const seriesTotal = series.items.reduce((sum, it) => sum + (Number(it.price) || 0), 0)",
          "const cellPadding = 6",
          "const footRow =",
          "const pageNumber = doc.internal.getCurrentPageInfo",
          "const pageCount = doc.internal.getNumberOfPages()",
          "const autoTable = (doc as any).autoTable?.bind(doc)",
          "const lastY = (doc as any).lastAutoTable?.finalY",
          "const startY = lastY ? lastY + 24 : 60",
          "const summaryRow = cols.map((_c, i) => {",
          "const pageNumber = doc.internal.getCurrentPageInfo",
          "const pageCount = doc.internal.getNumberOfPages()",
          "const pageCount = doc.internal.getNumberOfPages()",
          "const w = doc.internal.pageSize.getWidth()",
          "const h = doc.internal.pageSize.getHeight()",
          "const text = input.documentData.footerNote",
          "const w = doc.internal.pageSize.getWidth()",
          "const brand = toRGB(theme.brand, [37, 99, 235])",
          "const bandHeight = Math.max(120, theme.header.bandHeight * 6)",
          "const subY = theme.key === 'modern' ? 130 : 96",
          "const y = subY + 36",
          "const pill = [241, 245, 249] as [number, number, number]",
          "const pillWidth = Math.min(420, (input.documentData.specialOffer.length * 6) + 24)",
          "const rightX = w - 200",
          "const c = input.companyData",
          "const logo = cachedLogo || (c.logoUrl ? await this.fetchImageToDataUrl(c.logoUrl) : null)",
          "const y = subY + 72",
          "const resp = await fetch(url, { cache: 'no-store' })",
          "const blob = await resp.blob()",
          "const buf = await blob.arrayBuffer()",
          "const uint8 = new Uint8Array(buf)",
          "const base64 = btoa(binary)",
          "const dataUrl = `data:${blob.type};base64,${base64}`",
          "const isPng = /png/i.test(blob.type)",
          "const isJpg = /jpe?g/i.test(blob.type)",
          "function drawHeaderFooter(",
          "const w = doc.internal.pageSize.getWidth()",
          "const h = doc.internal.pageSize.getHeight()",
          "const band = toRGB(theme.brand, [37, 99, 235])",
          "const brand = toRGB(theme.brand, [37, 99, 235])",
          "const brandRGB = toRGB(theme.brand, [37, 99, 235])",
          "const brandY = theme.header.topBand ? Math.max(14, theme.header.bandHeight - 6) : margin",
          "const subtitle = documentData.title || company.tagline || ''",
          "const imgW = 36",
          "const imgH = 18"
        ],
        "interfaces": [
          "export interface CompanyData {",
          "export interface DocumentData {",
          "export interface SeriesItem {",
          "export interface ProductSeries {",
          "export interface GenerateInput {",
          "interface Theme {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 80,
          "typesCount": 2,
          "hooksCount": 3,
          "interfacesCount": 6,
          "exportsCount": 7,
          "importsCount": 1,
          "classesCount": 1,
          "functionsCount": 5
        },
        "imports": [
          "import { ensureJsPdf, getJsPdfCtor } from './loader'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function hexToRgb(hex: string): [number, number, number] {",
          "function toRGB(color: string | number[] | undefined, fallback: [number, number, number] = [0, 0, 0]): [number, number, number] {",
          "function arrayBufferToBinaryString(buffer: ArrayBuffer): string {",
          "function formatCurrency(amount: number, currency = 'KGS', locale = 'ru-RU'): string {",
          "function drawHeaderFooter("
        ],
        "exports": [
          "export type PdfTemplate = 'modern' | 'nordic' | 'executive'",
          "export interface CompanyData {",
          "export interface DocumentData {",
          "export interface SeriesItem {",
          "export interface ProductSeries {",
          "export interface GenerateInput {",
          "export class WasserPDFGenerator {"
        ],
        "hooks": [
          "fontUrl: 'https://raw.githubusercontent.com/google/fonts/main/ofl/spacegrotesk/SpaceGrotesk-Regular.ttf',",
          "fontUrl: 'https://raw.githubusercontent.com/google/fonts/main/ofl/inter/Inter%5Bwght%5D.ttf',",
          "fontUrl: 'https://raw.githubusercontent.com/google/fonts/main/apache/roboto/Roboto-Regular.ttf',"
        ]
      },
      "content": "/**\n * WasserPDFGenerator — генератор PDF прайс‑листов с 3 шаблонами (modern, nordic, executive).\n * Обновления:\n * - Жирные заголовки таблиц\n * - Подсветка бренд-цветом колонки \"Цена\"\n * - Лого в футере каждой страницы (если задано)\n * - Итоги по серии (опционально)\n * - Общий итог по всем сериям (опционально)\n * - Примечание внизу последней страницы (footerNote)\n */\n\nimport { ensureJsPdf, getJsPdfCtor } from './loader'\n\n/**\n * Тип шаблона PDF\n */\nexport type PdfTemplate = 'modern' | 'nordic' | 'executive'\n\n/**\n * Данные компании для шапки/обложки\n */\nexport interface CompanyData {\n  /** Название компании */\n  name: string\n  /** Теглайн/описание */\n  tagline?: string\n  /** Адрес */\n  address?: string\n  /** Телефон */\n  phone?: string\n  /** Email */\n  email?: string\n  /** Сайт */\n  website?: string\n  /** Ответственный менеджер */\n  manager?: {\n    name?: string\n    phone?: string\n    email?: string\n  }\n  /** URL логотипа (опционально) */\n  logoUrl?: string\n}\n\n/**\n * Данные документа (метаданные и поведенческие флаги)\n */\nexport interface DocumentData {\n  /** Заголовок документа */\n  title: string\n  /** Версия документа */\n  version?: string\n  /** Дата (строка) */\n  date?: string\n  /** Спецпредложение / плашка */\n  specialOffer?: string\n  /** Валюта для сумм */\n  currency?: string\n  /** Локаль форматирования */\n  locale?: string\n  /** Ориентация */\n  orientation?: 'portrait' | 'landscape'\n  /** Включать ли обложку */\n  includeCover?: boolean\n  /** Переопределение бренд-цвета темы */\n  brandColor?: string\n  /** Показать итог по каждой серии (табличный foot) */\n  showGroupTotals?: boolean\n  /** Показать общий итог по всем сериям */\n  showGrandTotal?: boolean\n  /** Текст‑примечание внизу последней страницы */\n  footerNote?: string\n}\n\n/**\n * Позиция прайс-листа (строка таблицы)\n */\nexport interface SeriesItem {\n  article: string\n  name: string\n  type?: string\n  dimensions?: string\n  material?: string\n  color?: string\n  price: number\n  imageUrl?: string\n}\n\n/**\n * Серия (группа товаров)\n */\nexport interface ProductSeries {\n  series: string\n  seriesDesc?: string\n  items: SeriesItem[]\n}\n\n/**\n * Входные данные генератора\n */\nexport interface GenerateInput {\n  companyData: CompanyData\n  documentData: DocumentData\n  products: ProductSeries[]\n}\n\n/**\n * Внутренняя палитра темы\n */\ninterface Theme {\n  key: PdfTemplate\n  brand: string\n  text: string\n  headerText: string\n  table: {\n    headBg: string | number[]\n    headText: string | number[]\n    rowStripe?: string | number[]\n    border?: string | number[]\n  }\n  header: {\n    topBand: boolean\n    bandHeight: number\n    underline: boolean\n  }\n  tableTheme: 'striped' | 'grid' | 'plain'\n  /** Размеры шрифтов */\n  fontSizes: {\n    brand: number\n    sub: number\n    base: number\n    hGroup: number\n  }\n  /** Рекомендуемый URL шрифта (TTF) */\n  fontUrl: string\n  /** Имя шрифта в jsPDF */\n  fontName: string\n}\n\n/**\n * Набор тем (точное соответствие трем шаблонам)\n */\nconst THEMES: Record<PdfTemplate, Theme> = {\n  modern: {\n    key: 'modern',\n    brand: '#2563eb',\n    text: '#111111',\n    headerText: '#ffffff',\n    table: {\n      headBg: '#2563eb',\n      headText: [255, 255, 255],\n      rowStripe: '#f1f5f9',\n      border: '#e5e7eb',\n    },\n    header: {\n      topBand: true,\n      bandHeight: 24,\n      underline: false,\n    },\n    tableTheme: 'striped',\n    fontSizes: { brand: 12, sub: 9, base: 10, hGroup: 14 },\n    fontUrl: 'https://raw.githubusercontent.com/google/fonts/main/ofl/spacegrotesk/SpaceGrotesk-Regular.ttf',\n    fontName: 'SpaceGrotesk',\n  },\n  nordic: {\n    key: 'nordic',\n    brand: '#0f172a',\n    text: '#111111',\n    headerText: '#111111',\n    table: {\n      headBg: '#ffffff',\n      headText: [17, 17, 17],\n      rowStripe: '#fafafa',\n      border: '#e5e7eb',\n    },\n    header: {\n      topBand: false,\n      bandHeight: 0,\n      underline: true,\n    },\n    tableTheme: 'plain',\n    fontSizes: { brand: 12, sub: 9, base: 10, hGroup: 14 },\n    fontUrl: 'https://raw.githubusercontent.com/google/fonts/main/ofl/inter/Inter%5Bwght%5D.ttf',\n    fontName: 'Inter',\n  },\n  executive: {\n    key: 'executive',\n    brand: '#1d4ed8',\n    text: '#111111',\n    headerText: '#ffffff',\n    table: {\n      headBg: '#1d4ed8',\n      headText: [255, 255, 255],\n      rowStripe: '#eef2ff',\n      border: '#c7d2fe',\n    },\n    header: {\n      topBand: false,\n      bandHeight: 0,\n      underline: true,\n    },\n    tableTheme: 'grid',\n    fontSizes: { brand: 12, sub: 9, base: 10, hGroup: 14 },\n    fontUrl: 'https://raw.githubusercontent.com/google/fonts/main/apache/roboto/Roboto-Regular.ttf',\n    fontName: 'Roboto',\n  },\n}\n\n/** Кэш подключенных шрифтов */\nconst loadedFonts = new Set<string>()\n\n/**\n * Преобразование HEX (#rrggbb) в [r,g,b]\n */\nfunction hexToRgb(hex: string): [number, number, number] {\n  const m = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec((hex || '').trim())\n  if (!m) return [0, 0, 0]\n  return [parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16)]\n}\n\n/**\n * Любой цвет -> [r,g,b]\n */\nfunction toRGB(color: string | number[] | undefined, fallback: [number, number, number] = [0, 0, 0]): [number, number, number] {\n  if (!color) return fallback\n  if (Array.isArray(color) && color.length >= 3) {\n    return [Number(color[0]) || 0, Number(color[1]) || 0, Number(color[2]) || 0]\n  }\n  if (typeof color === 'string') return hexToRgb(color)\n  return fallback\n}\n\n/**\n * ArrayBuffer -> бинарная строка (для addFileToVFS)\n */\nfunction arrayBufferToBinaryString(buffer: ArrayBuffer): string {\n  const bytes = new Uint8Array(buffer)\n  let binary = ''\n  const CHUNK = 0x8000\n  for (let i = 0; i < bytes.byteLength; i += CHUNK) {\n    const sub = bytes.subarray(i, i + CHUNK)\n    binary += String.fromCharCode.apply(null, Array.from(sub) as any)\n  }\n  return binary\n}\n\n/**\n * Формат валюты\n */\nfunction formatCurrency(amount: number, currency = 'KGS', locale = 'ru-RU'): string {\n  try {\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency,\n      minimumFractionDigits: 2,\n    }).format(amount || 0)\n  } catch {\n    return `${(amount || 0).toFixed(2)} ${currency}`\n  }\n}\n\n/**\n * Загрузка и регистрация TTF-шрифта в jsPDF\n */\nasync function registerFont(doc: any, url: string, fontName: string): Promise<boolean> {\n  try {\n    if (!loadedFonts.has(fontName)) {\n      const resp = await fetch(url, { cache: 'no-store', mode: 'cors' as RequestMode })\n      if (!resp.ok) throw new Error('font fetch failed')\n      const buffer = await resp.arrayBuffer()\n      const binary = arrayBufferToBinaryString(buffer)\n      doc.addFileToVFS(`${fontName}.ttf`, binary)\n      doc.addFont(`${fontName}.ttf`, fontName, 'normal')\n      loadedFonts.add(fontName)\n    }\n    doc.setFont(fontName, 'normal')\n    return true\n  } catch {\n    // fallback на встроенный Helvetica\n    doc.setFont('helvetica', 'normal')\n    return false\n  }\n}\n\n/**\n * Тип для кэшированного изображения (логотип)\n */\ntype CachedImage = { dataUrl: string; imgType: 'PNG' | 'JPEG' }\n\n/**\n * WasserPDFGenerator — основной класс генерации\n */\nexport class WasserPDFGenerator {\n  /**\n   * Сгенерировать и сохранить PDF (скачивание)\n   */\n  async generateAndSave(input: GenerateInput, template: PdfTemplate, filename?: string): Promise<void> {\n    const doc = await this.generateDoc(input, template)\n    const name = filename || `PriceList_${new Date().toISOString().slice(0, 10)}.pdf`\n    doc.save(name)\n  }\n\n  /**\n   * Сгенерировать PDF и вернуть Blob\n   */\n  async generateBlob(input: GenerateInput, template: PdfTemplate): Promise<Blob> {\n    const doc = await this.generateDoc(input, template)\n    return doc.output('blob')\n  }\n\n  /**\n   * Внутренний метод: формирование jsPDF документа\n   * Логика:\n   * - выбор темы и шрифта\n   * - опциональная обложка\n   * - таблицы по сериям с итогами\n   * - общий итог (опционально)\n   * - footerNote на последней странице (опционально)\n   */\n  private async generateDoc(input: GenerateInput, template: PdfTemplate): Promise<any> {\n    await ensureJsPdf()\n    const JsPdfCtor = getJsPdfCtor()\n    if (!JsPdfCtor) throw new Error('jsPDF не доступен')\n\n    // Базовая тема и возможные переопределения\n    const base = THEMES[template]\n    const overrideBrand = input.documentData.brandColor?.trim()\n    const theme: Theme = overrideBrand ? { ...base, brand: overrideBrand } : base\n\n    const currency = input.documentData.currency || 'KGS'\n    const locale = input.documentData.locale || 'ru-RU'\n    const orientation = input.documentData.orientation || 'portrait'\n\n    const doc = new JsPdfCtor({\n      unit: 'pt',\n      format: 'a4',\n      orientation,\n      compress: true,\n    })\n\n    // Шрифт\n    await registerFont(doc, theme.fontUrl, theme.fontName)\n\n    // Предзагрузка логотипа (для футера/обложки)\n    const footerLogo: CachedImage | null =\n      input.companyData.logoUrl ? await this.fetchImageToDataUrl(input.companyData.logoUrl) : null\n\n    // Обложка — по флагу includeCover (по умолчанию вкл)\n    if (input.documentData.includeCover !== false) {\n      await this.drawCover(doc, theme, input, footerLogo)\n    }\n\n    // Таблицы по сериям\n    const margin = 36\n    const autoTable = (doc as any).autoTable?.bind(doc)\n    if (!autoTable) throw new Error('jspdf-autotable не подключен')\n\n    // Параметры цветов таблицы\n    const headBg = toRGB(theme.table.headBg as any, [255, 255, 255])\n    const headText = toRGB(theme.table.headText as any, [17, 17, 17])\n    const border = toRGB(theme.table.border as any, [229, 231, 235])\n    const rowStripe = theme.table.rowStripe ? toRGB(theme.table.rowStripe as any, [241, 245, 249]) : null\n    const text = toRGB(theme.text, [17, 17, 17])\n    const brand = toRGB(theme.brand, [37, 99, 235])\n\n    const cols = ['Артикул', 'Наименование', 'Вид', 'Габариты', 'Материал', 'Цвет', `Цена (${currency})`]\n    const priceColIdx = cols.length - 1\n\n    // Начальная позиция\n    let nextStartY = 60\n\n    // Итог для всех серий\n    let grandTotal = 0\n\n    input.products.forEach((series, _seriesIdx) => {\n      // Заголовок группы\n      const lastY = (doc as any).lastAutoTable?.finalY\n      const headerY = lastY ? lastY + 24 : nextStartY\n\n      // Название серии и описание\n      doc.setTextColor(brand[0], brand[1], brand[2])\n      doc.setFontSize(theme.fontSizes.hGroup)\n      doc.text(series.series || 'Серия', margin, headerY - 8)\n      doc.setFontSize(theme.fontSizes.base)\n      doc.setTextColor(text[0], text[1], text[2])\n      if (series.seriesDesc) {\n        doc.setFontSize(9.5)\n        doc.setTextColor(120)\n        doc.text(series.seriesDesc, margin, headerY + 4)\n      }\n      doc.setFontSize(theme.fontSizes.base)\n      doc.setTextColor(text[0], text[1], text[2])\n\n      // Данные таблицы\n      const body = series.items.map((it) => [\n        it.article || '',\n        it.name || '',\n        it.type || '',\n        it.dimensions || '',\n        it.material || '',\n        it.color || '',\n        formatCurrency(it.price, currency, locale),\n      ])\n\n      // Подсчет итогов серии и накопление общего итога\n      const seriesTotal = series.items.reduce((sum, it) => sum + (Number(it.price) || 0), 0)\n      grandTotal += seriesTotal\n\n      // Плотность и стили\n      const cellPadding = 6\n\n      // Итоговая строка для серии (опционально)\n      const footRow =\n        input.documentData.showGroupTotals\n          ? cols.map((_c, i) => {\n              if (i === Math.max(0, priceColIdx - 1)) return 'Итого серии'\n              if (i === priceColIdx) return formatCurrency(seriesTotal, currency, locale)\n              return ''\n            })\n          : undefined\n\n      autoTable({\n        startY: headerY + (series.seriesDesc ? 12 : 0),\n        head: [cols],\n        body,\n        ...(footRow ? { foot: [footRow] } : {}),\n        margin,\n        theme: theme.tableTheme,\n        styles: {\n          font: (doc.getFont && doc.getFont().fontName) || undefined,\n          fontStyle: 'normal',\n          fontSize: theme.fontSizes.base,\n          cellPadding,\n          textColor: text,\n          lineColor: border,\n          lineWidth: theme.key === 'nordic' ? 0 : 0.2,\n          overflow: 'linebreak',\n        },\n        headStyles: {\n          fillColor: theme.key === 'nordic' ? [255, 255, 255] : headBg,\n          textColor: headText,\n          halign: 'left',\n          lineColor: border,\n          lineWidth: theme.key === 'nordic' ? 0 : 0.2,\n          // Шапка всегда жирная\n          fontStyle: 'bold',\n        },\n        footStyles: {\n          fillColor: theme.key === 'nordic' ? [255, 255, 255] : [245, 245, 245],\n          textColor: [17, 17, 17],\n          fontStyle: 'bold',\n        },\n        alternateRowStyles:\n          theme.tableTheme !== 'plain' && rowStripe\n            ? {\n                fillColor: rowStripe,\n              }\n            : undefined,\n        didDrawPage: () => {\n          const pageNumber = doc.internal.getCurrentPageInfo\n            ? doc.internal.getCurrentPageInfo().pageNumber\n            : doc.internal.getNumberOfPages()\n          const pageCount = doc.internal.getNumberOfPages()\n          drawHeaderFooter(doc, pageNumber, pageCount, theme, margin, input.companyData, input.documentData, footerLogo)\n        },\n        didParseCell: (data: any) => {\n          // Подсветка колонки \"Цена\" (тело)\n          if (data.section === 'body' && data.column.index === priceColIdx) {\n            data.cell.styles.textColor = brand\n            data.cell.styles.fontStyle = 'bold'\n            data.cell.styles.halign = 'right'\n          }\n          // Выравнивание итогов серии\n          if (data.section === 'foot' && data.column.index === priceColIdx) {\n            data.cell.styles.halign = 'right'\n            data.cell.styles.textColor = brand\n          }\n        },\n      } as any)\n\n      // Между группами — отступ (autotable сам переносит при необходимости)\n      nextStartY = (doc as any).lastAutoTable?.finalY ? (doc as any).lastAutoTable.finalY + 16 : nextStartY\n    })\n\n    // Общий итог по всем сериям (опционально)\n    if (input.documentData.showGrandTotal && input.products.length > 0) {\n      const autoTable = (doc as any).autoTable?.bind(doc)\n      const lastY = (doc as any).lastAutoTable?.finalY\n      const startY = lastY ? lastY + 24 : 60\n\n      const summaryRow = cols.map((_c, i) => {\n        if (i === Math.max(0, priceColIdx - 1)) return 'Итого по всем сериям'\n        if (i === priceColIdx) return formatCurrency(grandTotal, currency, locale)\n        return ''\n      })\n\n      autoTable({\n        startY,\n        head: undefined,\n        body: [summaryRow],\n        margin,\n        theme: 'plain',\n        styles: {\n          font: (doc.getFont && doc.getFont().fontName) || undefined,\n          fontStyle: 'bold',\n          fontSize: theme.fontSizes.base,\n          cellPadding: 6,\n          textColor: text,\n          lineColor: border,\n        },\n        didDrawPage: () => {\n          const pageNumber = doc.internal.getCurrentPageInfo\n            ? doc.internal.getCurrentPageInfo().pageNumber\n            : doc.internal.getNumberOfPages()\n          const pageCount = doc.internal.getNumberOfPages()\n          drawHeaderFooter(doc, pageNumber, pageCount, theme, margin, input.companyData, input.documentData, footerLogo)\n        },\n        didParseCell: (data: any) => {\n          if (data.column.index === priceColIdx) data.cell.styles.halign = 'right'\n          // Подсветка суммы в общем итоге\n          if (data.column.index === priceColIdx) data.cell.styles.textColor = brand\n        },\n      } as any)\n    }\n\n    // Footer note на последней странице (если задан)\n    if (input.documentData.footerNote) {\n      const pageCount = doc.internal.getNumberOfPages()\n      doc.setPage(pageCount)\n      const w = doc.internal.pageSize.getWidth()\n      const h = doc.internal.pageSize.getHeight()\n      doc.setFontSize(9)\n      doc.setTextColor(100)\n      const text = input.documentData.footerNote\n      doc.text(text, w / 2, h - 26, { align: 'center', maxWidth: w - 120 })\n    }\n\n    return doc\n  }\n\n  /**\n   * Рисование обложки с учетом темы\n   * Используется общий helper для загрузки логотипа\n   */\n  private async drawCover(doc: any, theme: Theme, input: GenerateInput, cachedLogo: CachedImage | null): Promise<void> {\n    const w = doc.internal.pageSize.getWidth()\n    const brand = toRGB(theme.brand, [37, 99, 235])\n\n    // Цветная верхняя область у modern, у остальных — тонкая линия и чистая обложка\n    if (theme.key === 'modern') {\n      const bandHeight = Math.max(120, theme.header.bandHeight * 6)\n      doc.setFillColor(brand[0], brand[1], brand[2])\n      doc.rect(0, 0, w, bandHeight, 'F')\n      doc.setTextColor(255, 255, 255)\n      doc.setFontSize(26)\n      doc.text(input.companyData.name || 'WASSER', 40, 70)\n      doc.setFontSize(14)\n      doc.text(input.documentData.title || 'ПРАЙС-ЛИСТ', 40, 100)\n    } else {\n      // Строго/минимально\n      doc.setDrawColor(brand[0], brand[1], brand[2])\n      doc.setLineWidth(1.2)\n      doc.line(40, 48, w - 40, 48)\n      doc.setTextColor(brand[0], brand[1], brand[2])\n      doc.setFontSize(22)\n      doc.text(input.companyData.name || 'WASSER', 40, 36)\n      doc.setTextColor(17, 17, 17)\n      doc.setFontSize(14)\n      doc.text(input.documentData.title || 'ПРАЙС-ЛИСТ', 40, 72)\n    }\n\n    // Метаданные/дата/версия/плашка\n    const subY = theme.key === 'modern' ? 130 : 96\n    doc.setTextColor(17, 17, 17)\n    doc.setFontSize(10)\n    if (input.documentData.version) {\n      doc.text(`Версия: ${input.documentData.version}`, 40, subY)\n    }\n    if (input.documentData.date) {\n      doc.text(`Действителен с: ${input.documentData.date}`, 40, subY + 16)\n    }\n    if (input.documentData.specialOffer) {\n      const y = subY + 36\n      const pill = [241, 245, 249] as [number, number, number]\n      doc.setFillColor(pill[0], pill[1], pill[2])\n      const pillWidth = Math.min(420, (input.documentData.specialOffer.length * 6) + 24)\n      doc.roundedRect(40, y - 12, pillWidth, 24, 6, 6, 'F')\n      doc.setTextColor(brand[0], brand[1], brand[2])\n      doc.setFontSize(11)\n      doc.text(input.documentData.specialOffer, 52, y + 3)\n    }\n\n    // Контакты справа\n    const rightX = w - 200\n    let line = subY\n    const c = input.companyData\n    doc.setTextColor(107, 114, 128)\n    doc.setFontSize(10)\n    if (c.address) {\n      doc.text(c.address, rightX, line); line += 14\n    }\n    if (c.phone) {\n      doc.text(c.phone, rightX, line); line += 14\n    }\n    if (c.email) {\n      doc.text(c.email, rightX, line); line += 14\n    }\n    if (c.website) {\n      doc.text(c.website, rightX, line); line += 14\n    }\n\n    // Лого (если есть)\n    const logo = cachedLogo || (c.logoUrl ? await this.fetchImageToDataUrl(c.logoUrl) : null)\n    if (logo) {\n      try {\n        doc.addImage(logo.dataUrl, logo.imgType, w - 180, 40, 120, 60)\n      } catch {\n        // игнорируем\n      }\n    }\n\n    // Менеджер\n    if (c.manager?.name || c.manager?.phone || c.manager?.email) {\n      const y = subY + 72\n      doc.setTextColor(17, 17, 17)\n      doc.setFontSize(11)\n      doc.text('Менеджер по работе с клиентами', 40, y)\n      doc.setTextColor(0, 0, 0)\n      doc.setFontSize(12)\n      if (c.manager?.name) doc.text(c.manager.name, 40, y + 18)\n      doc.setTextColor(107, 114, 128)\n      doc.setFontSize(10)\n      if (c.manager?.phone) doc.text(c.manager.phone, 40, y + 34)\n      if (c.manager?.email) doc.text(c.manager.email, 40, y + 48)\n    }\n\n    // Конец обложки -> новая страница\n    doc.addPage()\n  }\n\n  /**\n   * Загрузить изображение по URL и вернуть dataURL + тип\n   */\n  private async fetchImageToDataUrl(url: string): Promise<CachedImage | null> {\n    try {\n      const resp = await fetch(url, { cache: 'no-store' })\n      if (!resp.ok) return null\n      const blob = await resp.blob()\n      const buf = await blob.arrayBuffer()\n      const uint8 = new Uint8Array(buf)\n      let binary = ''\n      for (let i = 0; i < uint8.length; i++) binary += String.fromCharCode(uint8[i])\n      const base64 = btoa(binary)\n      const dataUrl = `data:${blob.type};base64,${base64}`\n      const isPng = /png/i.test(blob.type)\n      const isJpg = /jpe?g/i.test(blob.type)\n      const imgType: 'PNG' | 'JPEG' = isPng ? 'PNG' : isJpg ? 'JPEG' : 'PNG'\n      return { dataUrl, imgType }\n    } catch {\n      return null\n    }\n  }\n}\n\n/**\n * Рисование шапки/футера на странице\n * Обновлено: мини-логотип в футере (слева), нумерация справа.\n */\nfunction drawHeaderFooter(\n  doc: any,\n  pageNumber: number,\n  pageCount: number,\n  theme: Theme,\n  margin: number,\n  company: CompanyData,\n  documentData: DocumentData,\n  footerLogo?: CachedImage | null,\n) {\n  const w = doc.internal.pageSize.getWidth()\n  const h = doc.internal.pageSize.getHeight()\n\n  // Верхняя полоса (modern)\n  if (theme.header.topBand) {\n    const band = toRGB(theme.brand, [37, 99, 235])\n    doc.setFillColor(band[0], band[1], band[2])\n    doc.rect(0, 0, w, theme.header.bandHeight, 'F')\n  }\n  // Подчеркивание (nordic/executive)\n  if (theme.header.underline) {\n    const brand = toRGB(theme.brand, [37, 99, 235])\n    doc.setDrawColor(brand[0], brand[1], brand[2])\n    doc.setLineWidth(theme.key === 'nordic' ? 0.5 : 0.8)\n    doc.line(margin, margin - 4, w - margin, margin - 4)\n  }\n\n  // Бренд\n  const brandRGB = toRGB(theme.brand, [37, 99, 235])\n  if (theme.header.topBand) {\n    doc.setTextColor(255, 255, 255)\n  } else {\n    doc.setTextColor(brandRGB[0], brandRGB[1], brandRGB[2])\n  }\n  doc.setFontSize(theme.fontSizes.brand)\n  const brandY = theme.header.topBand ? Math.max(14, theme.header.bandHeight - 6) : margin\n  doc.text(company.name || 'WASSER', margin, brandY)\n\n  // Подзаголовок\n  const subRGB: [number, number, number] = [17, 17, 17]\n  doc.setTextColor(subRGB[0], subRGB[1], subRGB[2])\n  doc.setFontSize(theme.fontSizes.sub)\n  const subtitle = documentData.title || company.tagline || ''\n  if (subtitle) doc.text(subtitle, margin, brandY + 8)\n\n  // Футер: мини-лого + нумерация\n  if (footerLogo?.dataUrl) {\n    try {\n      const imgW = 36\n      const imgH = 18\n      doc.addImage(footerLogo.dataUrl, footerLogo.imgType, margin, h - imgH - 14, imgW, imgH)\n    } catch {\n      // ignore\n    }\n  }\n  doc.setFontSize(9)\n  const foot: [number, number, number] = [107, 114, 128]\n  doc.setTextColor(foot[0], foot[1], foot[2])\n  doc.text(`Стр. ${pageNumber} из ${pageCount}`, w - margin, h - 10, { align: 'right' })\n}\n",
      "lines": 729,
      "size": 24554,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.3899828+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/sidebar.tsx": {
      "analysis": {
        "types": [
          "type SidebarContextProps = {"
        ],
        "classes": [],
        "components": [
          "const SIDEBAR_COOKIE_NAME = \"sidebar_state\"",
          "const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7",
          "const SIDEBAR_WIDTH = \"16rem\"",
          "const SIDEBAR_WIDTH_MOBILE = \"18rem\"",
          "const SIDEBAR_WIDTH_ICON = \"3rem\"",
          "const SIDEBAR_KEYBOARD_SHORTCUT = \"b\"",
          "const SidebarContext = React.createContext<SidebarContextProps | null>(null)",
          "function useSidebar() {",
          "const context = React.useContext(SidebarContext)",
          "const SidebarProvider = React.forwardRef<",
          "const isMobile = useIsMobile()",
          "const open = openProp ?? _open",
          "const setOpen = React.useCallback(",
          "const openState = typeof value === \"function\" ? value(open) : value",
          "const toggleSidebar = React.useCallback(() => {",
          "const handleKeyDown = (event: KeyboardEvent) => {",
          "const state = open ? \"expanded\" : \"collapsed\"",
          "const contextValue = React.useMemo<SidebarContextProps>(",
          "const Sidebar = React.forwardRef<",
          "const SidebarTrigger = React.forwardRef<",
          "const SidebarRail = React.forwardRef<",
          "const SidebarInset = React.forwardRef<",
          "const SidebarInput = React.forwardRef<",
          "const SidebarHeader = React.forwardRef<",
          "const SidebarFooter = React.forwardRef<",
          "const SidebarSeparator = React.forwardRef<",
          "const SidebarContent = React.forwardRef<",
          "const SidebarGroup = React.forwardRef<",
          "const SidebarGroupLabel = React.forwardRef<",
          "const Comp = asChild ? Slot : \"div\"",
          "const SidebarGroupAction = React.forwardRef<",
          "const Comp = asChild ? Slot : \"button\"",
          "const SidebarGroupContent = React.forwardRef<",
          "const SidebarMenu = React.forwardRef<",
          "const SidebarMenuItem = React.forwardRef<",
          "const sidebarMenuButtonVariants = cva(",
          "const SidebarMenuButton = React.forwardRef<",
          "const Comp = asChild ? Slot : \"button\"",
          "const button = (",
          "const SidebarMenuAction = React.forwardRef<",
          "const Comp = asChild ? Slot : \"button\"",
          "const SidebarMenuBadge = React.forwardRef<",
          "const SidebarMenuSkeleton = React.forwardRef<",
          "const width = React.useMemo(() => {",
          "const SidebarMenuSub = React.forwardRef<",
          "const SidebarMenuSubItem = React.forwardRef<",
          "const SidebarMenuSubButton = React.forwardRef<",
          "const Comp = asChild ? Slot : \"a\""
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 48,
          "typesCount": 1,
          "hooksCount": 17,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 12,
          "classesCount": 0,
          "functionsCount": 2
        },
        "imports": [
          "import * as React from \"react\"",
          "import { Slot } from \"@radix-ui/react-slot\"",
          "import { VariantProps, cva } from \"class-variance-authority\"",
          "import { PanelLeft } from \"lucide-react\"",
          "import { useIsMobile } from \"@/hooks/use-mobile\"",
          "import { cn } from \"@/lib/utils\"",
          "import { Button } from \"@/components/ui/button\"",
          "import { Input } from \"@/components/ui/input\"",
          "import { Separator } from \"@/components/ui/separator\"",
          "import {",
          "import { Skeleton } from \"@/components/ui/skeleton\"",
          "import {"
        ],
        "hasTypeScript": true,
        "functions": [
          "function useSidebar() {",
          "const handleKeyDown = (event: KeyboardEvent) => {"
        ],
        "exports": [
          "export {"
        ],
        "hooks": [
          "import { useIsMobile } from \"@/hooks/use-mobile\"",
          "function useSidebar() {",
          "const context = React.useContext(SidebarContext)",
          "throw new Error(\"useSidebar must be used within a SidebarProvider.\")",
          "const isMobile = useIsMobile()",
          "const [openMobile, setOpenMobile] = React.useState(false)",
          "const [_open, _setOpen] = React.useState(defaultOpen)",
          "const setOpen = React.useCallback(",
          "const toggleSidebar = React.useCallback(() => {",
          "React.useEffect(() => {",
          "const contextValue = React.useMemo<SidebarContextProps>(",
          "const { isMobile, state, openMobile, setOpenMobile } = useSidebar()",
          "const { toggleSidebar } = useSidebar()",
          "const { toggleSidebar } = useSidebar()",
          "const { isMobile, state } = useSidebar()",
          "const width = React.useMemo(() => {",
          "useSidebar,"
        ]
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
      "lines": 774,
      "size": 23581,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2798893+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/common/ToasterProvider.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export default function ToasterProvider(): React.ReactElement {"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React from 'react'",
          "import { Toaster } from 'sonner'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export default function ToasterProvider(): React.ReactElement {"
        ],
        "hooks": []
      },
      "content": "/**\n * ToasterProvider — глобальный провайдер уведомлений\n * Использует библиотеку sonner (предустановлена) для уведомлений в стиле \"как в файле\"\n */\n\nimport React from 'react'\nimport { Toaster } from 'sonner'\n\n/**\n * ToasterProvider — рендерит глобальный Toaster в правом верхнем углу\n */\nexport default function ToasterProvider(): React.ReactElement {\n  return (\n    <Toaster\n      position=\"top-right\"\n      richColors\n      closeButton\n      duration={3200}\n      toastOptions={{\n        classNames: {\n          toast: 'rounded-xl shadow-lg',\n        },\n      }}\n    />\n  )\n}\n",
      "lines": 27,
      "size": 714,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3478658+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/pages/Materials.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const LS_READ_KEYS = ['wasser_materials', 'wasser_materials_data'] as const",
          "const LS_WRITE_KEY = 'wasser_materials'",
          "function readArrayFromLS<T = unknown>(keys: readonly string[], fallback: T[]): T[] {",
          "const raw = localStorage.getItem(key)",
          "const parsed = JSON.parse(raw) as T[]",
          "function writeArrayToLS<T = unknown>(key: string, value: T[]): void {",
          "function coerceMaterial(x: any): Material | null {",
          "const id = String(x.id ?? (typeof crypto !== 'undefined' && 'randomUUID' in crypto ? crypto.randomUUID() : Date.now().toString(36)))",
          "const name = String(x.name ?? '').trim()",
          "const article = String(x.article ?? '').trim()",
          "const unit = String(x.unit ?? 'шт')",
          "const price = Number(x.price ?? 0)",
          "const created_at = String(x.created_at ?? new Date().toISOString())",
          "const updated_at = String(x.updated_at ?? new Date().toISOString())",
          "function parseCsvToMaterials(csv: string): Material[] {",
          "const lines = csv",
          "const row = lines[i]",
          "const cols = row",
          "const mat = coerceMaterial({",
          "function exportMaterialsCsv(items: Material[]): void {",
          "const header = ['name', 'article', 'unit', 'price']",
          "const rows = items.map((m) => [m.name, m.article, m.unit, String(m.price)])",
          "const csv = [header, ...rows]",
          "const blob = new Blob(['\\uFEFF' + csv], { type: 'text/csv;charset=utf-8;' })",
          "const url = URL.createObjectURL(blob)",
          "const a = document.createElement('a')",
          "const PageHeader = memo(function PageHeader(): React.ReactElement {",
          "function ActionsBar({",
          "const f = e.target.files?.[0]",
          "const MaterialCard = memo(function MaterialCard({",
          "function AddMaterialForm({",
          "const submit = useCallback(() => {",
          "export default function MaterialsPage(): React.ReactElement {",
          "const raw = readArrayFromLS<any>(LS_READ_KEYS as unknown as string[], [])",
          "const normalized = raw.map(coerceMaterial).filter(Boolean) as Material[]",
          "const filtered = useMemo(() => {",
          "const t = search.trim().toLowerCase()",
          "const persist = useCallback(",
          "const addMaterial = useCallback(",
          "const now = new Date().toISOString()",
          "const id = (typeof crypto !== 'undefined' && 'randomUUID' in crypto ? crypto.randomUUID() : Date.now().toString(36))",
          "const next = [m, ...items]",
          "const removeMaterial = useCallback(",
          "const target = items.find((x) => x.id === id)",
          "const next = items.filter((x) => x.id !== id)",
          "const importCsv = useCallback(",
          "const text = await file.text()",
          "const imported = parseCsvToMaterials(text)",
          "const mapByArticle = new Map(items.map((m) => [String(m.article || '').trim().toLowerCase(), m]))",
          "const key = String(it.article || '').trim().toLowerCase()",
          "const existing = key ? mapByArticle.get(key) : undefined",
          "const now = new Date().toISOString()",
          "const exportCsv = useCallback(() => {"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 53,
          "typesCount": 0,
          "hooksCount": 17,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 5,
          "classesCount": 0,
          "functionsCount": 7
        },
        "imports": [
          "import React, { memo, useCallback, useMemo, useState } from 'react'",
          "import { Layers, Plus, Upload, Download, Search } from 'lucide-react'",
          "import type { Material } from '../types/models'",
          "import { useLocaleFormat } from '../hooks/useLocaleFormat'",
          "import { toast } from 'sonner'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function readArrayFromLS<T = unknown>(keys: readonly string[], fallback: T[]): T[] {",
          "function writeArrayToLS<T = unknown>(key: string, value: T[]): void {",
          "function coerceMaterial(x: any): Material | null {",
          "function parseCsvToMaterials(csv: string): Material[] {",
          "function exportMaterialsCsv(items: Material[]): void {",
          "function ActionsBar({",
          "function AddMaterialForm({"
        ],
        "exports": [
          "export default function MaterialsPage(): React.ReactElement {"
        ],
        "hooks": [
          "import React, { memo, useCallback, useMemo, useState } from 'react'",
          "import { useLocaleFormat } from '../hooks/useLocaleFormat'",
          "const { formatCurrency } = useLocaleFormat('KGS')",
          "const [name, setName] = useState('')",
          "const [article, setArticle] = useState('')",
          "const [unit, setUnit] = useState('шт')",
          "const [price, setPrice] = useState<number>(0)",
          "const submit = useCallback(() => {",
          "const [search, setSearch] = useState('')",
          "const [adding, setAdding] = useState(false)",
          "const [items, setItems] = useState<Material[]>(() => {",
          "const filtered = useMemo(() => {",
          "const persist = useCallback(",
          "const addMaterial = useCallback(",
          "const removeMaterial = useCallback(",
          "const importCsv = useCallback(",
          "const exportCsv = useCallback(() => {"
        ]
      },
      "content": "/**\n * Страница «Материалы»\n * Функции:\n * - Просмотр, поиск, добавление, удаление материалов\n * - Импорт/экспорт CSV (UTF-8 с BOM)\n * - KGS как базовая валюта, форматирование через useLocaleFormat\n * - Тост‑уведомления на все ключевые действия\n */\n\nimport React, { memo, useCallback, useMemo, useState } from 'react'\nimport { Layers, Plus, Upload, Download, Search } from 'lucide-react'\nimport type { Material } from '../types/models'\nimport { useLocaleFormat } from '../hooks/useLocaleFormat'\nimport { toast } from 'sonner'\n\n/**\n * Поддерживаемые ключи localStorage для чтения (совместимость со старыми версиями)\n */\nconst LS_READ_KEYS = ['wasser_materials', 'wasser_materials_data'] as const\n/**\n * Ключ для записи материалов\n */\nconst LS_WRITE_KEY = 'wasser_materials'\n\n/**\n * Безопасное чтение массива из localStorage\n */\nfunction readArrayFromLS<T = unknown>(keys: readonly string[], fallback: T[]): T[] {\n  for (const key of keys) {\n    try {\n      const raw = localStorage.getItem(key)\n      if (raw) {\n        const parsed = JSON.parse(raw) as T[]\n        if (Array.isArray(parsed)) return parsed\n      }\n    } catch {\n      // ignore\n    }\n  }\n  return fallback\n}\n\n/**\n * Безопасная запись массива в localStorage\n */\nfunction writeArrayToLS<T = unknown>(key: string, value: T[]): void {\n  try {\n    localStorage.setItem(key, JSON.stringify(value))\n  } catch {\n    // ignore\n  }\n}\n\n/**\n * Преобразование произвольной записи к Material (минимальная нормализация)\n */\nfunction coerceMaterial(x: any): Material | null {\n  if (!x || typeof x !== 'object') return null\n  const id = String(x.id ?? (typeof crypto !== 'undefined' && 'randomUUID' in crypto ? crypto.randomUUID() : Date.now().toString(36)))\n  const name = String(x.name ?? '').trim()\n  const article = String(x.article ?? '').trim()\n  const unit = String(x.unit ?? 'шт')\n  const price = Number(x.price ?? 0)\n  const created_at = String(x.created_at ?? new Date().toISOString())\n  const updated_at = String(x.updated_at ?? new Date().toISOString())\n  if (!name) return null\n  return { id, name, article, unit, price, created_at, updated_at }\n}\n\n/**\n * Парсинг CSV -> массив Material\n * Формат колонок: name,article,unit,price (простая CSV-логика с учётом кавычек)\n */\nfunction parseCsvToMaterials(csv: string): Material[] {\n  const lines = csv\n    .split(/\\r?\\n/)\n    .map((l) => l.trim())\n    .filter(Boolean)\n  if (lines.length === 0) return []\n\n  const out: Material[] = []\n  for (let i = 0; i < lines.length; i++) {\n    const row = lines[i]\n    const cols = row\n      .replace(/\\uFEFF/g, '')\n      .split(',')\n      .map((c) => c.replace(/^\"|\"$/g, '').replace(/\"\"/g, '\"').trim())\n\n    if (cols.length === 1 && i === 0 && cols[0].toLowerCase().includes('name')) {\n      // Учитываем, что первая строка может быть заголовком\n      continue\n    }\n\n    const mat = coerceMaterial({\n      name: cols[0] ?? '',\n      article: cols[1] ?? '',\n      unit: cols[2] ?? 'шт',\n      price: cols[3] ?? 0,\n    })\n    if (mat) out.push(mat)\n  }\n  return out\n}\n\n/**\n * Экспорт массива Material в CSV (UTF-8 с BOM для кириллицы)\n */\nfunction exportMaterialsCsv(items: Material[]): void {\n  const header = ['name', 'article', 'unit', 'price']\n  const rows = items.map((m) => [m.name, m.article, m.unit, String(m.price)])\n  const csv = [header, ...rows]\n    .map((r) => r.map((c) => `\"${String(c).replace(/\"/g, '\"\"')}\"`).join(','))\n    .join('\\n')\n\n  const blob = new Blob(['\\uFEFF' + csv], { type: 'text/csv;charset=utf-8;' })\n  const url = URL.createObjectURL(blob)\n\n  const a = document.createElement('a')\n  a.href = url\n  a.download = `materials_${new Date().toISOString().slice(0, 10)}.csv`\n  document.body.appendChild(a)\n  a.click()\n  document.body.removeChild(a)\n  URL.revokeObjectURL(url)\n}\n\n/**\n * Заголовок страницы «Материалы»\n */\nconst PageHeader = memo(function PageHeader(): React.ReactElement {\n  return (\n    <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-3\">\n      <div className=\"flex items-center gap-3\">\n        <div className=\"w-10 h-10 rounded-xl bg-blue-600 text-white flex items-center justify-center shadow-md\">\n          <Layers size={20} />\n        </div>\n        <div>\n          <h1 className=\"text-2xl font-extrabold text-gray-900\">Материалы</h1>\n          <div className=\"text-sm text-gray-600\">База материалов: добавление, поиск, импорт/экспорт CSV</div>\n        </div>\n      </div>\n    </div>\n  )\n})\n\n/**\n * Панель действий: поиск + кнопки (импорт/экспорт/добавить)\n */\nfunction ActionsBar({\n  search,\n  onSearch,\n  onImport,\n  onExport,\n  onAdd,\n}: {\n  search: string\n  onSearch: (v: string) => void\n  onImport: (file: File) => void\n  onExport: () => void\n  onAdd: () => void\n}): React.ReactElement {\n  return (\n    <div className=\"flex flex-col sm:flex-row gap-3 sm:items-center sm:justify-between\">\n      <div className=\"relative flex-1\">\n        <Search size={16} className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-400\" />\n        <input\n          type=\"text\"\n          value={search}\n          onChange={(e) => onSearch(e.target.value)}\n          placeholder=\"Поиск по названию или артикулу...\"\n          className=\"w-full pl-10 pr-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white\"\n          aria-label=\"Поиск материалов\"\n        />\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <label className=\"inline-flex cursor-pointer\">\n          <input\n            type=\"file\"\n            accept=\".csv\"\n            onChange={(e) => {\n              const f = e.target.files?.[0]\n              if (f) onImport(f)\n              e.currentTarget.value = ''\n            }}\n            className=\"hidden\"\n            aria-label=\"Импорт CSV\"\n          />\n          <span className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-800\">\n            <Upload size={16} />\n            Импорт CSV\n          </span>\n        </label>\n\n        <button\n          type=\"button\"\n          onClick={onExport}\n          className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-800\"\n          title=\"Экспорт в CSV\"\n          aria-label=\"Экспорт в CSV\"\n        >\n          <Download size={16} />\n          Экспорт\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={onAdd}\n          className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg text-white bg-blue-600 hover:bg-blue-700\"\n          title=\"Добавить материал\"\n          aria-label=\"Добавить материал\"\n        >\n          <Plus size={16} />\n          Добавить\n        </button>\n      </div>\n    </div>\n  )\n}\n\n/**\n * Карточка материала\n */\nconst MaterialCard = memo(function MaterialCard({\n  item,\n  onDelete,\n}: {\n  item: Material\n  onDelete: (id: string) => void\n}): React.ReactElement {\n  const { formatCurrency } = useLocaleFormat('KGS')\n  return (\n    <div className=\"p-4 rounded-xl border border-gray-200 bg-white hover:shadow-sm transition-all\">\n      <div className=\"flex items-start justify-between gap-3\">\n        <div className=\"min-w-0\">\n          <div className=\"text-sm font-semibold text-gray-900 truncate\">{item.name}</div>\n          <div className=\"text-xs text-gray-500 font-mono\">{item.article || '—'}</div>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-sm font-bold text-blue-600\">{formatCurrency(item.price)}</div>\n          <div className=\"text-[11px] text-gray-400\">{item.unit || 'шт'}</div>\n        </div>\n      </div>\n      <div className=\"mt-3 text-xs text-gray-500 flex items-center justify-between\">\n        <span>Создано: {new Date(item.created_at).toLocaleDateString('ru-RU')}</span>\n        <button\n          type=\"button\"\n          onClick={() => onDelete(item.id)}\n          className=\"px-2 py-1 rounded-md border border-gray-300 bg-white hover:bg-gray-50 text-gray-700\"\n          title=\"Удалить материал\"\n          aria-label=\"Удалить материал\"\n        >\n          Удалить\n        </button>\n      </div>\n    </div>\n  )\n})\n\n/**\n * Форма добавления материала (инлайн)\n */\nfunction AddMaterialForm({\n  onSubmit,\n  onCancel,\n}: {\n  onSubmit: (payload: Omit<Material, 'id' | 'created_at' | 'updated_at'>) => void\n  onCancel: () => void\n}): React.ReactElement {\n  const [name, setName] = useState('')\n  const [article, setArticle] = useState('')\n  const [unit, setUnit] = useState('шт')\n  const [price, setPrice] = useState<number>(0)\n\n  /** Отправка формы добавления нового материала */\n  const submit = useCallback(() => {\n    if (!name.trim()) {\n      toast.error('Укажите название материала')\n      return\n    }\n    onSubmit({\n      name: name.trim(),\n      article: article.trim(),\n      unit: unit.trim() || 'шт',\n      price: Number(price) || 0,\n    } as any)\n  }, [name, article, unit, price, onSubmit])\n\n  return (\n    <div className=\"rounded-xl border border-dashed border-gray-300 bg-white p-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3\">\n        <div>\n          <label className=\"block text-xs text-gray-600 mb-1\">Название</label>\n          <input\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            className=\"w-full px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"Напр., ЛДСП Белый\"\n          />\n        </div>\n        <div>\n          <label className=\"block text-xs text-gray-600 mb-1\">Артикул</label>\n          <input\n            value={article}\n            onChange={(e) => setArticle(e.target.value)}\n            className=\"w-full px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"Напр., LDSP-W\"\n          />\n        </div>\n        <div>\n          <label className=\"block text-xs text-gray-600 mb-1\">Единица</label>\n          <input\n            value={unit}\n            onChange={(e) => setUnit(e.target.value)}\n            className=\"w-full px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"шт, м²...\"\n          />\n        </div>\n        <div>\n          <label className=\"block text-xs text-gray-600 mb-1\">Цена (KGS)</label>\n          <input\n            type=\"number\"\n            step=\"0.01\"\n            value={Number.isFinite(price) ? price : 0}\n            onChange={(e) => setPrice(parseFloat(e.target.value || '0'))}\n            className=\"w-full px-3 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"0\"\n          />\n        </div>\n      </div>\n      <div className=\"mt-3 flex items-center gap-2\">\n        <button\n          type=\"button\"\n          onClick={submit}\n          className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg text-white bg-blue-600 hover:bg-blue-700\"\n        >\n          Сохранить\n        </button>\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"inline-flex items-center gap-2 px-3 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-700\"\n        >\n          Отмена\n        </button>\n      </div>\n    </div>\n  )\n}\n\n/**\n * MaterialsPage — основной компонент страницы\n */\nexport default function MaterialsPage(): React.ReactElement {\n  const [search, setSearch] = useState('')\n  const [adding, setAdding] = useState(false)\n\n  /** Начальная загрузка из localStorage с поддержкой нескольких ключей */\n  const [items, setItems] = useState<Material[]>(() => {\n    const raw = readArrayFromLS<any>(LS_READ_KEYS as unknown as string[], [])\n    const normalized = raw.map(coerceMaterial).filter(Boolean) as Material[]\n    return normalized\n  })\n\n  /** Отфильтрованный список материалов */\n  const filtered = useMemo(() => {\n    const t = search.trim().toLowerCase()\n    if (!t) return items\n    return items.filter((m) => m.name.toLowerCase().includes(t) || m.article.toLowerCase().includes(t))\n  }, [items, search])\n\n  /** Сохранить текущее состояние в localStorage */\n  const persist = useCallback(\n    (next: Material[]) => {\n      writeArrayToLS(LS_WRITE_KEY, next)\n    },\n    [],\n  )\n\n  /** Добавление нового материала */\n  const addMaterial = useCallback(\n    (payload: Omit<Material, 'id' | 'created_at' | 'updated_at'>) => {\n      const now = new Date().toISOString()\n      const id = (typeof crypto !== 'undefined' && 'randomUUID' in crypto ? crypto.randomUUID() : Date.now().toString(36))\n      const m: Material = {\n        id,\n        name: payload.name,\n        article: payload.article,\n        unit: payload.unit || 'шт',\n        price: Number(payload.price) || 0,\n        created_at: now,\n        updated_at: now,\n      }\n      const next = [m, ...items]\n      setItems(next)\n      persist(next)\n      setAdding(false)\n      toast.success('Материал добавлен')\n    },\n    [items, persist],\n  )\n\n  /** Удаление материала */\n  const removeMaterial = useCallback(\n    (id: string) => {\n      const target = items.find((x) => x.id === id)\n      if (!target) return\n      if (!window.confirm(`Удалить материал \"${target.name}\"?`)) return\n      const next = items.filter((x) => x.id !== id)\n      setItems(next)\n      persist(next)\n      toast.success('Материал удалён')\n    },\n    [items, persist],\n  )\n\n  /** Импорт CSV */\n  const importCsv = useCallback(\n    async (file: File) => {\n      try {\n        const text = await file.text()\n        const imported = parseCsvToMaterials(text)\n        if (imported.length === 0) {\n          toast.warning('Не найдено валидных строк в CSV')\n          return\n        }\n        // Мерж по артикулу: если есть совпадение — обновляем цену/единицу/название\n        const mapByArticle = new Map(items.map((m) => [String(m.article || '').trim().toLowerCase(), m]))\n        const merged: Material[] = [...items]\n        let added = 0\n        let updated = 0\n\n        for (const it of imported) {\n          const key = String(it.article || '').trim().toLowerCase()\n          const existing = key ? mapByArticle.get(key) : undefined\n          if (existing) {\n            existing.name = it.name || existing.name\n            existing.unit = it.unit || existing.unit\n            existing.price = Number(it.price) || existing.price\n            existing.updated_at = new Date().toISOString()\n            updated += 1\n          } else {\n            const now = new Date().toISOString()\n            merged.unshift({\n              ...it,\n              id: (typeof crypto !== 'undefined' && 'randomUUID' in crypto ? crypto.randomUUID() : Date.now().toString(36) + Math.random().toString(36).slice(2)),\n              created_at: now,\n              updated_at: now,\n            })\n            added += 1\n          }\n        }\n\n        setItems(merged)\n        persist(merged)\n        toast.success(`Импорт завершён: добавлено ${added}, обновлено ${updated}`)\n      } catch (e: any) {\n        toast.error(`Ошибка импорта: ${e?.message || 'неизвестно'}`)\n      }\n    },\n    [items, persist],\n  )\n\n  /** Экспорт CSV */\n  const exportCsv = useCallback(() => {\n    try {\n      exportMaterialsCsv(items)\n      toast.success('Экспортирован CSV-файл')\n    } catch {\n      toast.error('Не удалось экспортировать CSV')\n    }\n  }, [items])\n\n  return (\n    <div className=\"max-w-6xl mx-auto px-6 py-8 space-y-6\">\n      {/* Заголовок */}\n      <PageHeader />\n\n      {/* Панель действий */}\n      <div className=\"bg-white border border-gray-200 rounded-xl p-5\">\n        <ActionsBar\n          search={search}\n          onSearch={setSearch}\n          onImport={importCsv}\n          onExport={exportCsv}\n          onAdd={() => setAdding(true)}\n        />\n      </div>\n\n      {/* Форма добавления */}\n      {adding && (\n        <AddMaterialForm\n          onSubmit={addMaterial}\n          onCancel={() => setAdding(false)}\n        />\n      )}\n\n      {/* Список материалов */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\n        {filtered.length === 0 ? (\n          <div className=\"col-span-full p-8 text-center rounded-xl border border-dashed border-gray-300 bg-white text-gray-500\">\n            Материалы не найдены. Добавьте материал вручную или импортируйте CSV.\n          </div>\n        ) : (\n          filtered.map((m) => <MaterialCard key={m.id} item={m} onDelete={removeMaterial} />)\n        )}\n      </div>\n    </div>\n  )\n}\n",
      "lines": 510,
      "size": 17822,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.4125328+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/themeAccent.ts": {
      "analysis": {
        "types": [
          "export type AccentKey = 'blue' | 'night' | 'emerald' | 'violet'"
        ],
        "classes": [],
        "components": [
          "const LS_KEY = 'app_accent'",
          "function ensureStyleInjected(): void {",
          "const id = 'accent-theme-styles'",
          "const css = Object.entries(THEMES)",
          "const v = theme.vars",
          "const style = document.createElement('style')",
          "export function applyAccent(accent: AccentKey): void {",
          "const root = document.documentElement",
          "export function readAccent(): AccentKey {",
          "const v = localStorage.getItem(LS_KEY) as AccentKey | null",
          "export function listAccents(): Array<{ key: AccentKey; label: string }> {"
        ],
        "interfaces": [
          "interface AccentTheme {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 11,
          "typesCount": 1,
          "hooksCount": 0,
          "interfacesCount": 1,
          "exportsCount": 4,
          "importsCount": 0,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [],
        "hasTypeScript": true,
        "functions": [
          "function ensureStyleInjected(): void {"
        ],
        "exports": [
          "export type AccentKey = 'blue' | 'night' | 'emerald' | 'violet'",
          "export function applyAccent(accent: AccentKey): void {",
          "export function readAccent(): AccentKey {",
          "export function listAccents(): Array<{ key: AccentKey; label: string }> {"
        ],
        "hooks": []
      },
      "content": "/**\n * Управление акцентными темами (цветовая схема и фон)\n * Применяется как класс на html: accent-blue | accent-night | accent-emerald | accent-violet\n * Внутри классов задаются CSS-переменные: --accent-50..700, --bg-from, --bg-to.\n */\n\nexport type AccentKey = 'blue' | 'night' | 'emerald' | 'violet'\n\nconst LS_KEY = 'app_accent'\n\n/** Описание акцентной темы */\ninterface AccentTheme {\n  /** Человекочитаемое имя (для UI) */\n  label: string\n  /** Цветовая палитра как CSS-переменные */\n  vars: {\n    accent50: string\n    accent100: string\n    accent200: string\n    accent300: string\n    accent400: string\n    accent500: string\n    accent600: string\n    accent700: string\n    bgFrom: string\n    bgTo: string\n  }\n}\n\n/** Набор тем с палитрами (близко к tailwind цветам) */\nconst THEMES: Record<AccentKey, AccentTheme> = {\n  blue: {\n    label: 'Светлая (Blue)',\n    vars: {\n      accent50: '#eff6ff',\n      accent100: '#dbeafe',\n      accent200: '#bfdbfe',\n      accent300: '#93c5fd',\n      accent400: '#60a5fa',\n      accent500: '#3b82f6',\n      accent600: '#2563eb',\n      accent700: '#1d4ed8',\n      bgFrom: '#f8fafc',\n      bgTo: '#eff6ff'\n    }\n  },\n  night: {\n    label: 'Ночная',\n    vars: {\n      accent50: '#eef2ff',\n      accent100: '#e0e7ff',\n      accent200: '#c7d2fe',\n      accent300: '#a5b4fc',\n      accent400: '#818cf8',\n      accent500: '#6366f1',\n      accent600: '#4f46e5',\n      accent700: '#4338ca',\n      bgFrom: '#0b1020',\n      bgTo: '#141a2d'\n    }\n  },\n  emerald: {\n    label: 'Изумруд',\n    vars: {\n      accent50: '#ecfdf5',\n      accent100: '#d1fae5',\n      accent200: '#a7f3d0',\n      accent300: '#6ee7b7',\n      accent400: '#34d399',\n      accent500: '#10b981',\n      accent600: '#059669',\n      accent700: '#047857',\n      bgFrom: '#f0fdf4',\n      bgTo: '#ecfdf5'\n    }\n  },\n  violet: {\n    label: 'Аметист',\n    vars: {\n      accent50: '#faf5ff',\n      accent100: '#f3e8ff',\n      accent200: '#e9d5ff',\n      accent300: '#d8b4fe',\n      accent400: '#c084fc',\n      accent500: '#a855f7',\n      accent600: '#9333ea',\n      accent700: '#7e22ce',\n      bgFrom: '#faf5ff',\n      bgTo: '#f3e8ff'\n    }\n  }\n}\n\n/** Гарантировано добавляем в head стили классов акцентных тем (один раз) */\nfunction ensureStyleInjected(): void {\n  const id = 'accent-theme-styles'\n  if (document.getElementById(id)) return\n\n  // Формируем CSS с классами на :root\n  const css = Object.entries(THEMES)\n    .map(([key, theme]) => {\n      const v = theme.vars\n      return `\n:root.accent-${key} {\n  --accent-50: ${v.accent50};\n  --accent-100: ${v.accent100};\n  --accent-200: ${v.accent200};\n  --accent-300: ${v.accent300};\n  --accent-400: ${v.accent400};\n  --accent-500: ${v.accent500};\n  --accent-600: ${v.accent600};\n  --accent-700: ${v.accent700};\n  --bg-from: ${v.bgFrom};\n  --bg-to: ${v.bgTo};\n}`\n    })\n    .join('\\n')\n\n  const style = document.createElement('style')\n  style.id = id\n  style.textContent = css\n  document.head.appendChild(style)\n}\n\n/** Применить акцент: снять старые классы accent-*, добавить новый и записать в LS */\nexport function applyAccent(accent: AccentKey): void {\n  ensureStyleInjected()\n  const root = document.documentElement\n  // Удаляем предыдущие классы\n  ;['accent-blue','accent-night','accent-emerald','accent-violet'].forEach(c => root.classList.remove(c))\n  // Добавляем новый\n  root.classList.add(`accent-${accent}`)\n  try {\n    localStorage.setItem(LS_KEY, accent)\n  } catch {}\n}\n\n/** Прочитать сохранённый акцент (fallback: blue) */\nexport function readAccent(): AccentKey {\n  try {\n    const v = localStorage.getItem(LS_KEY) as AccentKey | null\n    if (v && v in THEMES) return v\n  } catch {}\n  return 'blue'\n}\n\n/** Получить список доступных тем для UI */\nexport function listAccents(): Array<{ key: AccentKey; label: string }> {\n  return (Object.keys(THEMES) as AccentKey[]).map((k) => ({ key: k, label: THEMES[k].label }))\n}\n",
      "lines": 151,
      "size": 4317,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.2013702+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/services/currency.ts": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "export const CURRENCY_LS_KEY = 'wasser_currency_config_v1'",
          "export function defaultCurrencyConfig(): CurrencyConfig {",
          "export function readCurrencyConfig(): CurrencyConfig {",
          "const raw = localStorage.getItem(CURRENCY_LS_KEY)",
          "const parsed = JSON.parse(raw) as CurrencyConfig",
          "export function saveCurrencyConfig(cfg: CurrencyConfig): void {",
          "export function convertToExtras(amountBase: number, cfg: CurrencyConfig): Array<{ code: string; amount: number }> {",
          "const rate = Number(cfg.rates?.[code] ?? 0)",
          "export function useCurrencyConfig(): CurrencyConfig {",
          "const onStorage = (e: StorageEvent) => {"
        ],
        "interfaces": [
          "export interface CurrencyConfig {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 10,
          "typesCount": 0,
          "hooksCount": 4,
          "interfacesCount": 1,
          "exportsCount": 7,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [
          "import { useEffect, useState } from 'react'"
        ],
        "hasTypeScript": true,
        "functions": [
          "const onStorage = (e: StorageEvent) => {"
        ],
        "exports": [
          "export interface CurrencyConfig {",
          "export const CURRENCY_LS_KEY = 'wasser_currency_config_v1'",
          "export function defaultCurrencyConfig(): CurrencyConfig {",
          "export function readCurrencyConfig(): CurrencyConfig {",
          "export function saveCurrencyConfig(cfg: CurrencyConfig): void {",
          "export function convertToExtras(amountBase: number, cfg: CurrencyConfig): Array<{ code: string; amount: number }> {",
          "export function useCurrencyConfig(): CurrencyConfig {"
        ],
        "hooks": [
          "import { useEffect, useState } from 'react'",
          "export function useCurrencyConfig(): CurrencyConfig {",
          "const [cfg, setCfg] = useState<CurrencyConfig>(() => readCurrencyConfig())",
          "useEffect(() => {"
        ]
      },
      "content": "/**\n * currency.ts — централизованные настройки валют и конвертация\n * Хранение конфигурации в localStorage, чтение/запись, хук и утилиты.\n */\n\nimport { useEffect, useState } from 'react'\n\n/**\n * Конфигурация валют\n * base — базовая валюта (по умолчанию KGS)\n * extras — дополнительные валюты для дубляжа вывода\n * rates — курсы вида: 1 base = rates[EXTRA] EXTRA\n * locale — опционально принудительная локаль форматирования\n */\nexport interface CurrencyConfig {\n  base: string\n  extras: string[]\n  rates: Record<string, number>\n  locale?: string\n}\n\n/** Ключ localStorage для настроек валют */\nexport const CURRENCY_LS_KEY = 'wasser_currency_config_v1'\n\n/**\n * Значения по умолчанию: KGS как база, несколько частых валют без курса\n * Пользователь может ввести курс вручную в панели настроек.\n */\nexport function defaultCurrencyConfig(): CurrencyConfig {\n  return {\n    base: 'KGS',\n    extras: ['USD', 'EUR', 'RUB'],\n    rates: {\n      USD: 0,\n      EUR: 0,\n      RUB: 0,\n    },\n    locale: undefined,\n  }\n}\n\n/**\n * Безопасное чтение конфигурации валют\n */\nexport function readCurrencyConfig(): CurrencyConfig {\n  try {\n    const raw = localStorage.getItem(CURRENCY_LS_KEY)\n    if (!raw) return defaultCurrencyConfig()\n    const parsed = JSON.parse(raw) as CurrencyConfig\n    // Нормализация\n    return {\n      base: parsed.base || 'KGS',\n      extras: Array.isArray(parsed.extras) ? parsed.extras : [],\n      rates: typeof parsed.rates === 'object' && parsed.rates ? parsed.rates : {},\n      locale: parsed.locale,\n    }\n  } catch {\n    return defaultCurrencyConfig()\n  }\n}\n\n/**\n * Безопасная запись конфигурации валют\n */\nexport function saveCurrencyConfig(cfg: CurrencyConfig): void {\n  try {\n    localStorage.setItem(CURRENCY_LS_KEY, JSON.stringify(cfg))\n    // Cобытие для других вкладок\n    window.dispatchEvent(new StorageEvent('storage', { key: CURRENCY_LS_KEY, newValue: JSON.stringify(cfg) } as any))\n  } catch {\n    /* noop */\n  }\n}\n\n/**\n * Конвертация суммы из базовой валюты в выбранные дополнительные\n * Возвращает массив пар [код валюты, сумма]\n */\nexport function convertToExtras(amountBase: number, cfg: CurrencyConfig): Array<{ code: string; amount: number }> {\n  const list: Array<{ code: string; amount: number }> = []\n  for (const code of cfg.extras) {\n    const rate = Number(cfg.rates?.[code] ?? 0)\n    if (rate && rate > 0) list.push({ code, amount: amountBase * rate })\n  }\n  return list\n}\n\n/**\n * Хук — реактивное чтение конфигурации с автообновлением при изменениях\n */\nexport function useCurrencyConfig(): CurrencyConfig {\n  const [cfg, setCfg] = useState<CurrencyConfig>(() => readCurrencyConfig())\n  useEffect(() => {\n    const onStorage = (e: StorageEvent) => {\n      if (e.key === CURRENCY_LS_KEY) setCfg(readCurrencyConfig())\n    }\n    window.addEventListener('storage', onStorage)\n    return () => window.removeEventListener('storage', onStorage)\n  }, [])\n  return cfg\n}\n",
      "lines": 102,
      "size": 3504,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.4326124+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/hooks/use-mobile.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const MOBILE_BREAKPOINT = 768",
          "export function useIsMobile() {",
          "const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)",
          "const onChange = () => {"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 4,
          "typesCount": 0,
          "hooksCount": 3,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [
          "import * as React from \"react\""
        ],
        "hasTypeScript": true,
        "functions": [
          "const onChange = () => {"
        ],
        "exports": [
          "export function useIsMobile() {"
        ],
        "hooks": [
          "export function useIsMobile() {",
          "const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)",
          "React.useEffect(() => {"
        ]
      },
      "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
      "lines": 20,
      "size": 565,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3749515+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/form.tsx": {
      "analysis": {
        "types": [
          "type ControllerProps,",
          "type FieldPath,",
          "type FieldValues,",
          "type FormFieldContextValue<",
          "type FormItemContextValue = {"
        ],
        "classes": [],
        "components": [
          "const Form = FormProvider",
          "const FormFieldContext = React.createContext<FormFieldContextValue>(",
          "const FormField = <",
          "const useFormField = () => {",
          "const fieldContext = React.useContext(FormFieldContext)",
          "const itemContext = React.useContext(FormItemContext)",
          "const fieldState = getFieldState(fieldContext.name, formState)",
          "const FormItemContext = React.createContext<FormItemContextValue>(",
          "const FormItem = React.forwardRef<",
          "const id = React.useId()",
          "const FormLabel = React.forwardRef<",
          "const FormControl = React.forwardRef<",
          "const FormDescription = React.forwardRef<",
          "const FormMessage = React.forwardRef<",
          "const body = error ? String(error?.message ?? \"\") : children"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 15,
          "typesCount": 5,
          "hooksCount": 12,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 6,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as LabelPrimitive from \"@radix-ui/react-label\"",
          "import { Slot } from \"@radix-ui/react-slot\"",
          "import {",
          "import { cn } from \"@/lib/utils\"",
          "import { Label } from \"@/components/ui/label\""
        ],
        "hasTypeScript": true,
        "functions": [
          "const useFormField = () => {"
        ],
        "exports": [
          "export {"
        ],
        "hooks": [
          "useFormContext,",
          "const useFormField = () => {",
          "const fieldContext = React.useContext(FormFieldContext)",
          "const itemContext = React.useContext(FormItemContext)",
          "const { getFieldState, formState } = useFormContext()",
          "throw new Error(\"useFormField should be used within <FormField>\")",
          "const id = React.useId()",
          "const { error, formItemId } = useFormField()",
          "const { error, formItemId, formDescriptionId, formMessageId } = useFormField()",
          "const { formDescriptionId } = useFormField()",
          "const { error, formMessageId } = useFormField()",
          "useFormField,"
        ]
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
      "lines": 179,
      "size": 4132,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2465256+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/command.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Command = React.forwardRef<",
          "const CommandDialog = ({ children, ...props }: DialogProps) => {",
          "const CommandInput = React.forwardRef<",
          "const CommandList = React.forwardRef<",
          "const CommandEmpty = React.forwardRef<",
          "const CommandGroup = React.forwardRef<",
          "const CommandSeparator = React.forwardRef<",
          "const CommandItem = React.forwardRef<",
          "const CommandShortcut = ({"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 9,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 6,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [
          "import * as React from \"react\"",
          "import { type DialogProps } from \"@radix-ui/react-dialog\"",
          "import { Command as CommandPrimitive } from \"cmdk\"",
          "import { Search } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\"",
          "import { Dialog, DialogContent } from \"@/components/ui/dialog\""
        ],
        "hasTypeScript": true,
        "functions": [
          "const CommandDialog = ({ children, ...props }: DialogProps) => {"
        ],
        "exports": [
          "export {"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n",
      "lines": 154,
      "size": 4887,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2370209+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/common/ErrorBoundary.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const title = this.props.title || 'Что-то пошло не так'",
          "const message ="
        ],
        "interfaces": [
          "export interface ErrorBoundaryProps {",
          "interface ErrorBoundaryState {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 2,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 2,
          "exportsCount": 2,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import React from 'react'",
          "import Card from './Card'",
          "import Button from './Button'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export interface ErrorBoundaryProps {",
          "export default class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {"
        ],
        "hooks": []
      },
      "content": "/**\n * ErrorBoundary — общий перехватчик ошибок рендера.\n * Показывает дружелюбный fallback вместо «белого экрана» и даёт опцию перезагрузить.\n */\n\nimport React from 'react'\nimport Card from './Card'\nimport Button from './Button'\n\n/**\n * Пропсы ErrorBoundary\n */\nexport interface ErrorBoundaryProps {\n  /** Дочерние элементы для оборачивания */\n  children: React.ReactNode\n  /** Заголовок в fallback UI (необязательно) */\n  title?: string\n  /** Сообщение в fallback UI (необязательно) */\n  message?: string\n}\n\n/**\n * Состояние ErrorBoundary\n */\ninterface ErrorBoundaryState {\n  /** Признак, что произошла ошибка */\n  hasError: boolean\n  /** Объект ошибки (опционально) */\n  error?: Error\n}\n\n/**\n * ErrorBoundary — классический boundary для React\n */\nexport default class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  /** Инициализация состояния */\n  constructor(props: ErrorBoundaryProps) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  /**\n   * Перехват ошибки и установка признака ошибки\n   */\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error }\n  }\n\n  /**\n   * Логирование ошибки\n   */\n  componentDidCatch(error: Error, info: React.ErrorInfo): void {\n    // Минимальное логирование — в проде можно отправлять на внешний сборщик логов\n    // eslint-disable-next-line no-console\n    console.error('Caught by ErrorBoundary:', error, info)\n  }\n\n  /**\n   * Обработчик кнопки перезагрузки\n   */\n  private handleReload = (): void => {\n    try {\n      // Мягкая очистка только временного состояния (если нужно можно расширить)\n      // Здесь просто перезагрузка страницы\n      window.location.reload()\n    } catch {\n      window.location.href = '#/'\n    }\n  }\n\n  /**\n   * Рендер компонента\n   */\n  render(): React.ReactNode {\n    if (this.state.hasError) {\n      const title = this.props.title || 'Что-то пошло не так'\n      const message =\n        this.props.message ||\n        'Произошла непредвиденная ошибка. Попробуйте перезагрузить страницу. Если проблема повторяется — обратитесь к администратору.'\n      return (\n        <div className=\"py-8\">\n          <Card className=\"p-6 bg-red-50 border-red-200\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-10 h-10 rounded-lg bg-red-100 border border-red-200 flex items-center justify-center text-red-700 font-bold\">!</div>\n              <div className=\"min-w-0\">\n                <div className=\"text-base font-semibold text-red-800\">{title}</div>\n                <div className=\"text-sm text-red-700 mt-1\">{message}</div>\n                {this.state.error?.message && (\n                  <div className=\"text-xs text-red-600 mt-2 break-words\">\n                    Техническая информация: {this.state.error.message}\n                  </div>\n                )}\n                <div className=\"mt-4\">\n                  <Button onClick={this.handleReload}>Перезагрузить</Button>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )\n    }\n    return this.props.children\n  }\n}\n",
      "lines": 105,
      "size": 3802,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3538882+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/pages/Home.tsx": {
      "analysis": {
        "types": [
          "type AccentVariant = 'blue' | 'emerald' | 'violet' | 'amber' | 'rose'",
          "type NavigationRoute = '/collections' | '/products' | '/materials' | '/pricelist' | '/settings' | '/journal'"
        ],
        "classes": [
          "class UIConfiguration {",
          "class DateTimeService {"
        ],
        "components": [
          "const HeroSection = memo(function HeroSection(): React.ReactElement {",
          "const hero = useMemo(",
          "const navigate = useNavigate()",
          "const goCollections = useCallback(() => navigate('/collections'), [navigate])",
          "const goMaterials = useCallback(() => navigate('/materials'), [navigate])",
          "const InformationPanel = memo(function InformationPanel(): React.ReactElement {",
          "const HomePage = memo(function HomePage(): React.ReactElement {",
          "const navigate = useNavigate()",
          "const handleNavigate = useCallback(",
          "const quickItems = useMemo(",
          "const isEmpty = useMemo(() => products.length === 0 && collections.length === 0, [products.length, collections.length])",
          "const productMap = useMemo(() => new Map(products.map((p) => [p.id, p])), [products])"
        ],
        "interfaces": [
          "interface QuickActionItemCfg {",
          "interface HeroConfiguration {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 12,
          "typesCount": 2,
          "hooksCount": 15,
          "interfacesCount": 2,
          "exportsCount": 1,
          "importsCount": 13,
          "classesCount": 2,
          "functionsCount": 0
        },
        "imports": [
          "import React, { memo, useCallback, useMemo } from 'react'",
          "import { useTranslation } from 'react-i18next'",
          "import { useNavigate } from 'react-router'",
          "import { Grid2X2, Package, Layers, Clock } from 'lucide-react'",
          "import Card from '../components/common/Card'",
          "import SystemMetricsPanel from '../components/home/SystemMetricsPanel'",
          "import QuickActionsPanel from '../components/home/QuickActionsPanel'",
          "import PinnedCollectionsPanel from '../components/home/PinnedCollectionsPanel'",
          "import EmptyStateSection from '../components/home/EmptyStateSection'",
          "import RecentActivity from '../components/home/RecentActivity'",
          "import CurrencyRatesCard from '../components/home/CurrencyRatesCard'",
          "import WeatherCard from '../components/home/WeatherCard'",
          "import { useSystemData } from '../hooks/useSystemData'"
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export default HomePage"
        ],
        "hooks": [
          "import React, { memo, useCallback, useMemo } from 'react'",
          "import { useTranslation } from 'react-i18next'",
          "import { useNavigate } from 'react-router'",
          "import { useSystemData } from '../hooks/useSystemData'",
          "const { t } = useTranslation()",
          "const hero = useMemo(",
          "const navigate = useNavigate()",
          "const goCollections = useCallback(() => navigate('/collections'), [navigate])",
          "const goMaterials = useCallback(() => navigate('/materials'), [navigate])",
          "const navigate = useNavigate()",
          "const { products, collections, metrics, pinnedCollections, seed } = useSystemData()",
          "const handleNavigate = useCallback(",
          "const quickItems = useMemo(",
          "const isEmpty = useMemo(() => products.length === 0 && collections.length === 0, [products.length, collections.length])",
          "const productMap = useMemo(() => new Map(products.map((p) => [p.id, p])), [products])"
        ]
      },
      "content": "/**\n * Главная страница WASSER PRO — enterprise-реализация\n * Архитектура: модульная композиция, строгая типизация, производительная оптимизация и A11y.\n * Источники данных: useSystemData (коллекции, товары, аудит, метрики), внешние виджеты (курсы, погода).\n */\n\nimport React, { memo, useCallback, useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useNavigate } from 'react-router'\nimport { Grid2X2, Package, Layers, Clock } from 'lucide-react'\n\nimport Card from '../components/common/Card'\nimport SystemMetricsPanel from '../components/home/SystemMetricsPanel'\nimport QuickActionsPanel from '../components/home/QuickActionsPanel'\nimport PinnedCollectionsPanel from '../components/home/PinnedCollectionsPanel'\nimport EmptyStateSection from '../components/home/EmptyStateSection'\nimport RecentActivity from '../components/home/RecentActivity'\nimport CurrencyRatesCard from '../components/home/CurrencyRatesCard'\nimport WeatherCard from '../components/home/WeatherCard'\nimport { useSystemData } from '../hooks/useSystemData'\n\n/**\n * AccentVariant — тип акцентного оформления карточек быстрых действий\n */\ntype AccentVariant = 'blue' | 'emerald' | 'violet' | 'amber' | 'rose'\n\n/**\n * NavigationRoute — строго типизированные маршруты\n */\ntype NavigationRoute = '/collections' | '/products' | '/materials' | '/pricelist' | '/settings' | '/journal'\n\n/**\n * QuickActionItemCfg — конфигурация пункта «быстрые действия»\n */\ninterface QuickActionItemCfg {\n  /** ID записи для ключей в списке */\n  readonly id: string\n  /** Заголовок */\n  readonly label: string\n  /** Подзаголовок */\n  readonly description: string\n  /** Иконка */\n  readonly icon: React.ComponentType<{ size?: number }>\n  /** Путь перехода */\n  readonly route: NavigationRoute\n  /** Классы акцента внешнего вида (Tailwind) */\n  readonly accentClass: string\n  /** Приоритет визуального акцента */\n  readonly priority: 'high' | 'medium' | 'low'\n}\n\n/**\n * HeroConfiguration — данные приветственного блока\n */\ninterface HeroConfiguration {\n  /** Заголовок бейджа слева */\n  readonly badgePrimary: string\n  /** Подзаголовок бейджа справа */\n  readonly badgeSecondary: string\n  /** Заголовок hero */\n  readonly title: string\n  /** Описание hero */\n  readonly description: string\n  /** Иллюстрация hero */\n  readonly imageUrl: string\n  /** Alt для иллюстрации */\n  readonly imageAlt: string\n}\n\n/**\n * UIConfiguration — статическая конфигурация для hero и быстрых действий\n */\nclass UIConfiguration {\n  /** Конфигурация hero-блока */\n  static readonly HERO: HeroConfiguration = {\n    badgePrimary: 'WASSER PRO',\n    badgeSecondary: 'Управление витриной и прайсом',\n    title: 'Добро пожаловать в WASSER PRO',\n    description:\n      'Управляйте материалами, изделиями и коллекциями. Импорт Excel, расчёт цен, генерация PDF/Excel прайс-листов.',\n    imageUrl:\n      'https://pub-cdn.sider.ai/u/U07GHKZAW71/web-coder/688992697fa204756a0aa9b7/resource/81bf018d-f940-4ff5-bc9c-79aebb95ed87.jpg',\n    imageAlt: 'WASSER PRO Interface Preview',\n  } as const\n\n  /** Карточки быстрых действий */\n  static readonly QUICK_ACTIONS: readonly QuickActionItemCfg[] = [\n    {\n      id: 'collections',\n      label: 'Коллекции',\n      description: 'Витрина изделий',\n      icon: Grid2X2,\n      route: '/collections',\n      accentClass: 'border-blue-200 bg-blue-50 text-blue-700',\n      priority: 'high',\n    },\n    {\n      id: 'products',\n      label: 'Изделия',\n      description: 'Каталог продукции',\n      icon: Package,\n      route: '/products',\n      accentClass: 'border-emerald-200 bg-emerald-50 text-emerald-700',\n      priority: 'high',\n    },\n    {\n      id: 'materials',\n      label: 'Материалы',\n      description: 'Реестр компонентов',\n      icon: Layers,\n      route: '/materials',\n      accentClass: 'border-amber-200 bg-amber-50 text-amber-700',\n      priority: 'medium',\n    },\n  ] as const\n}\n\n/**\n * DateTimeService — форматирование даты/времени для UI\n */\nclass DateTimeService {\n  /** Получить строку текущей даты/времени (локаль ru-RU как пример) */\n  static nowLabel(): string {\n    try {\n      return new Date().toLocaleString('ru-RU', { dateStyle: 'medium', timeStyle: 'short' })\n    } catch {\n      return new Date().toLocaleString()\n    }\n  }\n}\n\n/**\n * HeroSection — приветственный модуль с иллюстрацией\n */\nconst HeroSection = memo(function HeroSection(): React.ReactElement {\n  const { t } = useTranslation()\n  const hero = useMemo(\n    () => ({\n      badge: t('home.badge', 'Готово к работе'),\n      title: t('home.title', UIConfiguration.HERO.title),\n      description: t('home.subtitle', UIConfiguration.HERO.description),\n      imgUrl: UIConfiguration.HERO.imageUrl,\n      imgAlt: UIConfiguration.HERO.imageAlt,\n      time: DateTimeService.nowLabel(),\n      ctaPrimary: t('home.cta.collections', 'Перейти к коллекциям'),\n      ctaSecondary: t('home.cta.materials', 'Материалы'),\n    }),\n    [t],\n  )\n\n  const navigate = useNavigate()\n  const goCollections = useCallback(() => navigate('/collections'), [navigate])\n  const goMaterials = useCallback(() => navigate('/materials'), [navigate])\n\n  return (\n    <Card className=\"p-0 overflow-hidden bg-white/90 border border-gray-200 shadow-sm\">\n      <section className=\"grid grid-cols-1 lg:grid-cols-2 gap-0 items-stretch\" role=\"banner\" aria-label=\"Hero\">\n        <div className=\"p-6 lg:p-8\">\n          {/* Бейдж статуса */}\n          <div\n            className=\"inline-flex items-center gap-2 px-2.5 py-1 rounded-full bg-blue-50 text-blue-700 text-xs border border-blue-200 mb-4\"\n            aria-label={hero.badge}\n            title={hero.badge}\n          >\n            <span className=\"font-semibold\">{UIConfiguration.HERO.badgePrimary}</span>\n            <span className=\"text-blue-500\">•</span>\n            <span>{UIConfiguration.HERO.badgeSecondary}</span>\n          </div>\n\n          {/* Заголовок */}\n          <h1 id=\"hero-title\" className=\"text-2xl lg:text-3xl font-extrabold text-gray-900 mb-3\">\n            {hero.title}\n          </h1>\n\n          {/* Описание */}\n          <p className=\"text-gray-600 leading-relaxed mb-6\">{hero.description}</p>\n\n          {/* Метки состояния системы */}\n          <div className=\"flex flex-wrap items-center gap-6 text-sm\">\n            <div className=\"flex items-center gap-2 text-gray-700\">\n              <span className=\"w-2 h-2 rounded-full bg-green-500 animate-pulse\" />\n              {t('home.badge', 'Готово к работе')}\n            </div>\n            <div className=\"flex items-center gap-2 text-gray-500\">\n              <Clock size={14} />\n              {hero.time}\n            </div>\n          </div>\n\n          {/* CTA как ссылки из навигации AppShell (минимум кода) */}\n          <div className=\"mt-6 flex flex-wrap gap-3\">\n            <button\n              type=\"button\"\n              onClick={goCollections}\n              className=\"inline-flex items-center gap-2 px-4 py-2 rounded-lg text-white bg-blue-600 hover:bg-blue-700 transition-colors\"\n              aria-label={hero.ctaPrimary}\n              title={hero.ctaPrimary}\n            >\n              {hero.ctaPrimary}\n            </button>\n            <button\n              type=\"button\"\n              onClick={goMaterials}\n              className=\"inline-flex items-center gap-2 px-4 py-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-50 text-gray-800\"\n              aria-label={hero.ctaSecondary}\n              title={hero.ctaSecondary}\n            >\n              {hero.ctaSecondary}\n            </button>\n          </div>\n        </div>\n\n        {/* Иллюстрация */}\n        <div className=\"h-48 lg:h-auto bg-gradient-to-br from-gray-50 to-gray-100 relative overflow-hidden\">\n          <img\n            src={hero.imgUrl}\n            alt={hero.imgAlt}\n            className=\"object-cover w-full h-full transition-transform duration-300 hover:scale-105\"\n            loading=\"eager\"\n            decoding=\"async\"\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/5 to-transparent\" />\n        </div>\n      </section>\n    </Card>\n  )\n})\n\n/**\n * InformationPanel — внешние данные (курсы, погода)\n */\nconst InformationPanel = memo(function InformationPanel(): React.ReactElement {\n  return (\n    <section className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\" aria-label=\"Информация: курсы и погода\">\n      <CurrencyRatesCard />\n      <WeatherCard />\n    </section>\n  )\n})\n\n/**\n * HomePage — страница-дешборд\n */\nconst HomePage = memo(function HomePage(): React.ReactElement {\n  const navigate = useNavigate()\n  const { products, collections, metrics, pinnedCollections, seed } = useSystemData()\n\n  /** Навигация по клику из быстрых действий */\n  const handleNavigate = useCallback(\n    (path: string) => {\n      navigate(path)\n    },\n    [navigate],\n  )\n\n  /** Быстрые действия на основе статической конфигурации */\n  const quickItems = useMemo(\n    () =>\n      UIConfiguration.QUICK_ACTIONS.map((a) => ({\n        label: a.label,\n        description: a.description,\n        icon: <a.icon size={18} />,\n        onClick: () => handleNavigate(a.route),\n        accentClass: a.accentClass,\n      })),\n    [handleNavigate],\n  )\n\n  /** Признак пустого состояния */\n  const isEmpty = useMemo(() => products.length === 0 && collections.length === 0, [products.length, collections.length])\n\n  /** Словарь товаров для виджета закреплённых коллекций */\n  const productMap = useMemo(() => new Map(products.map((p) => [p.id, p])), [products])\n\n  return (\n    <main className=\"space-y-8\" role=\"main\" aria-labelledby=\"hero-title\">\n      {/* Приветственная секция */}\n      <HeroSection />\n\n      {/* Системные метрики */}\n      <SystemMetricsPanel metrics={metrics} />\n\n      {/* Внешние данные */}\n      <InformationPanel />\n\n      {/* Пустое состояние (подсказка) */}\n      {isEmpty && <EmptyStateSection onSeedData={seed} onNavigateCollections={() => handleNavigate('/collections')} />}\n\n      {/* Быстрые действия */}\n      <QuickActionsPanel items={quickItems} />\n\n      {/* Закреплённые коллекции (если есть) */}\n      {pinnedCollections.length > 0 && (\n        <PinnedCollectionsPanel\n          collections={pinnedCollections}\n          productMap={productMap}\n          onOpenCollections={() => handleNavigate('/collections')}\n        />\n      )}\n\n      {/* Журнал активности */}\n      <RecentActivity limit={6} />\n    </main>\n  )\n})\n\nexport default HomePage\n",
      "lines": 308,
      "size": 11727,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.4025071+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/common/NumericField.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "function normalizeToNumber(",
          "const s = (raw ?? '').trim()",
          "const cleaned = s.replace(',', '.')",
          "const valid = cleaned.replace(/[^0-9\\.\\-]/g, '')",
          "const fixedMinus = valid.replace(/(?!^)-/g, '')",
          "const parts = fixedMinus.split('.')",
          "const fixedDot = parts.length > 2 ? parts.slice(0, 2).join('.') : fixedMinus",
          "export default function NumericField({",
          "const committed = useMemo(() => (typeof value === 'number' ? String(value) : ''), [value])",
          "const lastCommittedRef = useRef<string>(committed)",
          "const commit = useCallback(() => {",
          "const n = normalizeToNumber(draft, { min, max, allowNegative })",
          "const prev = lastCommittedRef.current"
        ],
        "interfaces": [
          "export interface NumericFieldProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'value' | 'onChange'> {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 13,
          "typesCount": 0,
          "hooksCount": 6,
          "interfacesCount": 1,
          "exportsCount": 2,
          "importsCount": 1,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [
          "import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'"
        ],
        "hasTypeScript": true,
        "functions": [
          "function normalizeToNumber("
        ],
        "exports": [
          "export interface NumericFieldProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'value' | 'onChange'> {",
          "export default function NumericField({"
        ],
        "hooks": [
          "import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'",
          "const committed = useMemo(() => (typeof value === 'number' ? String(value) : ''), [value])",
          "const [draft, setDraft] = useState<string>(committed)",
          "const lastCommittedRef = useRef<string>(committed)",
          "useEffect(() => {",
          "const commit = useCallback(() => {"
        ]
      },
      "content": "/**\n * NumericField — универсальное числовое поле с \"draft → commit\" стратегией.\n * Во время ввода позволяет оставлять пустую строку и не проставляет 0 автоматически.\n * Коммит значения происходит по blur или Enter. Escape — откат к последнему коммиту.\n */\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\n/**\n * Пропсы компонента NumericField\n */\nexport interface NumericFieldProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'value' | 'onChange'> {\n  /** Текущее числовое значение (коммиченное) */\n  value: number | null | undefined\n  /** Коммит нового значения (по blur или Enter). null означает \"пусто\" */\n  onValueChange: (next: number | null) => void\n  /** Мин/Макс ограничения (опционально) */\n  min?: number\n  max?: number\n  /** Разрешить отрицательные значения (по умолчанию false) */\n  allowNegative?: boolean\n  /** Класс инпута (чтобы не конфликтовать с обёрткой) */\n  inputClassName?: string\n  /** ARIA label */\n  ariaLabel?: string\n}\n\n/**\n * Утилита: нормализация черновой строки к числу с учётом ограничений\n */\nfunction normalizeToNumber(\n  raw: string,\n  opts: { min?: number; max?: number; allowNegative?: boolean },\n): number | null {\n  const s = (raw ?? '').trim()\n  if (s === '') return null\n  // Заменяем запятую на точку, убираем пробелы\n  const cleaned = s.replace(',', '.')\n  // Разрешаем цифры, один минус (в начале) и одну точку\n  const valid = cleaned.replace(/[^0-9\\.\\-]/g, '')\n  // Запрещаем множественные минусы, минус не в начале\n  const fixedMinus = valid.replace(/(?!^)-/g, '')\n  // Запрещаем более одной точки\n  const parts = fixedMinus.split('.')\n  const fixedDot = parts.length > 2 ? parts.slice(0, 2).join('.') : fixedMinus\n\n  let n = Number(fixedDot)\n  if (Number.isNaN(n)) return null\n  if (!opts.allowNegative && n < 0) n = 0\n  if (opts.min != null && n < opts.min) n = opts.min\n  if (opts.max != null && n > opts.max) n = opts.max\n  return n\n}\n\n/**\n * Компонент NumericField\n */\nexport default function NumericField({\n  value,\n  onValueChange,\n  min,\n  max,\n  allowNegative = false,\n  inputClassName,\n  ariaLabel,\n  onBlur,\n  onKeyDown,\n  ...rest\n}: NumericFieldProps): React.ReactElement {\n  const committed = useMemo(() => (typeof value === 'number' ? String(value) : ''), [value])\n  const [draft, setDraft] = useState<string>(committed)\n  const lastCommittedRef = useRef<string>(committed)\n\n  // Синхронизируем черновик при внешнем изменении value\n  useEffect(() => {\n    setDraft(committed)\n    lastCommittedRef.current = committed\n  }, [committed])\n\n  /** Обработчик коммита (blur / Enter) */\n  const commit = useCallback(() => {\n    const n = normalizeToNumber(draft, { min, max, allowNegative })\n    onValueChange(n)\n    // Обновим отображение нормализованным значением (или пустой строкой)\n    setDraft(typeof n === 'number' ? String(n) : '')\n    lastCommittedRef.current = typeof n === 'number' ? String(n) : ''\n  }, [draft, min, max, allowNegative, onValueChange])\n\n  return (\n    <input\n      type=\"text\"\n      inputMode=\"decimal\"\n      aria-label={ariaLabel}\n      {...rest}\n      className={inputClassName ?? rest.className}\n      value={draft}\n      onChange={(e) => setDraft(e.target.value)}\n      onBlur={(e) => {\n        commit()\n        onBlur?.(e)\n      }}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          e.preventDefault()\n          commit()\n        } else if (e.key === 'Escape') {\n          e.preventDefault()\n          // Откат к последнему коммиту\n          const prev = lastCommittedRef.current\n          setDraft(prev)\n        }\n        onKeyDown?.(e)\n      }}\n    />\n  )\n}\n",
      "lines": 117,
      "size": 4318,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.3578923+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/services/ai.ts": {
      "analysis": {
        "types": [],
        "classes": [
          "export class AiService {"
        ],
        "components": [
          "const FallbackUtils = {",
          "const t = this.low(text)",
          "const L = (x?: string) => this.low(x)",
          "const byArt = catalog.find((m) => L(m.article) === L(nameOrArticle.article))",
          "const byName = catalog.find((m) => L(m.name) === L(nameOrArticle.name))",
          "const byIncludes = catalog.find((m) => L(m.name).includes(L(nameOrArticle.name)))",
          "const n = name || 'Новая коллекция'",
          "const g = group ? ` (${group})` : ''",
          "const lineup =",
          "const pitch =",
          "const text = `${productName} ${brief}`",
          "const isTumba = this.hasAny(text, ['тумб', 'tumb', 'tb-'])",
          "const isPenal = this.hasAny(text, ['пенал', 'penal'])",
          "const isMirror = this.hasAny(text, ['зеркал', 'mirror', 'mir-'])",
          "const is600 = this.hasAny(text, ['600'])",
          "const is800 = this.hasAny(text, ['800'])",
          "const is1000 = this.hasAny(text, ['1000', '1000мм', '1 000'])",
          "const glass = this.findInCatalog(materialsCatalog, { name: 'Стекло зеркальное' })",
          "const edge = this.findInCatalog(materialsCatalog, { name: 'Кромка ПВХ 2мм', article: 'EDGE-2-PVC' })",
          "const ldsp = this.findInCatalog(materialsCatalog, { name: 'ЛДСП 18мм Белый', article: 'LDSP-18-W' })",
          "const edge = this.findInCatalog(materialsCatalog, { name: 'Кромка ПВХ 2мм', article: 'EDGE-2-PVC' })",
          "const hinge = this.findInCatalog(materialsCatalog, { name: 'Петля clip-on', article: 'HINGE-CLIP' })",
          "const handle = this.findInCatalog(materialsCatalog, { name: 'Ручка скоба' })",
          "const resp = await fetch(this.endpoint, {",
          "const txt = await resp.text().catch(() => '')",
          "const data = (await resp.json()) as any",
          "const remote = await this.post<{ description: string }>('collection_description', input)",
          "const desc = String((remote.data as any)?.description || '').trim()",
          "const remote = await this.post<{ items: AiTechCardItem[] }>('techcard_suggest', input)",
          "const items = Array.isArray((remote.data as any)?.items) ? ((remote.data as any).items as AiTechCardItem[]) : []",
          "const cleaned = items.filter((x) => typeof x?.quantity === 'number' && x.quantity > 0)"
        ],
        "interfaces": [
          "export interface MaterialsCatalogItem {",
          "export interface AiTechCardItem {",
          "interface AiResponse<T> {"
        ],
        "hasJSX": true,
        "stats": {
          "componentsCount": 31,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 3,
          "exportsCount": 3,
          "importsCount": 0,
          "classesCount": 1,
          "functionsCount": 1
        },
        "imports": [],
        "hasTypeScript": true,
        "functions": [
          "const L = (x?: string) => this.low(x)"
        ],
        "exports": [
          "export interface MaterialsCatalogItem {",
          "export interface AiTechCardItem {",
          "export class AiService {"
        ],
        "hooks": []
      },
      "content": "/**\n * AiService — фронтенд-обёртка для вызовов AI (Claude) с офлайн-fallback.\n * Если /api/ai/claude недоступен (403/404/Network), используется детерминированная локальная генерация.\n */\n\nexport interface MaterialsCatalogItem {\n  /** Имя материала (для сопоставления по названию) */\n  name: string\n  /** Артикул (основной ключ сопоставления) */\n  article?: string\n  /** Единица измерения */\n  unit?: string\n  /** Цена (необязательно) */\n  price?: number\n}\n\n/** Результат подсказки ТД (AI) */\nexport interface AiTechCardItem {\n  /** Имя (может отличаться от каталога) */\n  name: string\n  /** Артикул (если известен) */\n  article?: string\n  /** Количество */\n  quantity: number\n  /** Единица измерения */\n  unit?: string\n}\n\n/** Общий ответ API */\ninterface AiResponse<T> {\n  ok: boolean\n  data?: T\n  error?: string\n}\n\n/**\n * Вспомогательные утилиты для локального fallback\n */\nconst FallbackUtils = {\n  /** Нормализация строки */\n  low(s: unknown): string {\n    return String(s || '').trim().toLowerCase()\n  },\n\n  /** Проверка наличия любого из ключевых слов */\n  hasAny(text: string, keys: string[]): boolean {\n    const t = this.low(text)\n    return keys.some((k) => t.includes(this.low(k)))\n  },\n\n  /** Поиск позиции в каталоге по артикулу/названию (строгое либо вхождение по имени) */\n  findInCatalog(\n    catalog: MaterialsCatalogItem[],\n    nameOrArticle: { name?: string; article?: string },\n  ): MaterialsCatalogItem | undefined {\n    const L = (x?: string) => this.low(x)\n    const byArt = catalog.find((m) => L(m.article) === L(nameOrArticle.article))\n    if (byArt) return byArt\n    const byName = catalog.find((m) => L(m.name) === L(nameOrArticle.name))\n    if (byName) return byName\n    const byIncludes = catalog.find((m) => L(m.name).includes(L(nameOrArticle.name)))\n    return byIncludes\n  },\n\n  /** Создать fallback-описание коллекции (2–3 предложения) */\n  collectionDescription(name: string, group?: string, productNames: string[] = []): string {\n    const n = name || 'Новая коллекция'\n    const g = group ? ` (${group})` : ''\n    const lineup =\n      productNames && productNames.length\n        ? `В линейку входят: ${productNames.slice(0, 4).join(', ')}${productNames.length > 4 ? ' и др.' : ''}. `\n        : ''\n    const pitch =\n      'Коллекция сочетает функциональность и лаконичную эстетику, подойдёт для современных интерьеров.'\n    return `${n}${g} — актуальная подборка изделий с продуманными размерами и материалами. ${lineup}${pitch}`\n  },\n\n  /**\n   * Сформировать эвристический состав техкарты по краткому ТЗ/названию.\n   * Поддерживает типовые сценарии: тумба, пенал, зеркало; размер 600/800/1000.\n   * Артикулы подобраны под демо-данные: LDSP-18-W, EDGE-2-PVC, HINGE-CLIP.\n   */\n  techCardSuggest(input: {\n    productName: string\n    brief?: string\n    materialsCatalog: MaterialsCatalogItem[]\n  }): AiTechCardItem[] {\n    const { productName, brief = '', materialsCatalog } = input\n    const text = `${productName} ${brief}`\n\n    const isTumba = this.hasAny(text, ['тумб', 'tumb', 'tb-'])\n    const isPenal = this.hasAny(text, ['пенал', 'penal'])\n    const isMirror = this.hasAny(text, ['зеркал', 'mirror', 'mir-'])\n\n    // Размерные эвристики\n    const is600 = this.hasAny(text, ['600'])\n    const is800 = this.hasAny(text, ['800'])\n    const is1000 = this.hasAny(text, ['1000', '1000мм', '1 000'])\n\n    // Базовая комплектность\n    let ldspQty = 1.8\n    let edgeQty = 6\n    let hingeQty = 2\n\n    if (is600) {\n      ldspQty = 1.5\n      edgeQty = 4\n      hingeQty = 2\n    } else if (is800) {\n      ldspQty = 2.2\n      edgeQty = 7\n      hingeQty = 2\n    } else if (is1000) {\n      ldspQty = 2.8\n      edgeQty = 9\n      hingeQty = 4\n    }\n\n    // Для пенала материалов больше\n    if (isPenal) {\n      ldspQty += 0.8\n      edgeQty += 2\n      hingeQty = 4\n    }\n\n    // Для зеркала другая логика\n    if (isMirror) {\n      // Для зеркал не нужны LDSP/петли по умолчанию\n      const list: AiTechCardItem[] = []\n      const glass = this.findInCatalog(materialsCatalog, { name: 'Стекло зеркальное' })\n      list.push({\n        name: glass?.name || 'Зеркало стеклянное',\n        article: glass?.article,\n        quantity: is600 ? 0.35 : is800 ? 0.5 : 0.6,\n        unit: glass?.unit || 'м2',\n      })\n      const edge = this.findInCatalog(materialsCatalog, { name: 'Кромка ПВХ 2мм', article: 'EDGE-2-PVC' })\n      list.push({\n        name: edge?.name || 'Кромка ПВХ 2мм',\n        article: edge?.article || 'EDGE-2-PVC',\n        quantity: 2,\n        unit: edge?.unit || 'пог.м',\n      })\n      return list\n    }\n\n    // Нормальные мебельные изделия (тумба/пенал/прочее)\n    const items: AiTechCardItem[] = []\n\n    const ldsp = this.findInCatalog(materialsCatalog, { name: 'ЛДСП 18мм Белый', article: 'LDSP-18-W' })\n    items.push({\n      name: ldsp?.name || 'ЛДСП 18мм Белый',\n      article: ldsp?.article || 'LDSP-18-W',\n      quantity: Number(ldspQty.toFixed(2)),\n      unit: ldsp?.unit || 'м2',\n    })\n\n    const edge = this.findInCatalog(materialsCatalog, { name: 'Кромка ПВХ 2мм', article: 'EDGE-2-PVC' })\n    items.push({\n      name: edge?.name || 'Кромка ПВХ 2мм',\n      article: edge?.article || 'EDGE-2-PVC',\n      quantity: edgeQty,\n      unit: edge?.unit || 'пог.м',\n    })\n\n    // Петли у тумб/пеналов с дверями\n    if (isTumba || isPenal || this.hasAny(text, ['двер', 'петл', 'hinge'])) {\n      const hinge = this.findInCatalog(materialsCatalog, { name: 'Петля clip-on', article: 'HINGE-CLIP' })\n      items.push({\n        name: hinge?.name || 'Петля clip-on',\n        article: hinge?.article || 'HINGE-CLIP',\n        quantity: hingeQty,\n        unit: hinge?.unit || 'шт',\n      })\n    }\n\n    // Ручки при необходимости\n    if (this.hasAny(text, ['ручк', 'handle'])) {\n      const handle = this.findInCatalog(materialsCatalog, { name: 'Ручка скоба' })\n      items.push({\n        name: handle?.name || 'Ручка скоба',\n        article: handle?.article,\n        quantity: is600 ? 2 : 2,\n        unit: handle?.unit || 'шт',\n      })\n    }\n\n    return items\n  },\n}\n\n/**\n * AiService — общие методы для генерации описаний коллекций и подсказки ТД.\n * Порядок:\n * 1) Пытаемся обратиться к backend /api/ai/claude.\n * 2) При любой ошибке используем локальный fallback, возвращаем значения без исключений.\n */\nexport class AiService {\n  /** Базовый путь до AI-эндпоинта */\n  static endpoint = '/api/ai/claude'\n\n  /** Вызов backend-эндпоинта с задачей и полезной нагрузкой */\n  private static async post<T>(task: string, payload: Record<string, unknown>): Promise<AiResponse<T>> {\n    try {\n      const resp = await fetch(this.endpoint, {\n        method: 'POST',\n        headers: { 'content-type': 'application/json' },\n        body: JSON.stringify({ task, payload }),\n      })\n      if (!resp.ok) {\n        // Некоторые CDN возвращают HTML об ошибке (CloudFront 403) — считаем как not ok\n        const txt = await resp.text().catch(() => '')\n        return { ok: false, error: `HTTP ${resp.status}: ${txt || 'AI endpoint error'}` }\n      }\n      const data = (await resp.json()) as any\n      if (data?.error) return { ok: false, error: String(data.error) }\n      return { ok: true, data }\n    } catch (e: any) {\n      return { ok: false, error: e?.message || 'Network error' }\n    }\n  }\n\n  /** Сгенерировать описание коллекции (2–3 предложения, без воды) */\n  static async generateCollectionDescription(input: {\n    name: string\n    group?: string\n    productNames: string[]\n  }): Promise<string> {\n    const remote = await this.post<{ description: string }>('collection_description', input)\n    if (remote.ok) {\n      const desc = String((remote.data as any)?.description || '').trim()\n      if (desc) return desc\n    } else {\n      // Диагностика в консоль, но UI не ломаем\n      console.warn('[AI fallback] collection_description:', remote.error)\n    }\n    // Fallback\n    return FallbackUtils.collectionDescription(input.name, input.group, input.productNames)\n  }\n\n  /** Подсказать техкарту на основе краткого ТЗ и каталога материалов */\n  static async suggestTechCard(input: {\n    productName: string\n    brief?: string\n    typeName?: string\n    finishName?: string\n    materialsCatalog: MaterialsCatalogItem[]\n  }): Promise<AiTechCardItem[]> {\n    const remote = await this.post<{ items: AiTechCardItem[] }>('techcard_suggest', input)\n    if (remote.ok) {\n      const items = Array.isArray((remote.data as any)?.items) ? ((remote.data as any).items as AiTechCardItem[]) : []\n      const cleaned = items.filter((x) => typeof x?.quantity === 'number' && x.quantity > 0)\n      if (cleaned.length) return cleaned\n    } else {\n      console.warn('[AI fallback] techcard_suggest:', remote.error)\n    }\n    // Fallback эвристики\n    return FallbackUtils.techCardSuggest({\n      productName: input.productName,\n      brief: input.brief,\n      materialsCatalog: input.materialsCatalog || [],\n    })\n  }\n}\n",
      "lines": 265,
      "size": 10399,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.4346229+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/breadcrumb.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Breadcrumb = React.forwardRef<",
          "const BreadcrumbList = React.forwardRef<",
          "const BreadcrumbItem = React.forwardRef<",
          "const BreadcrumbLink = React.forwardRef<",
          "const Comp = asChild ? Slot : \"a\"",
          "const BreadcrumbPage = React.forwardRef<",
          "const BreadcrumbSeparator = ({",
          "const BreadcrumbEllipsis = ({"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 8,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 4,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import { Slot } from \"@radix-ui/react-slot\"",
          "import { ChevronRight, MoreHorizontal } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export {"
        ],
        "hooks": []
      },
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
      "lines": 116,
      "size": 2712,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2214136+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/slider.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Slider = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 3,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as SliderPrimitive from \"@radix-ui/react-slider\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Slider }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
      "lines": 29,
      "size": 1051,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2841790+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/lib/pdf/loader.ts": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "function loadScript(src: string): Promise<void> {",
          "const existing = Array.from(document.getElementsByTagName('script')).find(",
          "const script = document.createElement('script');",
          "export async function ensureJsPdf(): Promise<void> {",
          "const jsPdfUrl = 'https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js';",
          "const autoTableUrl =",
          "export function getJsPdfCtor(): any {"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 7,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 2,
          "importsCount": 0,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [],
        "hasTypeScript": true,
        "functions": [
          "function loadScript(src: string): Promise<void> {"
        ],
        "exports": [
          "export async function ensureJsPdf(): Promise<void> {",
          "export function getJsPdfCtor(): any {"
        ],
        "hooks": []
      },
      "content": "/**\n * Загрузчик UMD-скриптов jsPDF и jspdf-autotable\n * Используется для обхода проблем сборки (canvg peer dep) и работы через window.jspdf\n */\n\nlet loadingPromise: Promise<void> | null = null;\n\n/**\n * Загружает внешний скрипт в документ\n */\nfunction loadScript(src: string): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    const existing = Array.from(document.getElementsByTagName('script')).find(\n      (s) => s.src === src\n    );\n    if (existing) {\n      if ((existing as any)._loaded) return resolve();\n      existing.addEventListener('load', () => resolve());\n      existing.addEventListener('error', () => reject(new Error(`Failed to load ${src}`)));\n      return;\n    }\n    const script = document.createElement('script');\n    script.src = src;\n    script.async = true;\n    (script as any)._loaded = false;\n    script.onload = () => {\n      (script as any)._loaded = true;\n      resolve();\n    };\n    script.onerror = () => reject(new Error(`Failed to load ${src}`));\n    document.head.appendChild(script);\n  });\n}\n\n/**\n * Гарантирует наличие window.jspdf (UMD) и плагина autoTable\n */\nexport async function ensureJsPdf(): Promise<void> {\n  if (typeof window === 'undefined') return;\n  if ((window as any).jspdf?.jsPDF && (window as any).jspdf?.jsPDF?.API?.autoTable) {\n    return;\n  }\n  if (!loadingPromise) {\n    loadingPromise = (async () => {\n      // UMD-сборки с CDN\n      const jsPdfUrl = 'https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js';\n      const autoTableUrl =\n        'https://cdn.jsdelivr.net/npm/jspdf-autotable@3.8.2/dist/jspdf.plugin.autotable.min.js';\n      await loadScript(jsPdfUrl);\n      await loadScript(autoTableUrl);\n      // Небольшая задержка для инициализации глобалей\n      await new Promise((r) => setTimeout(r, 20));\n    })();\n  }\n  await loadingPromise;\n}\n\n/**\n * Получить jsPDF конструктор из window.jspdf (после ensureJsPdf)\n */\nexport function getJsPdfCtor(): any {\n  return (window as any).jspdf?.jsPDF || (window as any).jsPDF || null;\n}",
      "lines": 63,
      "size": 2216,
      "extension": ".ts",
      "lastModified": "2025-08-11T01:40:49.3929817+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/card.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const Card = React.forwardRef<",
          "const CardHeader = React.forwardRef<",
          "const CardTitle = React.forwardRef<",
          "const CardDescription = React.forwardRef<",
          "const CardContent = React.forwardRef<",
          "const CardFooter = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 6,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 2,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }"
        ],
        "hooks": []
      },
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "lines": 77,
      "size": 1828,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2274140+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/navigation-menu.tsx": {
      "analysis": {
        "types": [],
        "classes": [],
        "components": [
          "const NavigationMenu = React.forwardRef<",
          "const NavigationMenuList = React.forwardRef<",
          "const NavigationMenuItem = NavigationMenuPrimitive.Item",
          "const navigationMenuTriggerStyle = cva(",
          "const NavigationMenuTrigger = React.forwardRef<",
          "const NavigationMenuContent = React.forwardRef<",
          "const NavigationMenuLink = NavigationMenuPrimitive.Link",
          "const NavigationMenuViewport = React.forwardRef<",
          "const NavigationMenuIndicator = React.forwardRef<"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 9,
          "typesCount": 0,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 1,
          "importsCount": 5,
          "classesCount": 0,
          "functionsCount": 0
        },
        "imports": [
          "import * as React from \"react\"",
          "import * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"",
          "import { cva } from \"class-variance-authority\"",
          "import { ChevronDown } from \"lucide-react\"",
          "import { cn } from \"@/lib/utils\""
        ],
        "hasTypeScript": true,
        "functions": [],
        "exports": [
          "export {"
        ],
        "hooks": []
      },
      "content": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n",
      "lines": 129,
      "size": 5124,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2585606+06:00"
    },
    "менный бланк/Прайс лист рабочая тема/src/components/ui/calendar.tsx": {
      "analysis": {
        "types": [
          "export type CalendarProps = React.ComponentProps<typeof DayPicker>"
        ],
        "classes": [],
        "components": [
          "function Calendar({"
        ],
        "interfaces": [],
        "hasJSX": true,
        "stats": {
          "componentsCount": 1,
          "typesCount": 1,
          "hooksCount": 0,
          "interfacesCount": 0,
          "exportsCount": 2,
          "importsCount": 5,
          "classesCount": 0,
          "functionsCount": 1
        },
        "imports": [
          "import * as React from \"react\"",
          "import { ChevronLeft, ChevronRight } from \"lucide-react\"",
          "import { DayPicker } from \"react-day-picker\"",
          "import { cn } from \"@/lib/utils\"",
          "import { buttonVariants } from \"@/components/ui/button\""
        ],
        "hasTypeScript": true,
        "functions": [
          "function Calendar({"
        ],
        "exports": [
          "export type CalendarProps = React.ComponentProps<typeof DayPicker>",
          "export { Calendar }"
        ],
        "hooks": []
      },
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n",
      "lines": 77,
      "size": 2949,
      "extension": ".tsx",
      "lastModified": "2025-08-11T01:40:49.2254170+06:00"
    }
  },
  "metadata": {
    "totalLines": 16635,
    "totalSize": 583450,
    "createdAt": "2025-08-11T01:41:00.8114331+06:00",
    "avgLinesPerFile": 160.0,
    "totalFiles": 104,
    "fileTypes": {
      ".tsx": 85,
      ".ts": 19
    },
    "category": "Scripts",
    "avgSizePerFile": 5610.0,
    "sourceDirectory": "./src"
  }
}
